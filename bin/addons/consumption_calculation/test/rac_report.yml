-
  In order to test the RACÂ reporting, I will create a report and
  process this report
-
  I create the RAC report
-
  !record {model: real.average.consumption, id: rac1}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-08-01', '%Y-%m-%d'))
    line_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        consumed_qty: 250.0
      - product_id: product2
        uom_id: product.product_uom_unit
        consumed_qty: 150.0
      - product_id: product3
        uom_id: product.product_uom_unit
        consumed_qty: 12.0
-
  I check the default value of fields
-
  !assert {model: real.average.consumption, id: rac1}:
    - period_to == time.strftime('%Y-%m-%d'), "The default value of the field period_to not corresponding on today"
    - not created_ok, "The checkbox created_ok is checked by default"
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    try:
      self.process_moves(cr, uid, ref('rac1'), context=context)
    except:
      assert False, "Error when processing moves"
-
  I check if stock moves has been created
-
  !python {model: real.average.consumption}: |
    rac = self.browse(cr, uid, ref('rac1'))
    for line in rac.line_ids:
      assert line.move_id, "No moves created for the %s" % line.product_id.name
-
  I create a second RAC report
-
  !record {model: real.average.consumption, id: rac2}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-07-01', '%Y-%m-%d'))
    period_to: !eval time.strftime('%Y-%m-%d', time.strptime('2011-07-31', '%Y-%m-%d'))
    line_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        consumed_qty: 150.0
      - product_id: product4
        uom_id: product.product_uom_unit
        consumed_qty: 360.0
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    self.process_moves(cr, uid, ref('rac2'), context=context)
-
  I check if stock moves hasnt been created
-
  !python {model: real.average.consumption}: |
    rac = self.browse(cr, uid, ref('rac2'))
    for line in rac.line_ids:
      assert line.move_id, "No moves created for the %s" % line.product_id.name
-
  I create a third RAC report
-
  !record {model: real.average.consumption, id: rac3}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-01', '%Y-%m-%d'))
    period_to: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-10', '%Y-%m-%d'))
    line_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        consumed_qty: 256.0
      - product_id: product4
        uom_id: product.product_uom_unit
        consumed_qty: 35.0
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    try:
      self.process_moves(cr, uid, ref('rac3'), context=context)
    except:
      assert False, "Error when processing moves"
-
  I create a fourth RAC report
-
  !record {model: real.average.consumption, id: rac4}:
    cons_location_id: stock.stock_location_stock
    activity_id: activity1
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-01', '%Y-%m-%d'))
    period_to: !eval time.strftime('%Y-%m-%d', time.strptime('2011-06-10', '%Y-%m-%d'))
    line_ids: 
      - product_id: product2
        uom_id: product_10_unit
        consumed_qty: 32.0
      - product_id: product4
        uom_id: product.product_uom_unit
        consumed_qty: 68.0
-
  I click on the button 'Save and Process'
-
  !python {model: real.average.consumption}: |
    self.process_moves(cr, uid, ref('rac4'))
-
  I check the calculation of a consumption for the entire period
-
  !python {model: product.product}: |
    import time
    from mx.DateTime import *
    from_date = Date(2011, 6, 10)
    to_date = now()
    context = {'average': True, 'from_date': from_date.strftime('%Y-%m-%d'), 'to_date': to_date.strftime('%Y-%m-%d'), 'location_id': ref('stock.stock_location_stock')}
    p1_rac = self.browse(cr, uid, ref('product1'), context=context)
    uom_id = p1_rac.uom_id.id
    nb_months = self._get_date_diff(from_date, to_date)
    res = self.pool.get('product.uom')._compute_qty(cr, uid, uom_id, 426.0/nb_months, uom_id)
    assert p1_rac.monthly_consumption == res, "The average of product 1 is not correct %s :: %s" % (res, p1_rac.monthly_consumption)
#-
#  I check the average consumption for 2011, June
#-
#  !python {model: product.product}: |
#    context = {'from_date': '2011-06-01', 'to_date': '2011-06-30'}
#    p4_rac = self.browse(cr, uid, ref('product4'), context=context).monthly_consumption
#    assert p4_rac == 103.00, "The average of product 4 for 2011, June is not correct"
-
  I test the default activity (because of module msf_outgoing installed or not)
-
  !record {model: real.average.consumption, id: rac_test}:
    cons_location_id: stock.stock_location_stock
    period_from: !eval time.strftime('%Y-%m-%d', time.strptime('2011-08-01', '%Y-%m-%d'))
