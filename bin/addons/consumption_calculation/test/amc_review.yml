-
  In order to test the AMC review function, I will
  create a wizard, check the AMC is good
-
  To do that, I create some stock move with different
  reason types and I will confirm them
-
  !record {model: stock.move, id: sm1}:
    name: sm1
    product_id: product1
    date_expected: 2011-07-11
    date: 2011-07-10
    product_qty: 12.0
    type: in
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_external_supply
    location_dest_id: stock.stock_location_stock
    location_id: stock.stock_location_suppliers
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm1')])
    self.action_done(cr, uid, [ref('sm1')])
-
  Create a new outgoing stock move
-
  !record {model: stock.move, id: sm2}:
    name: sm2
    product_id: product1
    date_expected: 2011-07-25
    date: 2011-07-10
    product_qty: 55.0
    type: in
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_external_supply
    location_dest_id: stock.stock_location_stock
    location_id: stock.stock_location_suppliers
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm2')])
    self.action_done(cr, uid, [ref('sm2')])
-
  Create a new outgoing stock move
-
  !record {model: stock.move, id: sm3}:
    name: sm3
    product_id: product1
    date_expected: 2011-08-12
    date: 2011-07-10
    product_qty: 25.0
    type: in
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_return_from_unit
    location_dest_id: stock.stock_location_stock
    location_id: stock.stock_location_customers
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm3')])
    self.action_done(cr, uid, [ref('sm3')])
-
    Create an incoming stock move
-
  !record {model: stock.move, id: sm4}:
    name: sm4
    product_id: product1
    date_expected: 2011-08-12
    date: 2011-07-10
    product_qty: 5.0
    type: out
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_deliver_partner
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm4')])
    self.action_done(cr, uid, [ref('sm4')])
-
    Create an loan outgoing stock move
-
  !record {model: stock.move, id: sm5}:
    name: sm5
    product_id: product1
    date_expected: 2011-08-12
    date: 2011-07-10
    product_qty: 5.0
    type: out
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_loan
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm5')])
    self.action_done(cr, uid, [ref('sm5')])
-
    Create an donation outgoing stock move
-
  !record {model: stock.move, id: sm6}:
    name: sm6
    product_id: product1
    date_expected: 2011-08-12
    date: 2011-07-10
    product_qty: 12.0
    type: out
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_donation_expiry
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm6')])
    self.action_done(cr, uid, [ref('sm6')])
-
    Create an loss outgoing stock move
-
  !record {model: stock.move, id: sm7}:
    name: sm7
    product_id: product1
    date_expected: 2011-08-12
    date: 2011-07-10
    product_qty: 25.0
    type: out
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_loss
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm7')])
    self.action_done(cr, uid, [ref('sm7')])
-
    Create an discrepancy outgoing stock move
-
  !record {model: stock.move, id: sm8}:
    name: sm8
    product_id: product1
    date_expected: 2011-08-12
    date: 2011-07-10
    product_qty: 7.0
    type: out
    product_uom: product.product_uom_unit
    reason_type_id: reason_types_moves.reason_type_discrepancy
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm8')])
    self.action_done(cr, uid, [ref('sm8')])
-
    Create an discrepancy outgoing stock move
-
  !record {model: stock.move, id: sm9}:
    name: sm9
    product_id: product1
    date_expected: 2011-07-10
    date: 2011-07-10
    product_qty: 30.0
    type: out
    product_uom: product_10_unit
    reason_type_id: reason_types_moves.reason_type_deliver_partner
    location_dest_id: stock.stock_location_customers
    location_id: stock.stock_location_stock
-
  I confirm it
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('sm9')])
    self.action_done(cr, uid, [ref('sm9')])
#-
#  I check the calculate AMC
#-
#  !python {model: product.product}: |
#    context = {'from_date': '2011-06-01','to_date': '2011-08-31'}
#    amc = self.compute_amc(cr, uid, ref('product1'), context=context)
#    assert amc == 179.00, "The calculate AMC is not correct"
-
  I create a new Monthly review consumption
-
  !record {model: monthly.review.consumption, id: mrc1}:
    period_from: 2011-01-01
    period_to: 2011-02-01
-
  I create a line for mrc1
- 
  !record {model: monthly.review.consumption.line, id: mrc1_l1}:
    name: product1
    fmc: 250.0
    valid_until: 2011-09-01
    mrc_id: mrc1
-
  I confirm the line
-
  !function {model: monthly.review.consumption.line, name: valid_line}:
    - model: monthly.review.consumption.line
      search: "[('id', '=', ref('mrc1_l1'))]"
-
  I create a new Monthly review consumption
-
  !record {model: monthly.review.consumption, id: mrc2}:
    period_from: 2011-09-01
    period_to: 2012-02-01
-
  I create a line for mrc1
- 
  !record {model: monthly.review.consumption.line, id: mrc2_l1}:
    name: product1
    fmc: 300.0
    mrc_id: mrc2
-
  I confirm the line
-
  !function {model: monthly.review.consumption.line, name: valid_line}:
    - model: monthly.review.consumption.line
      search: "[('id', '=', ref('mrc2_l1'))]"
-
  I create a line for mrc2
- 
  !record {model: monthly.review.consumption.line, id: mrc2_l2}:
    name: product5
    fmc: 200
    mrc_id: mrc2
-
  I confirm the line
-
  !function {model: monthly.review.consumption.line, name: valid_line}:
    - model: monthly.review.consumption.line
      search: "[('id', '=', ref('mrc2_l2'))]"
-
  I create a line for mrc2
- 
  !record {model: monthly.review.consumption.line, id: mrc2_l3}:
    name: product6
    fmc: 10.0
    mrc_id: mrc2
-
  I confirm the line
-
  !function {model: monthly.review.consumption.line, name: valid_line}:
    - model: monthly.review.consumption.line
      search: "[('id', '=', ref('mrc2_l3'))]"
-
  I create a line for mrc2
- 
  !record {model: monthly.review.consumption.line, id: mrc2_l4}:
    name: product7
    fmc: 25.0
    mrc_id: mrc2
-
  I confirm the line
-
  !function {model: monthly.review.consumption.line, name: valid_line}:
    - model: monthly.review.consumption.line
      search: "[('id', '=', ref('mrc2_l4'))]"
-
  Check the value of the FMC according to the context
-
  !python {model: product.product}: |
    context = {'location_id': ref('stock.stock_location_stock')}
    res = self.browse(cr, uid, ref('product1'), context=context).reviewed_consumption
    assert res == 300.0, "Bad FMC for product1"
