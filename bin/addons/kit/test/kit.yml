-
  I create a service stock location
-
  !record {model: stock.location, id: service_loc}:
    name: service
    service_location: True
    location_category: other
    usage: inventory
-
  I test the function fields for kit_compo_01
-
  !python {model: composition.kit}: |
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    # composition_batch_check: should be true
    assert kit.composition_batch_check, 'kit_compo_01: composition_batch_check should be true - %s'%kit.composition_batch_check
    # composition_expiry_check: should be true
    assert kit.composition_expiry_check, 'kit_compo_01: composition_expiry_check should be true - %s'%kit.composition_expiry_check
    # name: ITC - 20/jan/2010 - I believe you it is correct
    
    # composition_version: ITC
    assert kit.composition_version, 'kit_compo_01: composition_version should be %s - %s'%(kit.composition_version_txt,kit.composition_version)
    # composition_combined_ref_lot: False
    assert not kit.composition_combined_ref_lot, 'kit_compo_01: composition_combined_ref_lot should be false - %s'%kit.composition_combined_ref_lot
-
  I check the on_change function for composition.kit
-
  !python {model: composition.kit}: |
    self.on_change_product_id(cr, uid, [ref("kit_compo_01")], ref("kit_product_C"), context=context)
    self.on_change_lot_id(cr, uid, [ref("kit_compo_01")], ref("kit_lot_Cs"), context=context)
-
  I check the on_change function for composition.item
-
  !python {model: composition.item}: |
    self.on_product_change(cr, uid, [ref("item_01_01")], ref("kit_product_C"), context=context)
    self.on_lot_change(cr, uid, [ref("item_01_01")], ref("kit_product_C"), ref("kit_lot_Cs"), context=context)
-
  I check the function fields of composition item
-
  !python {model: composition.item}: |
    item = self.browse(cr, uid, ref("item_01_01"), context=context)
    # name
    assert item.name == item.item_product_id.name, 'item_01_01: name field is wrong - %s - %s'%(item.item_product_id.name,item.name)
    # item_kit_version
    assert item.item_kit_version == item.item_kit_id.composition_version, 'item_01_01: item_kit_version field is wrong - %s - %s'%(item.item_kit_id.composition_version,item.item_kit_version)
    # item_kit_type
    assert item.item_kit_type == item.item_kit_id.composition_type, 'item_01_01: item_kit_type field is wrong - %s - %s'%(item.item_kit_id.composition_type,item.item_kit_type)
    # state
    assert item.state == item.item_kit_id.state, 'item_01_01: state field is wrong - %s - %s'%(item.item_kit_id.state,item.state)
-
  I set the theoretical kit 01 as inactive
-
  !python {model: composition.kit}: |
    self.mark_as_inactive(cr, uid, [ref("kit_compo_01")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    assert not kit.active, 'kit_compo_01: the field active is wrong, should be false - %s'%kit.active
-
  I set the theoretical kit 01 back as active
-
  !python {model: composition.kit}: |
    self.mark_as_active(cr, uid, [ref("kit_compo_01")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    assert kit.active, 'kit_compo_01: the field active is wrong, should be true - %s'%kit.active
-
  I set the theoretical kit 01 as complete and check corresponding states
-
  !python {model: composition.kit}: |
    self.mark_as_completed(cr, uid, [ref("kit_compo_01")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_01"), context=context)
    assert kit.state == 'completed', 'kit_compo_01: the field state is wrong, should be completed - %s'%kit.state
    
    for item in kit.composition_item_ids:
      assert item.state == 'completed', 'kit_compo_01: the field state of corresponding item is wrong, should be completed - %s'%item.state
- 
  I create sale order kit_so_A
- 
  !record {model: sale.order, id: kit_so_A}:
    name: so a
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: kit_partner_A
    partner_invoice_id: kit_address_A
    partner_order_id: kit_address_A
    partner_shipping_id: kit_address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
- 
  I create a corresponding sale order line, with a batch management kit in it - prodB
- 
  !record {model: sale.order.line, id: kit_sol_A1}:
    name: sol a1
    company_id: base.main_company
    delay: 7.0
    order_id: kit_so_A
    price_unit: 1.0
    product_id: kit_product_B
    product_uom: product.product_uom_unit
    product_uom_qty: 10
    salesman_id: base.user_admin
    state: draft
    th_weight: 0.0
    type: make_to_order
-
  I open the replacement wizard but before check the state of sale order line - to test import function
-
  !python {model: sale.order}: |
    so_id = ref("kit_so_A")
    sol_obj = self.pool.get('sale.order.line')
    for obj in self.browse(cr, uid, [so_id], context=context):
      assert len(obj.order_line) == 1, 'the number of sale order line is wrong - 1 - %s'%len(obj.order_line)
      for line in obj.order_line:
        assert line.so_state_stored == 'draft', 'so state stored is wrong - draft - %s'%line.so_state_stored
        assert line.product_id.id == ref("kit_product_B"), 'the product from the sale order line is wrong - %s - %s'%(ref("kit_product_B"),line.product_id.id)
        res = sol_obj.de_kitting(cr, uid, [line.id], context=context)
        model = res['res_model']
        id = res['res_id']
        c = res['context']
        context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I complete the the theoretical kit - kit_compo_03, so it can be used in the wizard
-
  !python {model: composition.kit}: |
    self.mark_as_completed(cr, uid, [ref("kit_compo_03")], context=context)
-
  I select the theoretical kit - kit_compo_03, import the items - test on change functions
-
  !python {model: kit.selection.sale}: |
    self.write(cr, uid, context['wizard']['ids'], {'kit_id_kit_selection_sale': ref("kit_compo_03")}, context=context['wizard']['c'])
    self.import_items(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
    # set price_unit and test on_change functions
    for line in self.browse(cr, uid, context['wizard']['id'], context=context['wizard']['c']).product_ids_kit_selection_sale:
      line.write({'price_unit_kit_selection_sale_line': 10}, context=context['wizard']['c'])
      # I add pol_ids which normally comes from <field context=...
      line.on_product_id_change(line.product_id_kit_selection_sale_line.id, line.qty_kit_selection_sale_line, line.uom_id_kit_selection_sale_line.id, line.price_unit_kit_selection_sale_line, context=dict(context['wizard']['c'], sol_ids=context['wizard']['c']['active_ids']))
      line.on_uom_id_change(line.product_id_kit_selection_sale_line.id, line.qty_kit_selection_sale_line, line.uom_id_kit_selection_sale_line.id, line.price_unit_kit_selection_sale_line, context=dict(context['wizard']['c'], sol_ids=context['wizard']['c']['active_ids']))
      line.on_qty_change(line.product_id_kit_selection_sale_line.id, line.qty_kit_selection_sale_line, line.uom_id_kit_selection_sale_line.id, line.price_unit_kit_selection_sale_line, context=dict(context['wizard']['c'], sol_ids=context['wizard']['c']['active_ids']))
-
  I open the replacement wizard to test processing
-
  !python {model: sale.order}: |
    so_id = ref("kit_so_A")
    sol_obj = self.pool.get('sale.order.line')
    for obj in self.browse(cr, uid, [so_id], context=context):
      assert len(obj.order_line) == 1, 'the number of sale order line is wrong - 1 - %s'%len(obj.order_line)
      for line in obj.order_line:
        assert line.so_state_stored == 'draft', 'so state stored is wrong - draft - %s'%line.so_state_stored
        assert line.product_id.id == ref("kit_product_B"), 'the product from the sale order line is wrong - %s - %s'%(ref("kit_product_B"),line.product_id.id)
        res = sol_obj.de_kitting(cr, uid, [line.id], context=context)
        model = res['res_model']
        id = res['res_id']
        c = res['context']
        context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I select kit_product_A
-
  !python {model: kit.selection.sale.line}: |
    values = {'order_line_id_kit_selection_sale_line': ref("kit_sol_A1"),
              'wizard_id_kit_selection_sale_line': context['wizard']['id'],
              'product_id_kit_selection_sale_line': ref("kit_product_A"),
              'qty_kit_selection_sale_line': 1.0,
              'uom_id_kit_selection_sale_line': ref("product.product_uom_unit"),
              'price_unit_kit_selection_sale_line': 1.0,
              }
    self.create(cr, uid, values, context=context['wizard']['c'])
-
  I process the wizard
-
  !python {model: kit.selection.sale}: |
    self.do_de_kitting(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I check the sale order line after replacement - 10 kit_product_A at arrival
-
  !python {model: sale.order}: |
    so_id = ref("kit_so_A")
    sol_obj = self.pool.get('sale.order.line')
    for obj in self.browse(cr, uid, [so_id], context=context):
      assert len(obj.order_line) == 1, 'the number of sale order line is wrong - 1 - %s'%len(obj.order_line)
      for line in obj.order_line:
        assert line.product_id.id == ref("kit_product_A"), 'the product from the purchase order line is wrong - %s - %s'%(ref("kit_product_A"),line.product_id.id)
        assert line.product_uom_qty == 10.0*1.0, 'the number of product is wrong - 10 - %s'%line.product_uom_qty
-
  I validate kit_sol_A1
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("kit_so_A"), 'order_validated', cr)
    wf_service.trg_validate(uid, 'sale.order', ref("kit_so_A"), 'order_confirm', cr)
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid, context=context)
-
  I check the corresponding purchase order has been created and store the corresponding id in the context
-
  !python {model: purchase.order}: |
    so_name = self.pool.get('sale.order').browse(cr, uid, ref("kit_so_A")).name
    ids = self.search(cr, uid, [('origin', '=', so_name)], context=context)
    assert len(ids) == 1, 'the number of created purchase order is wrong - 1 - %s'%len(ids)
    context.setdefault('yml_kit', {}).update(po=ids[0])
-
  I validate the purchase order (2 steps)
-
  !python {model: purchase.order}: |
    import netsvc
    po_id = context['yml_kit']['po']
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  I check the corresponding incoming shipment has been created and store the corresponding id in the context
-
  !python {model: stock.picking}: |
    po_id = context['yml_kit']['po']
    ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    assert len(ids) == 1, 'the number of created incoming shipment is wrong - 1 - %s'%len(ids)
    context.setdefault('yml_kit', {}).update({'in':ids[0]})
-
  I open the process wizard of incoming shipment
-
  !python {model: stock.picking}: |
    in_id = context['yml_kit']['in']
    data = self.action_process(cr, uid, [in_id], context=context)
    context.setdefault('yml_kit', {}).setdefault('wiz', {}).update({'id': data['res_id'], 'model': data['res_model']})
    context['c'] = data['context']
    # check the picking type
    pick = self.browse(cr, uid, in_id, context=context)
    type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    context.update({'type': type})
-
  I complete the batch number in processing wizard and validate the wizard using wizard's context
-
  !python {model: stock.partial.picking}: |
    wiz_id = context['yml_kit']['wiz']['id']
    c = context['c']
    in_id = context['yml_kit']['in']
    type = context['type']
    for mem in getattr(self.browse(cr, uid, wiz_id, context=c), 'product_moves_%s'%type):
      mem.write({'prodlot_id': ref("kit_lot_As")}, context=c)
    self.copy_all(cr,uid,[wiz_id], context=c)
    self.do_incoming_shipment(cr, uid, [wiz_id], context=c)
-
  Check that the incoming shipment is done
-
  !python {model: stock.picking}: |
    in_id = context['yml_kit']['in']
    pick = self.browse(cr, uid, in_id, context=context)
    assert pick.state == 'done', 'incoming shipment the state is wrong, should be done - %s'%pick.state
-
  I click on the create composition list button of the stock move which contains the kit
-
  !python {model: stock.move}: |
    in_id = context['yml_kit']['in']
    ids = self.search(cr, uid, [('picking_id', '=', in_id), ('product_id', '=', ref("kit_product_A"))], context=context)
    self.create_composition_list(cr, uid, ids, context=context)
-
  I create empty composition composition list 04, productA, kit_lot_As, 2010-01-20
-
  !record {model: composition.kit, id: kit_compo_04}:
    composition_type: 'real'
    composition_product_id: kit_product_A
    composition_lot_id: kit_lot_As
    composition_creation_date: '2010-01-20'
    composition_version_id: kit_compo_02
-
  I add a product item to the composition list kit_product_C, lot and date will be filled in in the wizard
-
  !record {model: composition.item, id: item_04_01}:
    item_kit_id: kit_compo_04
    item_product_id: kit_product_C
    item_qty: 20
    item_uom_id: product.product_uom_unit
-
  Mark the composition as completed
-
  !python {model: composition.kit}: |
    self.mark_as_completed(cr, uid, [ref("kit_compo_04")], context=context)
-
  I open the modify expiry date wizard
-
  !python {model: composition.kit}: |
    res = self.modify_expiry_date(cr, uid, [ref("kit_compo_04")], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I compute the date from the items, check it, confirm it
-
  !python {model: modify.expiry.date}: |
    self.compute_date(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context['wizard']['c']):
      assert obj.date == '2012-06-24', 'the present date from kit is wrong - 2012-06-24 - %s'%obj.date
      assert obj.new_date == '9999-01-01', 'the computed date is wrong - 9999-01-01 - %s'%obj.new_date
    self.do_modify_expiry_date(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I check the expiry date of the composition kit has been updated
-
  !python {model: composition.kit}: |
    for obj in self.browse(cr, uid, [ref("kit_compo_04")], context=context):
      assert obj.composition_exp == '9999-01-01', 'the computed date is wrong - 9999-01-01 - %s'%obj.composition_exp
-
  I check the expiry date of the lot has been updated
-
  !python {model: stock.production.lot}: |
    for obj in self.browse(cr, uid, [ref("kit_lot_As")], context=context):
      assert obj.life_date == '9999-01-01', 'the expiry date of production lot has not been updated - 999-01-01 - %s'%obj.life_date
-
  I open the substitute wizard
-
  !python {model: composition.kit}: |
    res = self.substitute_items(cr, uid, [ref("kit_compo_04")], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I update mandatory locations - 
-
  !python {model: substitute}: |
    self.write(cr, uid, context['wizard']['ids'], {'destination_location_id': ref("stock.stock_location_stock")}, context=context)
-
  I complete the lot name for the product C
-
  !python {model: substitute.item.mirror}: |
    item_ids = self.search(cr, uid, [('wizard_id', '=', context['wizard']['id'])], context=context)
    assert len(item_ids) == 1, 'number of items is wrong - 1 - %s'%len(item_ids)
    self.write(cr, uid, item_ids, {'lot_mirror': 'C standard', 'exp_substitute_item': '2012-06-20'}, context=context)
    context['wizard']['item_ids'] = item_ids
-
  I test the on_change functions for substitute.item.mirror
-
  !python {model: substitute.item.mirror}: |
    self.change_lot(cr, uid, context['wizard']['item_ids'], ref("stock.stock_location_stock"), ref("kit_product_C"), 'C standard', ref("product.product_uom_unit"), context=context)
    self.change_expiry(cr, uid, context['wizard']['item_ids'], '2012-06-20', ref("kit_product_C"), 'in', ref("stock.stock_location_stock"), 'C standard', ref("product.product_uom_unit"), context=context)
-
  I select the item to be replaced
-
  !python {model: substitute}: |
    self.write(cr, uid, context['wizard']['ids'], {'composition_item_ids': [(6,0,context['wizard']['item_ids'])]}, context=context)
-
  I select the item for the kit from the stock
-
  !python {model: substitute.item}: |
    values = {'wizard_id': context['wizard']['id'],
              'location_id_substitute_item': ref("stock.stock_location_stock"),
              'module_substitute_item': 'module substitute kit yaml test',
              'product_id_substitute_item': ref("kit_product_C"),
              'qty_substitute_item': 60,
              'uom_id_substitute_item': ref("product.product_uom_unit"),
              'lot_id_substitute_item': ref("kit_lot_Cs"),
              }
    item_id = self.create(cr, uid, values, context=context)
    assert self.browse(cr, uid, item_id, context=context).exp_substitute_item, 'expiried date has not been completed by create function'
-
  I create an inventory to enter this product into the stock
-
  !record {model: stock.inventory, id: inventory_kit_01}:
    name: Kit inventory
    date: !eval time.strftime('%Y-%m-%d')
    inventory_line_id:
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: kit_product_C
        product_qty: 100
        prod_lot_id: kit_lot_Cs
-
  I confirm the inventory
-
  !python {model: stock.inventory}: |
    self.action_confirm(cr, uid, [ref('inventory_kit_01')], context=context)
    self.action_done(cr, uid, [ref('inventory_kit_01')], context=context)
-
  I test the on_change functions for substitute.item - type check is 'out' for standard substitute.item (products come from the stock)
-
  !python {model: substitute.item}: |
    ids = self.search(cr, uid, [('module_substitute_item', '=', 'module substitute kit yaml test')], context=context)
    type_check = 'out'
    self.change_lot(cr, uid, ids, ref("stock.stock_location_stock"), ref("kit_product_C"), ref("kit_lot_Cs"), ref("product.product_uom_unit"), context=context)
    self.change_expiry(cr, uid, ids, '2012-01-05', ref("kit_product_C"), type_check, ref("stock.stock_location_stock"), ref("kit_lot_Cs"), ref("product.product_uom_unit"), context=context)
    self.on_change_location_id(cr, uid, ids, ref("stock.stock_location_stock"), ref("kit_product_C"), ref("kit_lot_Cs"), ref("product.product_uom_unit"), context=context)
    self.on_change_product_id(cr, uid, ids, ref("stock.stock_location_stock"), ref("kit_product_C"), ref("kit_lot_Cs"), ref("product.product_uom_unit"), context=context)
-
  I process the subtitute function which opens the change expiry date wizard
-
  !python {model: substitute}: |
    res = self.do_substitute(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I check that the kit items have been updated
-
  !python {model: composition.kit}: |
    for obj in self.browse(cr, uid, [ref("kit_compo_04")], context=context):
      for item in obj.composition_item_ids:
        assert item.item_exp, 'expiry date is missing for item %s'%item.name
-
  I compute the date from the items, check it, confirm it - the date must now come from the substitute product from stock - 2012-12-24
-
  !python {model: modify.expiry.date}: |
    self.compute_date(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context['wizard']['c']):
      assert obj.new_date == '2012-12-24', 'the computed date is wrong - 2012-12-24 - %s'%obj.new_date
    self.do_modify_expiry_date(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I check the expiry date of the composition kit has been updated
-
  !python {model: composition.kit}: |
    for obj in self.browse(cr, uid, [ref("kit_compo_04")], context=context):
      assert obj.composition_exp == '2012-12-24', 'the computed date is wrong - 2012-12-24 - %s'%obj.composition_exp
-
  I open the de-kitting wizard
-
  !python {model: composition.kit}: |
    res = self.de_kitting(cr, uid, [ref("kit_compo_04")], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I process the de-kitting - we do not need to complete lot or date because it is automaticly completed from the substitute function !
-
  !python {model: substitute}: |
    self.do_de_kitting(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I create empty composition composition list 04, productA, kit_lot_As, 2010-01-20
- 
  !record {model: composition.kit, id: kit_compo_05}:
    composition_type: 'real'
    composition_product_id: kit_product_B
    composition_reference: ref-compo-05
    composition_creation_date: '2010-01-20'
    composition_version_id: kit_compo_03
-
  I add a product item to the composition list kit_compo_05
-
  !record {model: composition.item, id: item_05_01}:
    item_kit_id: kit_compo_05
    item_product_id: kit_product_C
    item_qty: 20
    item_uom_id: product.product_uom_unit
-
  I open the modify expiry date wizard
-
  !python {model: composition.kit}: |
    res = self.modify_expiry_date(cr, uid, [ref("kit_compo_05")], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I compute the date from the items, check it, confirm it
-
  !python {model: modify.expiry.date}: |
    self.compute_date(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context['wizard']['c']):
      assert obj.new_date == '9999-01-01', 'the computed date is wrong - 9999-01-01 - %s'%obj.new_date
    self.do_modify_expiry_date(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I check the expiry date of the composition kit has been updated
-
  !python {model: composition.kit}: |
    for obj in self.browse(cr, uid, [ref("kit_compo_05")], context=context):
      assert obj.composition_exp == '9999-01-01', 'the computed date is wrong - 9999-01-01 - %s'%obj.composition_exp
- 
  I create sale order kit_so_B
- 
  !record {model: sale.order, id: kit_so_B}:
    name: so b
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: kit_partner_A
    partner_invoice_id: kit_address_A
    partner_order_id: kit_address_A
    partner_shipping_id: kit_address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
- 
  I create a corresponding sale order line, with a NON batch management kit in it - prodB
- 
  !record {model: sale.order.line, id: kit_sol_B1}:
    name: sol b1
    company_id: base.main_company
    delay: 7.0
    order_id: kit_so_B
    price_unit: 1.0
    product_id: kit_product_B
    product_uom: product.product_uom_unit
    product_uom_qty: 10
    salesman_id: base.user_admin
    state: draft
    th_weight: 0.0
    type: make_to_order
-
  I validate kit_so_B
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("kit_so_B"), 'order_validated', cr)
    wf_service.trg_validate(uid, 'sale.order', ref("kit_so_B"), 'order_confirm', cr)
-
  I check the out creation
-
  !python {model: stock.picking}: |
    so_name = self.pool.get('sale.order').browse(cr, uid, ref("kit_so_B")).name
    out_ids = self.search(cr, uid, [('origin', '=', so_name)], context=context)
    assert len(out_ids) == 1, 'number of out ids for so b is wrong - 1 - %s'%len(out_ids) 
    context.update(out_ids=out_ids)
-
  I open the create picking wizard
-
  !python {model: stock.picking}: |
    ids = context['out_ids']
    res = self.create_picking(cr, uid, ids, context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
#-
#  problem because msf_outgoing depends on kit, test of kits therefore cannot use msf_outgoing related fields. I fill the composition_list_id field with kit_compo_05
#-
#  !python {model: create.picking}: |
#    # create picking wizard -> product_moves_picking ('stock.move.memory.picking')
#    ids = context['wizard']['ids']
#    c = context['wizard']['c']
#    for obj in self.browse(cr, uid, ids, context=c):
#      for mem in obj.product_moves_picking:
#        mem.write({'composition_list_id': ref("kit_compo_05")}, context=c)
#    # validate the creation
#    self.do_create_picking(cr, uid, ids, context=c)
#    # there should be one picking ticket created
#    picking_ids = self.pool.get('stock.picking').search(cr, uid, [('backorder_id', 'in', context['out_ids'])], context=c)
#    # add the picking ticket id to the context structure
#    context.update({'pick_ids': picking_ids})
#    assert len(picking_ids) == 1, 'picking ticket should have been created - 1 - %s'%(len(picking_ids))
#-
#  I check that the composition_list_id has been filled in the corresponding stock picking
#-
#  !python {model: stock.picking}: |
#    for obj in self.browse(cr, uid, context['pick_ids'], context=context):
#      for move in obj.move_lines:
#        assert move.composition_list_id.id == ref("kit_compo_05"), 'the created picking ticket object does not have composition_list_id filled in - %s - %s'%(ref("kit_compo_05"),move.composition_list_id.id)
-
  I check the qty in the composition list
-
  !python {model: composition.kit}: |
    for obj in self.browse(cr, uid, [ref("kit_compo_05")], context=context):
      for item in obj.composition_item_ids:
        assert item.item_qty == 20, 'the quantity of the composition item is wrong - 20 - %s'%item.item_qty
-
  I open the confirmation wizard
-
  !python {model: composition.kit}: |
    res = self.reset_to_version(cr, uid, [ref("kit_compo_05")], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I confirm the action
-
  !python {model: confirm}: |
    self.do_action(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I check the qty in the composition list which is reset to theoretical value - 10
-
  !python {model: composition.kit}: |
    for obj in self.browse(cr, uid, [ref("kit_compo_05")], context=context):
      for item in obj.composition_item_ids:
        assert item.item_qty == 10, 'the quantity of the composition item is wrong - 10 - %s'%item.item_qty
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid, context=context)
-
  I check the corresponding purchase order has been created and store the corresponding id in the context
-
  !python {model: purchase.order}: |
    so_name = self.pool.get('sale.order').browse(cr, uid, ref("kit_so_B")).name
    ids = self.search(cr, uid, [('origin', '=', so_name)], context=context)
    assert len(ids) == 1, 'the number of created purchase order is wrong - 1 - %s'%len(ids)
    context.setdefault('yml_kit', {}).update(po=ids[0])
-
  I update the price_unit value of po lines with big values to force trigger the double_validation step
  the zero value for the threshold is set after the unit tests
-
  !python {model: purchase.order.line}: |
    pol_ids = self.search(cr, uid, [('order_id', '=', context['yml_kit']['po'])], context=context)
    #if context is None:
    #    context = {}
    #context['update_merge'] = True
    self.write(cr, uid, pol_ids, {'price_unit': 100000}, context=context)
-
  I validate the purchase order (1 step only because the replacement function is only available for Validated State (='confirmed'))
-
  !python {model: purchase.order}: |
    import netsvc
    po_id = context['yml_kit']['po']
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
-
  I open the replacement wizard but before check the state of purchase order line
-
  !python {model: purchase.order}: |
    po_id = context['yml_kit']['po']
    pol_obj = self.pool.get('purchase.order.line')
    for obj in self.browse(cr, uid, [po_id], context=context):
      assert len(obj.order_line) == 1, 'the number of purchase order line is wrong - 1 - %s'%len(obj.order_line)
      for line in obj.order_line:
        assert line.po_state_stored == 'confirmed', 'po state stored is wrong - confirmed - %s'%line.po_state_stored
        assert line.product_id.id == ref("kit_product_B"), 'the product from the purchase order line is wrong - %s - %s'%(ref("kit_product_B"),line.product_id.id)
        res = pol_obj.de_kitting(cr, uid, [line.id], context=context)
        model = res['res_model']
        id = res['res_id']
        c = res['context']
        context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I complete the the theoretical kit - kit_compo_03, so it can be used in the wizard
-
  !python {model: composition.kit}: |
    self.mark_as_completed(cr, uid, [ref("kit_compo_03")], context=context)
-
  I select the theoretical kit - kit_compo_03, import the items and validate the decomposition
-
  !python {model: kit.selection}: |
    self.write(cr, uid, context['wizard']['ids'], {'kit_id': ref("kit_compo_03")}, context=context['wizard']['c'])
    self.import_items(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
    # set price_unit and test on_change functions
    for line in self.browse(cr, uid, context['wizard']['id'], context=context['wizard']['c']).product_ids_kit_selection:
      line.write({'price_unit_kit_selection_line': 10}, context=context['wizard']['c'])
      # I add pol_ids which normally comes from <field context=...
      line.on_product_id_change(line.product_id_kit_selection_line.id, line.qty_kit_selection_line, line.uom_id_kit_selection_line.id, line.price_unit_kit_selection_line, context=dict(context['wizard']['c'], pol_ids=context['wizard']['c']['active_ids']))
      line.on_uom_id_change(line.product_id_kit_selection_line.id, line.qty_kit_selection_line, line.uom_id_kit_selection_line.id, line.price_unit_kit_selection_line, context=dict(context['wizard']['c'], pol_ids=context['wizard']['c']['active_ids']))
    self.do_de_kitting(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I check the purchase order line after replacement - 100 kit_product_C at arrival
-
  !python {model: purchase.order}: |
    po_id = context['yml_kit']['po']
    pol_obj = self.pool.get('purchase.order.line')
    for obj in self.browse(cr, uid, [po_id], context=context):
      assert len(obj.order_line) == 1, 'the number of purchase order line is wrong - 1 - %s'%len(obj.order_line)
      for line in obj.order_line:
        assert line.product_id.id == ref("kit_product_C"), 'the product from the purchase order line is wrong - %s - %s'%(ref("kit_product_C"),line.product_id.id)
        assert line.product_qty == 10*10, 'the number of product is wrong - 100 - %s'%line.product_qty
-
  END OF FILE
-
  !python {model: stock.picking}: |
    #print 'EOF'
    pass
