-
  I create a regular purchase order
-
  !record {model: purchase.order, id: purchase_order_po0}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: picking
    location_id: stock.stock_location_stock
    minimum_planned_date: !eval time.strftime('%Y-%m-%d')
    partner_address_id: res_partner_address_0
    partner_id: res_partner_africom0
    pricelist_id: purchase.list0
    from_yml_test: False
    delivery_confirmed_date: !eval time.strftime('%Y-%m-%d')
    analytic_distribution_id: global_distrib_1
-
  Then I add an order line to this purchase
-
  !record {model: purchase.order.line, id: purchase_order_line_camembert0}:
    company_id: base.main_company
    date_planned: !eval time.strftime('%Y-%m-%d')
    order_id: purchase_order_po0
    partner_id: res_partner_africom0
    price_unit: 100
    product_id: product_product_camembert0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
    analytic_distribution_id: global_distrib_1
-
  We confirm the purchase
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_po0}
-
  We validate the purchase
-
  !workflow {model: purchase.order, action: purchase_approve, ref: purchase_order_po0}
-
  We check that a commitment have been created for this PO 0. Then check commitment <-> PO link.
-
  !python {model: account.commitment}: |
    search_ids = self.search(cr, uid, [('purchase_id', '=', ref("purchase_order_po0"))])
    assert search_ids != False, "No commitment found"
    purchase = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_po0"))
    for id in search_ids:
        assert id in [x.id for x in purchase.commitment_ids], "No link between commitments and PO"
-
  I create a PO with an Intermission partner.
-
  !record {model: purchase.order, id: purchase_order_po1}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: picking
    location_id: stock.stock_location_stock
    minimum_planned_date: !eval time.strftime('%Y-%m-%d')
    partner_address_id: res_partner_address_42
    partner_id: res_partner_mission_42
    pricelist_id: purchase.list0
    from_yml_test: False
    delivery_confirmed_date: !eval time.strftime('%Y-%m-%d')
    analytic_distribution_id: global_distrib_1
-
  Then I add an order line to this purchase
-
  !record {model: purchase.order.line, id: purchase_order_line_book_0}:
    company_id: base.main_company
    date_planned: !eval time.strftime('%Y-%m-%d')
    order_id: purchase_order_po1
    partner_id: res_partner_africom0
    price_unit: 100
    product_id: product_product_book0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
    analytic_distribution_id: global_distrib_1
-
  We confirm the purchase
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_po1}
-
  We validate the purchase
-
  !workflow {model: purchase.order, action: purchase_approve, ref: purchase_order_po1}
-
  We check that NO commitments have been created for this PO 1. Then check commitment <-> PO link.
-
  !python {model: account.commitment}: |
    search_ids = self.search(cr, uid, [('purchase_id', '=', ref("purchase_order_po1"))])
    assert search_ids == [], "Commitment found. This should not!"
    purchase = self.pool.get('purchase.order').browse(cr, uid, ref("purchase_order_po1"))
    commitment_ids = [x.id for x in purchase.commitment_ids]
    assert not commitment_ids, "This PO shouln't have ANY commitment!"
