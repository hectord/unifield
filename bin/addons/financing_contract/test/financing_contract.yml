-
  In order to test the financing contract,
  we need a lot.
  I create, in order, a account type, ...
-
  !record {model: account.account.type, id: account_account_type_expense0}:
    close_method: none
    code: expense
    name: Expense
    sign: 1
-
  ...a destination, ...
-
  !record {model: account.analytic.account, id: test_destination}:
    name: "Test Destination"
    code: "DESTINATION"
    category: DEST
-
  ...an account, ...
-
  !record {model: account.account, id: test_expense}:
    name: "Test Expense"
    code: "TEST"
    user_type: account_account_type_expense0
    type: payable 
    destination_ids:
      - test_destination
-
  ...a destination link, ...
-
  !record {model: account.destination.link, id: test_destination_link}:
    account_id: test_expense
    destination_id: test_destination
-
 ...a cost center...
-
  !record {model: account.analytic.account, id: analytic_account_OC1}:
    name: "OC1"
    code: "OC1"
    category: OC
-
 ...a cost center...
-
  !record {model: account.analytic.account, id: analytic_account_OC2}:
    name: "OC2"
    code: "OC2"
    category: OC
-
 ...a funding pool...
-
  !record {model: account.analytic.account, id: analytic_account_FP1}:
    name: "FP1"
    code: "FP1"
    category: FUNDING
    cost_center_ids:
      - analytic_account_OC2
    tuple_destination_account_ids:
      - test_destination_link
-
 ...a funding pool...
-
  !record {model: account.analytic.account, id: analytic_account_FP2}:
    name: "FP2"
    code: "FP2"
    category: FUNDING
    cost_center_ids:
      - analytic_account_OC1
      - analytic_account_OC2
    tuple_destination_account_ids:
      - test_destination_link
-
  I set the company currency's rate to 1 for the move
-
  !record {model: res.currency.rate, id: currency_rate_test_3}:
    name: !eval "'%s-01-01' %(datetime.now().year+1)"
    rate: 1.00
    currency_id: base.CHF
-
  I set another currency's rate to 100 for the move
-
  !record {model: res.currency.rate, id: currency_rate_test_4}:
    name: !eval "'%s-01-01' %(datetime.now().year+1)"
    rate: 100.00
    currency_id: base.EUR
-
  ...an analytical journal, ...
-
  !record {model: account.analytic.journal, id: analytic_journal_1}:
    code: CANJ
    name: Cash Analytic Journal
    type: general
-
  I create a cash account type
-
  !record {model: account.account.type, id: account_account_type_cash_0}:
    close_method: balance
    code: cash
    name: Cash
    sign: 1
    report_type: asset

-
  I create a X11003 Cash Account.
-
  !record {model: account.account, id: account_account_cash0}:
    code: 'X11003-test'
    company_id: base.main_company
    currency_mode: current
    name: Cash (test)
    type: liquidity
    reconcile: False
    user_type : account_account_type_cash_0
    activation_date: !eval time.strftime('%Y-01-01')
-
  ...a journal, ...
-
  !record {model: account.journal, id: account_journal_1}:
    name: Cash Journal
    code: CTST
    currency: base.EUR
    type: cash
    analytic_journal_id: analytic_journal_1
    default_debit_account_id: account_account_cash0
    default_credit_account_id: account_account_cash0
-
  ...a fiscal year, ...
-
  !record {model: account.fiscalyear, id: account_fiscalyear_fiscalyear0}:
    code: !eval "'FY%s'% (datetime.now().year+1)"
    company_id: base.main_company
    date_start: !eval "'%s-01-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year+1)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year+1)"
-
  ... and a period.
-
  !record {model: account.period, id: account_period_mar0}:
    company_id: base.main_company
    date_start: !eval "'%s-03-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-03-31' %(datetime.now().year+1)"
    fiscalyear_id: account_fiscalyear_fiscalyear0
    name: !eval "'Mar %s' %(datetime.now().year+1)"
    special: 1
    number: 3
    state: draft
-
  ... and a distribution.
-
  !record {model: analytic.distribution, id: distribution_test}:
    funding_pool_lines:
    - analytic_id: analytic_distribution.analytic_account_msf_private_funds
      cost_center_id: analytic_account_OC1
      destination_id: test_destination
      percentage: 50
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
    - analytic_id: analytic_account_FP1
      cost_center_id: analytic_account_OC2
      destination_id: test_destination
      percentage: 50
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
-
  ... and another distribution.
-
  !record {model: analytic.distribution, id: distribution_test_2}:
    funding_pool_lines:
    - analytic_id: analytic_account_FP1
      cost_center_id: analytic_account_OC2
      destination_id: test_destination
      percentage: 40
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
    - analytic_id: analytic_account_FP2
      cost_center_id: analytic_account_OC2
      destination_id: test_destination
      percentage: 40
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
    - analytic_id: analytic_account_FP2
      cost_center_id: analytic_account_OC1
      destination_id: test_destination
      percentage: 20
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
-
  I create an account move line with all of this.
-
  !record {model: account.move.line, id: move_line_test}:
    name: testline
    journal_id: account_journal_1
    period_id: account_period_mar0
    account_id: test_expense
    currency_id: base.CHF
    date: !eval "'%s-03-12' %(datetime.now().year+1)"
    document_date: !eval "'%s-03-12' %(datetime.now().year+1)"
    debit_currency: 4242.0
    analytic_distribution_id: distribution_test
-
  I create an account move line with all of this.
-
  !record {model: account.move.line, id: move_line_test_2}:
    name: testline2
    journal_id: account_journal_1
    period_id: account_period_mar0
    account_id: test_expense
    currency_id: base.CHF
    date: !eval "'%s-03-12' %(datetime.now().year+1)"
    document_date: !eval "'%s-03-12' %(datetime.now().year+1)"
    debit_currency: 12500.0
    analytic_distribution_id: distribution_test_2
-
  Analytic lines are created from it
-
  !python {model: account.move.line}: |
    self.create_analytic_lines(cr, uid, [ref("move_line_test"), ref("move_line_test_2")], context={})
-
  Create a donor (almost empty)
-
  !record {model: financing.contract.donor, id: donor1}:
    name: "Donor"
    code: "TEST"
-
  Create a contract
-
  !record {model: financing.contract.contract, id: contract1}:
    name: "Contract"
    code: "TEST"
    donor_id: donor1
    instance_id: !ref {search: "[]", model: msf.instance}
    grant_amount: 100000.0
    eligibility_from_date: !eval "'%s-01-01' %(datetime.now().year+1)"
    eligibility_to_date: !eval "'%s-12-31' %(datetime.now().year+1)"
    reporting_currency: base.CHF
    funding_pool_ids:
      - funding_pool_id: analytic_account_FP1
        funded: True
      - funding_pool_id: analytic_account_FP2
        funded: False
    cost_center_ids:
      - analytic_account_OC2
    actual_line_ids:
      - name: "A"
        code: "A"
        account_destination_ids:
          - test_destination_link
-
  Assert that total retrieved for funded is 7121 CHF, and project is 12121 CHF
-
  !python {model: financing.contract.contract}: |
    context = {"reporting_currency": ref("base.CHF"),
               "reporting_type": "all",
               "currency_table_id": None}
    contract = self.pool.get('financing.contract.contract').browse(cr, uid, ref("contract1"), context=context)
    #assert len(contract.actual_line_ids) == 1, ("No reporting line!")
    # assert contract.actual_line_ids[0].allocated_real == 2121, ("Allocation is not what is expected! %s" % contract.actual_line_ids[0].allocated_real)
    #assert contract.actual_line_ids[0].allocated_real == 7121, ("Allocation is not what is expected!")
    #assert contract.actual_line_ids[0].project_real == 12121, ("Project is not what is expected!")
-
  Assert that total retrieved for funded is 712100 EUR
-
  !python {model: financing.contract.contract}: |
    context = {"reporting_currency": ref("base.EUR"),
               "reporting_type": "all",
               "currency_table_id": None}
    contract = self.pool.get('financing.contract.contract').browse(cr, uid, ref("contract1"), context=context)
    #assert len(contract.actual_line_ids) == 1, ("No reporting line!")
    # assert contract.actual_line_ids[0].allocated_real == 212100, ("Allocation is not what is expected! %s" % contract.actual_line_ids[0].allocated_real)
    #assert contract.actual_line_ids[0].allocated_real == 712100, ("Allocation is not what is expected!")
    #assert contract.actual_line_ids[0].project_real == 1212100, ("Project is not what is expected!")
-
  Create a currency table
-
  !record {model: res.currency.table, id: test_table}:
    name: "Test"
    code: "TEST"
-
  Import table currency rates
-
  !python {model: import.table.currencies}: |
    import datetime
    import base64
    import_file = '"Currency Code","Rate"\n"EUR","10.0"\n"CHF","1.0"'
    wizard = self.create(cr, uid, {'rate_date':  "%s-03-01" %(datetime.datetime.now().year+1),
                                   'import_file': base64.encodestring(import_file)}, context={})
    self.import_table_rates(cr, uid, [wizard], context={'active_id': ref("test_table")})
-
  Assert that total retrieved for funded with currency table is 71210 EUR
-
  !python {model: financing.contract.contract}: |
    context = {"reporting_currency": ref("base.EUR"),
               "reporting_type": "all",
               "currency_table_id": ref("test_table")}
    contract = self.pool.get('financing.contract.contract').browse(cr, uid, ref("contract1"), context=context)
    #assert len(contract.actual_line_ids) == 1, ("No reporting line!")
    # assert contract.actual_line_ids[0].allocated_real == 21210, ("Allocation is not what is expected! %s" % contract.actual_line_ids[0].allocated_real)
    #assert contract.actual_line_ids[0].allocated_real == 71210, ("Allocation is not what is expected!")
    #assert contract.actual_line_ids[0].project_real == 121210, ("Project is not what is expected!")
