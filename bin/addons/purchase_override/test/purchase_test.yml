-
  In order to test the part of purchase order of the internal_types module
  we will create purchase orders with different types, priority and category
  and follow the workflow to see if the behaviour is good.
-
  We create a new regular purchase order with a internal partner
-
  !record {model: purchase.order, id: regular1}:
    name: Regular1
    partner_id: supplier1
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    partner_address_id: address1
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: regular1_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: regular1
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: regular1_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: regular1
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm the regular1
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: regular1}
-
  We validate the regular1
-
  !workflow {model: purchase.order, action: purchase_approve, ref: regular1}
-
  We check if no invoices has been created by the confirmation of regular1
-
  !python {model: account.invoice}: |
    po_name = self.pool.get('purchase.order').browse(cr, uid, ref('regular1')).name
    invoice_ids = self.search(cr, uid, [('origin', '=', po_name)])
    assert not invoice_ids, ('Invoice created from Regular PO with internal supplier')
-
  We check if generated stock moves have good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('regular1_l1'), ref('regular1_l2')])])
    reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_internal_supply')[1]
    assert move_ids, ('No generated stock moves from Regular PO with internal supplier')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'regular', ('Generated move hasn\'t the good type')
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a new regular purchase order with a external partner
-
  !record {model: purchase.order, id: regular2}:
    name: Regular2
    categ: log
    partner_id: supplier2
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    partner_address_id: address2
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: regular2_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: regular2
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: regular2_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: regular2
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm the regular2
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: regular2}
-
  We validate the regular2
-
  !workflow {model: purchase.order, action: purchase_approve, ref: regular2}
-
  We check if invoice has been created by the confirmation of regular2
-
  !python {model: account.invoice}: |
    po_name = self.pool.get('purchase.order').browse(cr, uid, ref('regular2')).name
    invoice_ids = self.search(cr, uid, [('origin', '=', po_name)])
    assert invoice_ids, ('No invoice created from Regular PO with external supplier')
-
  We check if generated stock moves have good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('regular2_l1'), ref('regular2_l2')])])
    reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_external_supply')[1]
    assert move_ids, ('No generated stock moves from Regular PO with external supplier')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'log', ('Generated move hasn\'t the good category')
      assert move.order_type == 'regular', ('Generated move hasn\'t the good type')
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a new donation before expiry purchase order with a internal partner
-
  !record {model: purchase.order, id: donation3}:
    order_type: donation_exp
    categ: other
    priority: priority
    name: Donation3
    partner_id: supplier1
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: manual
    location_id: stock.stock_location_stock
    partner_address_id: address1
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: donation3_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: donation3
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: donation3_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: donation3
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm the donation3
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: donation3}
-
  We validate the donation3
-
  !workflow {model: purchase.order, action: purchase_approve, ref: donation3}
-
  We check if no invoices has been created by the confirmation of donation3
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'Donation3')])
    assert not invoice_ids, ('Invoice created from Donation before expiry with internal supplier')
-
  We check if all lines of the purchase order are marked as invoiced
-
  !python {model: purchase.order.line}: |
    line_ids = self.search(cr, uid, [('order_id', '=', ref('donation3'))])
    for line in self.browse(cr, uid, line_ids):
        assert line.invoiced, "Purchase order line on donation aren't marked as 'Invoiced'"
-
  We check if generated stock moves have good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('donation3_l1'), ref('donation3_l2')])])
    assert move_ids, ('No generated stock moves from Donation before expiry with internal supplier')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'priority', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'donation_exp', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_donation_expiry')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a standard donation order with a internal partner
-
  !record {model: purchase.order, id: donation4}:
    priority: emergency
    categ: medical
    order_type: donation_st
    name: Donation4
    partner_id: supplier1
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: manual
    location_id: stock.stock_location_stock
    partner_address_id: address1
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: donation4_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: donation4
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: donation4_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: donation4
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate the standard donation
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: donation4}
-
  We validate the donation4
-
  !workflow {model: purchase.order, action: purchase_approve, ref: donation4}
-
  We check if no invoice has been created by the confirmation
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('name', '=', 'Donation4')])
    assert not invoice_ids, ('Invoice created from Standard donation')
-
  We check if stock moves has been generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('donation4_l1'), ref('donation4_l2')])])
    assert move_ids, ('No generated stock moves from standard donation with internal supplier')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'emergency', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'medical', ('Generated move hasn\'t the good category')
      assert move.order_type == 'donation_st', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_donation')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a loan order with a internal partner
-
  !record {model: purchase.order, id: loan5}:
    order_type: loan
    priority: priority
    categ: other
    name: other
    loan_duration: 6
    partner_id: supplier2
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: manual
    location_id: stock.stock_location_stock
    partner_address_id: address1
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: loan5_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: loan5
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: loan5_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: loan5
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate the loan
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: loan5}
-
  We validate the loan5
-
  !workflow {model: purchase.order, action: purchase_approve, ref: loan5}
-
  We check if no invoice has been created by the confirmation
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('name', '=', 'Loan5')])
    assert not invoice_ids, ('Invoice created from Standard donation')
-
  We check if stock moves has been generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('loan5_l1'), ref('loan5_l2')])])
    assert move_ids, ('No generated stock moves from loan')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'priority', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'loan', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_loan')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We check if a sale order for counterpart of the loan has been created
-
  !python {model: sale.order}: |
    from mx.DateTime import *
    two_month = today() + RelativeDateTime(months=+6)
    sale_ids = self.search(cr, uid, [('loan_id', '=', ref('loan5'))])
    assert sale_ids, ('No sale order has been created as counterpart of the loan')
    for sale in self.browse(cr, uid, sale_ids):
      assert sale.delivery_requested_date == two_month.strftime('%Y-%m-%d'), ('Requested date of the generated sale order is not equal to two months')
-
  We force the assignation of product for the delivery order linked with the loan
-
  !python {model: stock.picking}: |
    pick_ids = self.search(cr, uid, [('purchase_id', '=', ref('loan5'))])
    self.draft_force_assign(cr, uid, pick_ids)
-
  We confirm the picking.
-
  !python {model: stock.picking }: |
    import time
    pick_ids = self.search(cr, uid, [('purchase_id', '=', ref('loan5'))])
    assert pick_ids, "No picking found"
    if pick_ids:
      pick=self.browse(cr,uid,pick_ids[0])
      partial_datas = {
            'partner_id': pick.address_id.partner_id.id,
            'address_id': pick.address_id.id,
            'delivery_date' : time.strftime('%Y-%m-%d')
           }
      for move in pick.move_lines:
          partial_datas['move%s'%(move.id)]= {
              'product_id': move.product_id,
              'product_qty': move.product_qty,
              'product_uom': move.product_uom.id,
              }
      self.do_partial(cr, uid, pick_ids,partial_datas)
-
  We confirm the sale order counterpart
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService('workflow')
    sale_ids = self.search(cr, uid, [('origin', '=', 'Loan5')])
    for sale in sale_ids:
      wf_service.trg_validate(uid, 'sale.order', sale, 'order_confirm', cr)
-
  We check if the Loan is now in done state
-
  !assert {model: purchase.order, id: loan5}:
    - state == 'done', ('Loan order is not in done state')
-
  We create a new In-Kind Donation with an external partner (supplier2)
-
  !record {model: purchase.order, id: inkind6}:
    order_type: in_kind
    name: Inkind6
    partner_id: supplier2
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: manual
    location_id: stock.stock_location_stock
    partner_address_id: address1
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: inkind6_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: inkind6
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: inkind6_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: inkind6
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate this In-kind donation
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: inkind6}
-
  We validate the inkind6
-
  !workflow {model: purchase.order, action: purchase_approve, ref: inkind6}
-
  We check if invoice has not been created by the confirmation
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('is_inkind_donation', '=', True)])
    assert not invoice_ids, ('Invoice created too early from In-kind donation')
-
  We check if stock moves has been generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('inkind6_l1'), ref('inkind6_l2')])])
    assert move_ids, ('No generated stock moves from In-kind donation')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'in_kind', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_in_kind_donation')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a purchase list
-
  !record {model: purchase.order, id: list7}:
    order_type: purchase_list
    name: List7
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: picking
    location_id: stock.stock_location_stock
    partner_address_id: localmarket_addr
    partner_id: localmarket
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: list7_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: list7
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: list7_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: list7
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate this Purchase List
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: list7}
-
  We validate the list7
-
  !workflow {model: purchase.order, action: purchase_approve, ref: list7}
-
  We check if the supplier is localmarket
-
  !assert {model: purchase.order, id: list7}:
    - partner_id == ref('localmarket'), ('Local market is not the default supplier for the purchase list type')
-
  We check the specific financial workflow
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'List7')])
    assert not invoice_ids, ("Invoices generated from Purchase List. This should not because of picking invoice method!")
    for invoice in self.browse(cr, uid, invoice_ids):
      assert invoice.purchase_list, ("Purchase list isn't checked in Invoice")
-
  We check if stock moves has been generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('list7_l1'), ref('list7_l2')])])
    assert move_ids, ('No generated stock moves from Purchase List')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'purchase_list', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_external_supply')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a direct po with external partner
-
  !record {model: purchase.order, id: direct8}:
    order_type: direct
    name: Direct8
    partner_id: supplier2
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    partner_address_id: address2
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: direct8_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: direct8
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this purchase order
-
  !record {model: purchase.order.line, id: direct8_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: direct8
    price_unit: 3.0
    product_qty: 25
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate this Direct Purchase Order
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: direct8}
-
  We validate the direct8
-
  !workflow {model: purchase.order, action: purchase_approve, ref: direct8}
-
  We check if invoice has been created by the confirmation
-
  !python {model: account.invoice}: |
    po_name = self.pool.get('purchase.order').browse(cr, uid, ref('direct8')).name
    invoice_ids = self.search(cr, uid, [('origin', '=', po_name)])
    assert invoice_ids, ('No invoice created from Direct Purchase Order')
-
  We check if stock moves has been generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('purchase_line_id', 'in', [ref('direct8_l1'), ref('direct8_l2')])])
    assert not move_ids, ('Generated stock moves from Direct Purchase Order')
-
  We create a new regular purchase order with a inter-section partner
-
  !record {model: purchase.order, id: regular11}:
    name: Regular11
    partner_id: section4
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    partner_address_id: address4
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: regular11_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: regular11
    price_unit: 1.50
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm the regular11
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: regular11}
-
  We validate the regular11
-
  !workflow {model: purchase.order, action: purchase_approve, ref: regular11}
-
  We check if invoices has been created by the confirmation of regular11
-
  !python {model: account.invoice}: |
    po_name = self.pool.get('purchase.order').browse(cr, uid, ref('regular11')).name
    invoice_ids = self.search(cr, uid, [('origin', '=', po_name)])
    assert invoice_ids, ('No invoice created from Regular PO with internal supplier')
-
  Try to create a PO to the main company
-
  !python {model: purchase.order}: |
    import time
    data = {'name': 'Main company',
            'partner_id': ref('base.main_company'),
            'company_id': ref('base.main_company'),
            'date_order': time.strftime('%Y-%m-%d'),
            'invoice_method': 'order',
            'location_id': ref('stock.stock_location_stock'),
            'partner_address_id': ref('base.main_address'),
            'pricelist_id': ref('purchase.list0'),
           }
    try:
      self.create(cr, uid, data, context=context)
      assert False, "The PO creation shouldn't allow a partner = main company"
    except:
      assert True
