-
  Create Tender (T1) in English
- 
  !record {model: tender, id: t1}:
    name: My Tender test
    creator: base.user_root
    requested_date: !eval time.strftime('%Y-%m-%d')
    location_id: stock.stock_location_stock
    categ: medical
    warehouse_id: stock.stock_warehouse_shop0
-
  Open the wizard in English
-
  !python {model: tender}: |
    import base64, logging
    from spreadsheet_xml.spreadsheet_xml import SpreadsheetXML
    # we set the lang to English to test the translation of the template's header columns
    lang = 'en_MF'
    context.update({'yml_test': True, 'lang': lang})
    wizard_values = self.wizard_import_tender_line(cr, uid, ref("t1"), context)
    res_model = wizard_values.get('res_model', False)
    assert res_model == 'wizard.import.tender.line', "Wizard should be wizard.import.tender.line"
    logging.getLogger('tests').log(logging.TEST, 'We check the header of the template (translation)')
    template = self.pool.get(res_model).read(cr, uid, wizard_values['res_id'], ['file'])['file']
    fileobj = SpreadsheetXML(xmlstring=base64.decodestring(template))
    rows = fileobj.getRows()
    column_header = []
    for first_row in rows:
        for cell in range(len(first_row)):
            cell_data = first_row.cells[cell].data
            column_header.append(cell_data)
        break
    expected_header = ['Product Code', 'Product Description', 'Quantity', 'UoM', 'Price', 'Delivery Requested Date']
    assert column_header==expected_header, ("Wrong header, it should be %s and it is %s" % (expected_header, column_header))
    self.pool.get('wizard.import.tender.line').cancel(cr, uid, wizard_values['res_id'], context)
-
  Import tender lines in English
-
  !python {model: wizard.import.tender.line}: |
    import addons, base64, logging
    from spreadsheet_xml.spreadsheet_xml import SpreadsheetXML
    # we set the lang to English and take the file to import accordingly
    lang = 'en_MF'
    file_path = addons.get_module_resource('msf_doc_import','test','import_files_for_testing', 'tender.xml')
    file = open(file_path, 'r')
    file64 = base64.b64encode(file.read())
    vals={'file': file64,
          'filename_template': 'template.xls',
          'filename': 'Lines_Not_Imported.xls',
          'tender_id': ref('t1')}
    wizard_id = self.create(cr, uid, vals, context)
    logging.getLogger('tests').log(logging.TEST, 'We create the wizard import tender.xml.')
    # the yml_test is important to avoid going through the threading method
    context.update({'yml_test': True, 'lang': lang})
    logging.getLogger('tests').log(logging.TEST, 'We import tender.xml.')
    self.import_file(cr, uid, wizard_id, context)
    logging.getLogger('tests').log(logging.TEST, 'We refresh the view.')
    self.dummy(cr, uid, wizard_id, context)
    wiz_read = self.read(cr, uid, wizard_id, ['state', 'percent_completed', 'data'])
    logging.getLogger('tests').log(logging.TEST, 'The import is finished. Completed: %s' % (wiz_read['percent_completed']))
    logging.getLogger('tests').log(logging.TEST, 'Check the file of the lines with error.')
    fileobj = SpreadsheetXML(xmlstring=base64.decodestring(wiz_read['data']))
    rows = fileobj.getRows()
    rows.next()
    count_row = 1
    for row in rows:
        count_row += 1
    assert count_row==2, ("The file should contain 2 lines but the number of lines is %s" % count_row)
-
  Check tender lines imported in English
-
  !python {model: tender}: |
    import logging
    tender = self.browse(cr, uid, ref('t1'), context)
    count_line_imported = len(tender.tender_line_ids)
    assert count_line_imported==14, ("The number of lines imported should be 14 but it is %s" % count_line_imported)
    count_line_with_errors = len([line for line in tender.tender_line_ids if line.to_correct_ok])
    assert count_line_with_errors==13, ("The number of lines with errors should be 13 but it is %s" % count_line_with_errors)
    tender_line_obj = self.pool.get('tender.line')
    ProdA_ids = tender_line_obj.search(cr, uid, [('tender_id', '=', tender.id), ('product_id', '=', 'ProdA')], context=context)
    read_ProdA = tender_line_obj.read(cr, uid, ProdA_ids, ['qty', 'product_uom'], context)[0]
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the product ('ProdA') if it was fulfill.")
    assert read_ProdA['qty'] == 2, ("The quantity was defined in the xml file, it must be this one (2) but is is %s" % read_ProdA['qty'])
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the product ('ProdA') if it was fulfill.")
    uom_unit = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'product', 'product_uom_unit')[1]
    assert read_ProdA['product_uom'][0] == uom_unit, ("The product_uom was defined in the xml file, it must be this one (PCE) but is is %s" % read_ProdA['product_uom'])

    ProdB_ids = tender_line_obj.search(cr, uid, [('tender_id', '=', tender.id), ('product_id', '=', 'ProdB')], context=context)
    read_ProdB = tender_line_obj.read(cr, uid, ProdB_ids, ['qty', 'product_uom'], context)[0]
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the product ('ProdB') if it was empty.")
    assert read_ProdB['qty'] == 1, ("The quantity was defined in the xml file, it must be this one (1) but is is %s" % read_ProdB['qty'])
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the product ('ProdB') if it was empty.")
    uom_unit = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'product', 'product_uom_unit')[1]
    assert read_ProdB['product_uom'][0] == uom_unit, ("The product_uom was defined in the xml file, it must be this one (PCE) but is is %s" % read_ProdB['product_uom'])
