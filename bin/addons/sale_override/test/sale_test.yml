-
  In order to test the part of sale order of the order_types module
  we will create sale orders with different types, priority and category
  and follow the workflow to see if the behaviour is good.
-
  We create a Regular sale order with internal partner
-
  !record {model: sale.order, id: sregular1}:
    name: Regular1
    company_id: base.main_company
    picking_policy: direct
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    order_type: regular
-
  We create line for this regular sale order
-
  !record {model: sale.order.line, id: sregular1_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: sregular1
    price_unit: 1.50
    product_uom_qty: 10
    name: P1
-
  We create a second line for this sale order
-
  !record {model: sale.order.line, id: sregular1_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: sregular1
    price_unit: 3
    product_uom_qty: 30
    name: P2
-
  We confirm this sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: sregular1}
-
  We check if no invoice has been created
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'Regular1')])
    assert not invoice_ids, ('Invoice was generated on a Regular sale order with an internal partner')
-
  We check if stock moves was generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('sale_line_id', 'in', [ref('sregular1_l1'), ref('sregular1_l2')])])
    assert move_ids, ('No stock moves were generated on a Regular sale order with an internal partner')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'regular', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_deliver_partner')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a Regular sale order with external partner
-
  !record {model: sale.order, id: sregular2}:
    name: Regular2
    company_id: base.main_company
    picking_policy: direct
    invoice_quantity: order
    partner_order_id: address2
    partner_invoice_id: address2
    partner_shipping_id: address2
    partner_id: supplier2
    pricelist_id: purchase.list0
    order_type: regular
-
  We create line for this regular sale order
-
  !record {model: sale.order.line, id: sregular2_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: sregular2
    price_unit: 1.50
    product_uom_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this sale order
-
  !record {model: sale.order.line, id: sregular2_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: sregular2
    price_unit: 3
    product_uom_qty: 30
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm this sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: sregular2}
-
  We check if no invoice has been created
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'Regular2')])
    assert not invoice_ids, ('Invoice was generated on a Regular sale order with an external partner')
-
  We check if stock moves was generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('sale_line_id', 'in', [ref('sregular2_l1'), ref('sregular2_l2')])])
    assert move_ids, ('No stock moves were generated on a Regular sale order with an external partner')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'regular', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_deliver_partner')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a Donation before expiry
-
  !record {model: sale.order, id: sdonation3}:
    name: Donation3
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    order_type: donation_exp
-
  We create line for this donation
-
  !record {model: sale.order.line, id: sdonation3_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: sdonation3
    price_unit: 1.50
    product_uom_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this sale order
-
  !record {model: sale.order.line, id: sdonation3_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: sdonation3
    price_unit: 3
    product_uom_qty: 30
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm this sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: sdonation3}
-
  We check if no invoice has been created
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'Donation3')])
    assert not invoice_ids, ('Invoice was generated on a Donation before expiry')
-
  We check if stock moves was generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('sale_line_id', 'in', [ref('sdonation3_l1'), ref('sdonation3_l2')])])
    assert move_ids, ('No stock moves were generated on Donation before expiry')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'donation_exp', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_donation_expiry')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a Standard donation
-
  !record {model: sale.order, id: donation4}:
    name: Donation4
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    order_type: donation_st
-
  We create line for this donation
-
  !record {model: sale.order.line, id: donation4_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: donation4
    price_unit: 1.50
    product_uom_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this donation
-
  !record {model: sale.order.line, id: donation4_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: donation4
    price_unit: 3
    product_uom_qty: 30
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm this sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: donation4}
-
  We check if no invoice has been created
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'Donation4')])
    assert not invoice_ids, ('Invoice was generated on a standard donation')
-
  We check if stock moves was generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('sale_line_id', 'in', [ref('donation4_l1'), ref('donation4_l2')])])
    assert move_ids, ('No stock moves were generated on a standard donation')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'donation_st', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_donation')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We create a Loan
-
  !record {model: sale.order, id: loan5}:
    name: Loan5
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    order_type: loan
    loan_duration: 6
-
  We create line for this loan
-
  !record {model: sale.order.line, id: loan5_l1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: loan5
    price_unit: 1.50
    product_uom_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line for this sale order
-
  !record {model: sale.order.line, id: loan5_l2}:
    product_uom: product.product_uom_unit
    product_id: product2
    order_id: loan5
    price_unit: 3
    product_uom_qty: 30
    name: P2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm this sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: loan5}
-
  We check if no invoice has been created
-
  !python {model: account.invoice}: |
    invoice_ids = self.search(cr, uid, [('origin', '=', 'Loan5')])
    assert not invoice_ids, ('Invoice was generated on a Loan')
-
  We check if stock moves was generated with good data
-
  !python {model: stock.move}: |
    move_ids = self.search(cr, uid, [('sale_line_id', 'in', [ref('loan5_l1'), ref('loan5_l2')])])
    assert move_ids, ('No stock moves were generated on a Loan')
    for move in self.browse(cr, uid, move_ids):
      assert move.order_priority == 'normal', ('Generated move hasn\'t the good priority')
      assert move.order_category == 'other', ('Generated move hasn\'t the good category')
      assert move.order_type == 'loan', ('Generated move hasn\'t the good type')
      reason_id = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'reason_types_moves', 'reason_type_loan')[1]
      assert move.picking_id.reason_type_id.id == reason_id, ('Generated picking hasn\'t the good reason type')
-
  We check if a purchase order for counterpart of the loan has been created
-
  !python {model: purchase.order}: |
    from mx.DateTime import *
    loan_duration = today() + RelativeDateTime(months=+6)
    purchase_ids = self.search(cr, uid, [('loan_id', '=', ref('loan5'))])
    assert purchase_ids, ('No purchase order has been created as counterpart of the loan')
    for purchase in self.browse(cr, uid, purchase_ids):
      assert purchase.delivery_requested_date == loan_duration.strftime('%Y-%m-%d'), ('Requested date of the generated purchase order is not equal to two months')
-
  We force the assignation of product for the delivery order linked with the loan
-
  !python {model: stock.picking}: |
    pick_ids = self.search(cr, uid, [('sale_id', '=', ref('loan5'))])
    self.draft_force_assign(cr, uid, pick_ids)
-
  We confirm the picking.
-
  !python {model: stock.picking }: |
    import time
    pick_ids = self.search(cr, uid, [('sale_id', '=', ref('loan5'))])
    pick=self.browse(cr,uid,pick_ids[0])
    partial_datas = {
          'partner_id': pick.address_id.partner_id.id,
          'address_id': pick.address_id.id,
          'delivery_date' : time.strftime('%Y-%m-%d')
         }
    for move in pick.move_lines:
        partial_datas['move%s'%(move.id)]= {
            'product_id': move.product_id,
            'product_qty': move.product_qty,
            'product_uom': move.product_uom.id,
            }
    self.do_partial(cr, uid, pick_ids,partial_datas)
-
  We confirm the purchase order counterpart
-
  !python {model: purchase.order}: |
    import netsvc
    wf_service = netsvc.LocalService('workflow')
    purchase_ids = self.search(cr, uid, [('origin', '=', 'Loan5')])
    for purchase in purchase_ids:
      wf_service.trg_validate(uid, 'purchase.order', purchase, 'order_confirm', cr)
-
  We check if the Loan is now in done state
-
  !assert {model: sale.order, id: loan5}:
    - state == 'done', ('Loan order is not in done state')
-
  Try to create a SO to the main company
-
  !python {model: sale.order}: |
    import time
    data = {'name': 'Main company',
            'partner_id': ref('base.main_company'),
            'company_id': ref('base.main_company'),
            'picking_policy': 'direct',
            'order_policy': 'manual',
            'invoice_quantity': 'order',
            'order_type': 'regular', 
            'date_order': time.strftime('%Y-%m-%d'),
            'invoice_method': 'order',
            'location_id': ref('stock.stock_location_stock'),
            'partner_order_id': ref('base.main_address'),
            'partner_invoice_id': ref('base.main_address'),
            'partner_shipping_id': ref('base.main_address'),
            'pricelist_id': ref('purchase.list0'),
           }
    try:
      self.create(cr, uid, data, context=context)
      assert False, "The SO creation shouldn't allow a partner = main company"
    except:
      assert True
