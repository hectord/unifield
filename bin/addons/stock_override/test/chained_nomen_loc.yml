-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest0}:
    name: nomenclature test 0
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest01}:
    level: 1
    name: nomenclature test 2
    parent_id: product_nomenclature_nomenclaturetest0
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest02}:
    level: 2
    name: nomenclature test 3
    parent_id: product_nomenclature_nomenclaturetest01
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest03}:
    level: 3
    name: nomenclature test 4
    parent_id: product_nomenclature_nomenclaturetest02
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest1}:
    name: nomenclature test 10
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest11}:
    level: 1
    name: nomenclature test 11
    parent_id: product_nomenclature_nomenclaturetest1
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest12}:
    level: 2
    name: nomenclature test 12
    parent_id: product_nomenclature_nomenclaturetest11
-
  Creating a product.nomenclature record
-
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest13}:
    level: 3
    name: nomenclature test 13
    parent_id: product_nomenclature_nomenclaturetest12
-
  I create a product category
-
  !record {model: product.category, id: prod_cat2}:
    name: Categ1
    family_id: product_nomenclature_nomenclaturetest12
-
  I create a product category
-
  !record {model: product.category, id: prod_cat1}:
    name: Categ1
    family_id: product_nomenclature_nomenclaturetest02
-
  I create the product P1
-
  !record {model: product.product, id: product1}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0 
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1' 
    standard_price: 75000.00
    supply_method: buy 
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    nomen_manda_0: product_nomenclature_nomenclaturetest0
    nomen_manda_1: product_nomenclature_nomenclaturetest01
    nomen_manda_2: product_nomenclature_nomenclaturetest02
    nomen_manda_3: product_nomenclature_nomenclaturetest03
    international_status: product_attributes.int_1
-
  I create the product P2
-
  !record {model: product.product, id: product2}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0 
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1' 
    standard_price: 75000.00
    supply_method: buy 
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    nomen_manda_0: product_nomenclature_nomenclaturetest1
    nomen_manda_1: product_nomenclature_nomenclaturetest11
    nomen_manda_2: product_nomenclature_nomenclaturetest12
    nomen_manda_3: product_nomenclature_nomenclaturetest13
    international_status: product_attributes.int_1
-
  I create a stock location with chained options
-
  !record {model: stock.location, id: stock_location_input}:
    name: Input
    usage: internal
-
  I create a stock location with chained options
-
  !record {model: stock.location, id: chained_loc}:
    name: Chained loc
    usage: internal
    chained_location_type: nomenclature
    chained_auto_packing: transparent
    chained_picking_type: internal
    chained_options_ids:
      - dest_location_id: stock_location_input
        nomen_id: product_nomenclature_nomenclaturetest1
-
  I create a stock.picking for the 2 products
-
  !record {model: stock.picking, id: chained_pick}:
    name: test_picking
    company_id: base.main_company
    date: !eval time.strftime('%Y-%m-%d')
    invoice_state: none
-
  I create the first stock move
-
  !record {model: stock.move, id: chained_move1}:
    company_id: base.main_company
    date: !eval time.strftime('%Y-%m-%d')
    location_id: stock.stock_location_stock
    location_dest_id: chained_loc
    name: P1
    product_id: product1
    product_qty: 10.0
    product_uom: product.product_uom_unit
    date: !eval time.strftime('%Y-%m-%d')
    picking_id: chained_pick
-
  I create the second stock move
-
  !record {model: stock.move, id: chained_move2}:
    company_id: base.main_company
    date: !eval time.strftime('%Y-%m-%d')
    location_id: stock.stock_location_stock
    location_dest_id: chained_loc
    name: P2
    product_id: product2
    product_qty: 10.0
    product_uom: product.product_uom_unit
    date: !eval time.strftime('%Y-%m-%d')
    picking_id: chained_pick
-
  I confirm the Picking
-
  !python {model: stock.picking}: |
    self.action_confirm(cr, uid, [ref('chained_pick')])
-
  Check if the chained location worked or not
-
  !assert {model: stock.move, id: chained_move1}:
    - location_dest_id.id == ref('chained_loc'), "Bad location for non chained nomenclature"
-
  Check if the chained location worked or not
-
  !assert {model: stock.move, id: chained_move2}:
    - location_dest_id.id == ref('stock_location_input'), "Bad location for chained nomenclature"
