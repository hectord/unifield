- 
  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_testsupplier0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: test supplier
    partner_type: external
    supplier: true
    
    
- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_0}:
    partner_id: res_partner_testsupplier0
    street: test street
    
    
- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_test0}:
    name: test
    
    
- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_test1}:
    level: 1
    name: test1
    parent_id: product_nomenclature_test0
    
    
- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_test2}:
    level: 2
    name: test2
    parent_id: product_nomenclature_test1
    
    
- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_test3}:
    level: 3
    name: test3
    parent_id: product_nomenclature_test2
    
    
-
  Creating a product.category record
-
  !record {model: product.category, id: product_category_test1}:
    name: Test 1
    family_id: product_nomenclature_test2
-
  Creating a product.product record
- 
  !record {model: product.product, id: product_product_testproduct0}:
    alert_time: 0.0
    categ_id: product.cat0
    cost_method: standard
    default_code: test3
    life_time: 0.0
    mes_type: fixed
    name: test product
    name_template: test product
    nomen_manda_0: product_nomenclature_test0
    nomen_manda_1: product_nomenclature_test1
    nomen_manda_2: product_nomenclature_test2
    nomen_manda_3: product_nomenclature_test3
    procure_method: make_to_stock
    removal_time: 0.0
    seller_delay: '1'
    seller_qty: 0.0
    standard_price: 1.0
    subtype: single
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    use_time: 0.0
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    perishable: True
    international_status: product_attributes.int_1
    
- 
  Creating a ir.sequence record
- 
  !record {model: ir.sequence, id: ir_sequence_purchaseorder0}:
    code: purchase.order
    name: Purchase Order
    number_increment: 1
    number_next: 2
    padding: 0.0
    
    
- 
  Creating a ir.sequence.type record
- 
  !record {model: ir.sequence.type, id: ir_sequence_type_purchaseorder0}:
    code: purchase.order
    name: Purchase Order
    
- 
  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po0}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    categ: other
    company_id: base.main_company
    date_order: !eval "'%s-08-29'%(time.strftime('%Y'),)"
    delivery_requested_date: !eval "'%s-08-31'%(time.strftime('%Y'),)"
    est_transport_lead_time: 0.0
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: !eval "'%s-08-29'%(time.strftime('%Y'),)"
    name: PO test
    order_type: regular
    partner_address_id: res_partner_address_0
    partner_id: res_partner_testsupplier0
    pricelist_id: purchase.list0
    sequence_id: ir_sequence_purchaseorder0
    
    
- 
  Creating a purchase.order.line record
- 
  !record {model: purchase.order.line, id: purchase_order_line_testproduct0}:
    company_id: base.main_company
    date_planned: !eval "'%s-08-29'%(time.strftime('%Y'),)"
    default_code: test3
    default_name: test product
    internal_code: test
    internal_name: test product
    line_number: 1
    name: test product
    order_id: purchase_order_po0
    partner_id: res_partner_testsupplier0
    price_unit: 1.0
    product_id: product_product_testproduct0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
    
-
  Check po Creation
-
  !python {model: purchase.order}: |
    # test po creation
    #print self.search(cr, uid, [('name', '=', 'PO test')])
    
-
  We confirm the purchase_order_po0
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_po0}
    
    
-
  We confirm the purchase_order_po0 (double validation)
-
  !workflow {model: purchase.order, action: purchase_approve, ref: purchase_order_po0}
  
  
-
  Check incoming Creation
-
  !python {model: stock.picking}: |
    import time
    # test IN creation
    pick_ids = self.search(cr, uid, [('purchase_id', '=', ref("purchase_order_po0"))], context=context)
    assert len(pick_ids) == 1, 'wrong number of IN stock picking'
    context.update(active_ids=pick_ids)
    # process incoming shipment with a new expiry date
    # create wizard objects
    wizard_obj = self.pool.get('stock.partial.picking')
    wizard_id = self.action_process(cr, uid, pick_ids, context=context)['res_id']
    # enter the new expiry date value - memory_out because product cost method is standard price
    the_date = time.strftime('%Y-%m-%d')
    the_date = '2022-01-01'
    for memory_out in wizard_obj.browse(cr, uid, wizard_id, context=context).product_moves_out:
      # test
      memory_out.write({'expiry_date': the_date}, context=context)

    # validate the processing
    c = context.copy()
    c.update({'wizard_ids': [wizard_id], 'wizard_id': wizard_id, 'wizard_name': 'name','model': 'stock.partial.picking','step': 'step'})
    wizard_obj.copy_all(cr,uid,[wizard_id], context=c)
    wizard_obj.do_partial(cr, uid, [wizard_id], context=context)
    # check a new production lot has been created with corresponding expiry date
    prodlot_obj = self.pool.get('stock.production.lot')
    assert len(prodlot_obj.search(cr, uid, [('life_date', '=', the_date), ('type', '=', 'internal')], context=context)), 'prodlots wrong'
-

  We create a inventory control
  
-

  !record {model: stock.inventory, id: stock_inventory0}:
    name: test01

-
  Create a reason type
-

  !record {model: stock.reason.type, id: stock_reasontype0}:
    name: testreasontype01
    code: 123456789
    
-
  Create a line
-

  !record {model: stock.inventory.line, id: stock_inventory_line0}:
    location_id: stock.stock_location_stock
    product_id: product_product_testproduct0
    reason_type_id: stock_reasontype0
    product_uom: product.product_uom_unit
    expiry_date: 2011-10-04
    inventory_id: stock_inventory0
    product_qty: 35.0
    hidden_perishable_mandatory: True

-
  Confirm and validate the inventory - check the new production lot
-

  !python {model: stock.inventory}: |
    self.action_confirm(cr, uid, [ref("stock_inventory0")])
    self.action_done(cr, uid, [ref("stock_inventory0")])
    
    # check the new production lot
    prodlot_obj = self.pool.get('stock.production.lot')
    ids = prodlot_obj.search(cr, uid, [('product_id', '=', ref("product_product_testproduct0")), ('life_date', '=', '2011-10-04'),])
    assert len(ids) == 1, 'the number of production lot is wrong - 1 - %s'%len(ids)
     
-
  test new onchange functions
  
  product - product_product_testproduct0
  location_id - stock.stock_location_stock
  
-

  !python {model: stock.inventory.line}: |
    # change_lot
    self.change_lot(cr, uid, [ref("stock_inventory_line0")], ref("stock.stock_location_stock"), ref("product_product_testproduct0"), prod_lot_id=False, uom=False, to_date=False,)
    # on_change_location_id
    self.on_change_location_id(cr, uid, [ref("stock_inventory_line0")], ref("stock.stock_location_stock"), ref("product_product_testproduct0"), prod_lot_id=False, uom=False, to_date=False,)
    # on_change_product_id_specific_rules
    self.on_change_product_id_specific_rules(cr, uid, [ref("stock_inventory_line0")], ref("stock.stock_location_stock"), ref("product_product_testproduct0"), prod_lot_id=False, uom=False, to_date=False,)
    
-
  Try to create a Min/Max stock rules with an UoM which
  has a different category than the standard product UoM
-
  !python {model: stock.warehouse.orderpoint}: |
    try:
      self.create(cr, uid, {'product_id': ref("product_product_testproduct0"),
                            'location_id': ref("stock.stock_location_stock"),
                            'warehouse_id': ref("stock.warehouse0"),
                            'product_min_qty': 1.00,
                            'product_max_qty': 1.00,
                            'qty_multiple': 1.00,
                            'product_uom': ref("product.product_uom_kgm")})
      assert False, "No error raised when the Min/Max rule has a non-compatible UoM"
    except:
      assert True
