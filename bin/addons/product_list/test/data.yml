-
  In order to test the product_list module, iÂ will create different objects
-
    I create the product P1
    In order to test the procurement list module, I start by creating a new product category
-
  !record {model: product.category, id: product_cat1}:
    name: Categ1
-
    I create new product 'P1'
-
  !record {model: product.product, id: product1}:
    categ_id: product_cat1
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
    I create a second product, P2
-
  !record {model: product.product, id: product2}:
    categ_id: product_cat1
    cost_method: standard
    mes_type: fixed
    name: P2
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
    I create the product P3
-
  !record {model: product.product, id: product3}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P3
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
    I create the product P4
-
  !record {model: product.product, id: product4}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P4
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
    I create the product P5
-
  !record {model: product.product, id: product5}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P5
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
  I create a product list
-
  !record {model: product.list, id: list1}:
    name: List 1
    ref: L1
    type: list
    description: List 1 of products
    standard_list_ok: True
    product_ids:
      - name: product1
        comment: Test comment product 1
      - name: product2
-
  I create a sublist
-
  !record {model: product.list, id: sublist1}:
    name: SubList 1
    ref: SL1
    type: sublist
    description: SUbList 1 of products
    product_ids:
      - name: product3
        comment: Test comment product 3
      - name: product4
-
  I create a new sublist
-
  !record {model: product.list, id: sublist2}:
    name: SubList 2
    ref: SL1
    type: sublist
    description: SUbList 2 of products
    product_ids:
      - name: product3
        comment: Test comment product 3
-
  I test the modification of a list
-
  !python {model: product.list}: |
    list = self.browse(cr, uid, ref('list1'))
    assert not list.last_update_date, "The last update date is fill while the list wasn't modified"
    self.write(cr, uid, ref('list1'), {'order_list_print_ok': True})
    list = self.browse(cr, uid, ref('list1'))
    assert list.last_update_date, "The last update date isn't fill while the list was modified"
-
  I test the duplication of a list
-
  !python {model: product.list}: |
    new_list_id = self.copy(cr, uid, ref('list1'), {})
    list = self.browse(cr, uid, new_list_id)
    assert not list.last_update_date, "An update date was applied on the copy of the list"
-
  I test the deletion of a list and the deletion of all lines of this list
-
  !python {model: product.list}: |
    self.unlink(cr, uid, ref('sublist2'))
    line_ids = self.pool.get('product.list.line').search(cr, uid, [('name', '=', ref('product3')), ('list_id', '=', ref('sublist2'))])
    line2_ids = self.pool.get('product.list.line').search(cr, uid, [('name', '=', ref('product3')), ('list_id', '=', False)])
    assert not line_ids and not line2_ids, "All lines of the deleted list aren't deleted"
