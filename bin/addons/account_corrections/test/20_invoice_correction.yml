-
  I create an invoice
-
  !record {model: account.invoice, id: invoice_account_correction_1}:
    account_id: account.a_pay
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    check_total: 250.0
    company_id: base.main_company
    currency_id: base.EUR
    journal_id: account.expenses_journal
    partner_id: base.res_partner_desertic_hispafuentes
    reference_type: none
    type: in_invoice
    analytic_distribution_id: distrib_1
    date_invoice: !eval datetime.today().strftime('%Y-%m-%d')
-
  Then I add an invoice line in order it takes analytic distribution from invoice
-
  !python {model: account.invoice.line}: |
    vals = {
        'account_id': ref('account_6101'),
        'name': 'Product PC1',
        'price_unit': 50.0,
        'product_id': ref('product11'),
        'quantity': 5.0,
        'uos_id': ref('product.product_uom_unit'),
        'invoice_id': ref('account_corrections.invoice_account_correction_1'),
    }
    self.create(cr, uid, vals)
-
  I validate the invoice
-
  !workflow {model: account.invoice, ref: invoice_account_correction_1, action: invoice_open}
-
  In order to test Account Correction Wizard, I search a move line and launch the wizard on it
-
  !python {model: account.move.line}: |
    for el in self.search(cr, uid, [('invoice', '=', ref('invoice_account_correction_1'))]):
        test = self._is_corrigible(cr, uid, [el], False, False)
        if test and test.get(el) and test.get(el) == True:
            res = self.button_do_accounting_corrections(cr, uid, [el])
            assert res.get('res_model', False) == 'wizard.journal.items.corrections', "Wizard should be wizard.journal.items.corrections"
-
  I use the wizard to correct account
-
  !python {model: wizard.journal.items.corrections}: |
    # Search move lines that come from the open invoice done previously
    search_ids = self.pool.get('account.move.line').search(cr, uid, [('invoice', '=', ref('invoice_account_correction_1'))])
    operator = 'in'
    if len(search_ids) == 1:
        operator = '='
    # Search wizard that have been open for these lines
    wiz_ids = self.search(cr, uid, [('move_line_id', operator, search_ids)])
    # Browse lines and change account_id
    for wiz in self.browse(cr, uid, wiz_ids):
        # Update wizard date
        date = self.onchange_date(cr, uid, wiz.id, wiz.move_line_id.date)
        for line in wiz.to_be_corrected_ids:
            self.pool.get('wizard.journal.items.corrections.lines').write(cr, uid, [line.id], {'account_id': ref('account_6102')})
        # Click on correct button to validate changes
        self.action_confirm(cr,  uid, [wiz.id])
-
  I check that we have a move in correction journal with 2 move line that have an amount_currency equal to our invoice (because it have one line)
-
  !python {model: account.move}: |
    search_ids = self.search(cr, uid, [('journal_id.type', '=', 'correction')])
    for move in self.browse(cr, uid, search_ids):
        assert len(move.line_id) == 2, "The move should have 2 lines."
        for line in move.line_id:
            assert abs(line.amount_currency) == 250, "Absolute amount_currency should be 250."
