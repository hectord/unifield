-
  Create a Sale Order
-
  !record {model: sale.order, id: so_001_claim}:
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: claim_partner_A
    partner_invoice_id: claim_address_A
    partner_order_id: claim_address_A
    partner_shipping_id: claim_address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
-
  Create a Sale Order Line
-
  !record {model: sale.order.line, id: sol_001-1_claim}:
    product_uom: product.product_uom_unit
    product_id: claim_product_A
    order_id: so_001_claim
    price_unit: 1
    product_uom_qty: 10
    date_planned: '2011-04-13'
    type: make_to_order
-
  !record {model: sale.order.line, id: sol_001-2_claim}:
    product_uom: product.product_uom_unit
    product_id: claim_product_B
    order_id: so_001_claim
    price_unit: 1
    product_uom_qty: 5
    date_planned: '2011-04-13'
    type: make_to_order
-
  I validate the sale order
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("so_001_claim"), 'order_confirm', cr)
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_001-1_claim")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    # save proc id into context
    context.update({'proc_id_claim': proc_id})
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # save po id into context
    context.update({'po_id_claim': po_id})
    # change Invoicing control to From Picking
    self.write(cr, uid, [po_id], {'invoice_method':'picking'}, context=context)
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Process the incoming shipment
-
  !python {model: stock.picking}: |
    context.update({'yml_test': True})
    po_id = context['po_id_claim']
    # find the IN
    in_ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    # save in id in context
    context.update({'in_id_claim': in_ids[0]})
    pick = self.browse(cr, uid, in_ids[0], context=context)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    # process wizard
    dic = self.action_process(cr, uid, in_ids, context=context)
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    wiz_obj = self.pool.get(wiz_model)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    # complete production lots
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      for mem_move in getattr(obj, 'product_moves_%s'%picking_type): # -> because is now IN with average product cost method !!!
        if mem_move.product_id.id == ref('claim_product_A'):
          mem_move.write({'prodlot_id': ref('claim_lot_As')}, context=context)
    wiz_obj.do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
    data = self.read(cr, uid, in_ids, ['state'], context=context)[0]
    assert data['state'] == 'done', 'the incoming shipment is not Done - done - %s'%data['state']
    # assert no backorder has been created
    back_ids = self.search(cr, uid, [('backorder_id', 'in', in_ids)], context=context)
    assert not back_ids, 'backorder exists, and should not because split was performed with an equal overall quantity'
    # check the moves in IN
    a_qty = [10.0]
    b_qty = [5.0]
    for obj in self.browse(cr, uid, in_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("claim_product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("claim_product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    # check the moves in OUT
    a_qty = [10.0]
    b_qty = [5.0]
    out_ids = self.search(cr, uid, [('sale_id', '=', ref("so_001_claim"))], context=context)
    # only one OUT for the sale order
    assert len(out_ids) == 1, 'number of out objects is wrong - 1 - %s'%len(out_ids)
    for obj in self.browse(cr, uid, out_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("claim_product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("claim_product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    