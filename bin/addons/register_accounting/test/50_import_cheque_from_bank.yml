-
  I create 2 expenses in the US cheque register with a posting date set to 2nd of current month
-
  !record {model: account.bank.statement, id: cheque_register_0}:
    line_ids:
      - account_id: account_account_expense0
        amount: 246.0
        date: !eval time.strftime('%Y-%m-02')
        document_date: !eval time.strftime('%Y-%m-02')
        name: cheque1
        cheque_number: '00001'
        partner_id: res_partner_john_doe
        sequence: 0.0
        type: general
        statement_id: cheque_register_0
      - account_id: account_account_expense0
        amount: 23.0
        date: !eval time.strftime('%Y-%m-02')
        document_date: !eval time.strftime('%Y-%m-02')
        name: cheque2
        cheque_number: '00002'
        partner_id: res_partner_supplier_0
        sequence: 0.0
        type: general
        statement_id: cheque_register_0
-
  I click on these lines to hard post them
-
  !python {model: account.bank.statement.line}: |
      absl_obj = self.pool.get('account.bank.statement.line')
      absl_ids = absl_obj.search(cr, uid, [('statement_id', '=', ref("cheque_register_0"))])
      for id in absl_ids:
          absl_obj.button_hard_posting(cr, uid, [id], context={'from_yml': True})
-
  I click on the Import Cheque button in a US Bank Register to test if the wizard is launched and contains all values
-
  !python {model: account.bank.statement}: |
      wizard = self.button_wiz_import_cheques(cr, uid, [ref("bank_register_0")], {"lang": "en_US", "tz": False, \
        "active_model": "account.bank.statement", "active_ids": [ref("bank_register_0")], \
        "active_id": ref("bank_register_0"), })
      assert wizard.get('res_model') == 'wizard.import.cheque', "This is not the right wizard!"
      assert wizard.get('context') != False, "Context is missing!"
      wizard_context = wizard.get('context')
      assert wizard_context.get('active_id') == ref("bank_register_0"), "Come from bad register line!"
-
  I create a wizard to test Import Cheque
-
  !record {model: wizard.import.cheque, id: wiz_import_cheque_0}:
    statement_id: bank_register_0
    currency_id: base.USD
    period_id: current_period
-
  I add the two lines of the cheque register into the wizard
-
  !python {model: wizard.import.cheque}: |
      wizard = self.browse(cr, uid, ref("wiz_import_cheque_0"))
      assert wizard.statement_id.id == ref("bank_register_0"), "Bad register!"
      assert wizard.currency_id.id == ref("base.USD"), "Bad currency!"
      assert wizard.period_id.id == ref("current_period"), "Bad period!"
      assert wizard.state == 'draft', "The current wizard should be in draft state!"
      
      st_line_ids = self.pool.get('account.bank.statement.line').search(cr, uid, [('statement_id', '=', ref("cheque_register_0"))])
      st_lines = self.pool.get('account.bank.statement.line').browse(cr, uid, st_line_ids)
      line_ids = [x.first_move_line_id.id for x in st_lines]
      import time
      self.write(cr, uid, [ref("wiz_import_cheque_0")], {'line_ids': [(6, 0, line_ids)], 'document_date': time.strftime('%Y-%m-02'),})
      self.action_import(cr, uid, [ref("wiz_import_cheque_0")])
      
      wizard = self.browse(cr, uid, [ref("wiz_import_cheque_0")])[0]
      assert len(wizard.line_ids) == 0, "Lines not cleaned!"
      assert len(wizard.imported_lines_ids) == len(line_ids), "All lines not imported correctly!"
      
      self.action_confirm(cr, uid, [ref("wiz_import_cheque_0")])
-
  Verify that two lines have been written in the bank register
-
  !python {model: account.bank.statement.line}: |
      line_ids = self.search(cr, uid, [('statement_id', '=', ref("bank_register_0"))])
      assert len(line_ids) == 2, "The bank register don't have 2 lines. Verify that we don't have import two cheques with the same partner!"
-
  In order to verify the line update, we Change date of a line and verify that the matching account move line have the new date
-
  !python {model: account.bank.statement.line}: |
      import time
      st_line_ids = self.search(cr, uid, [('statement_id', '=', ref("bank_register_0"))])
      for st_line_id in st_line_ids:
          st_line = self.browse(cr, uid, [st_line_id])
          move_id = st_line[0].move_ids[0].id
          aml_obj = self.pool.get('account.move.line')
          line_ids = aml_obj.search(cr, uid, [('move_id', '=', move_id)])
          old_date = st_line[0].first_move_line_id.date
          new_date = time.strftime('%Y-%m-23')
          self.write(cr, uid, [st_line_id], {'date': new_date})
          for move_line_id in line_ids:
              assert new_date == aml_obj.browse(cr, uid, move_line_id).date, "New date have not been correctly (%s :: %s)" % (new_date, aml_obj.browse(cr, uid, move_line_id).date)
-
  In order to verify hard posting, we hard post all register lines
-
  !python {model: account.bank.statement.line}: |
      st_line_ids = self.search(cr, uid, [('statement_id', '=', ref("bank_register_0"))])
      # IF THIS HARD POST TEST FAILED with an error on analytic distribution, 
      # have a look to res_currency_functional module in account_move_line_compute_currency.py file. Perhaps something is missing :-)
      self.posting(cr, uid, st_line_ids, 'hard')
      for st_line in self.browse(cr, uid, st_line_ids):
          assert st_line.state == 'hard', "Line '%s' is not hard posted !" % (st_line_id)
