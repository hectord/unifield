-
  In order to test that the register creation of a cashbox works, I create a fiscalyear, some periods, open them and create some cashbox
-
  I create a fiscalyear
-
  !record {model: account.fiscalyear, id: fiscalyear2}:
    code: !eval "'FY%s'% (datetime.now().year+6)"
    company_id: base.main_company
    date_start: !eval "'%s-01-01' %(datetime.now().year+6)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year+6)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year+6)"
-
  I create the first period
-
  !record {model: account.period, id: cashbox_creation_period_01}:
    company_id: base.main_company
    date_start: !eval "'%s-01-02' %(datetime.now().year+6)"
    date_stop: !eval "'%s-01-31' %(datetime.now().year+6)"
    fiscalyear_id: fiscalyear2
    name: PER-01
    special: 1
-
  I create the second period
-
  !record {model: account.period, id: cashbox_creation_period_02}:
    company_id: base.main_company
    date_start: !eval "'%s-02-01' %(datetime.now().year+6)"
    date_stop: !eval "'%s-02-27' %(datetime.now().year+6)"
    fiscalyear_id: fiscalyear2
    name: PER-02
    special: 1
-
  I create a cashbox in USD
-
  !record {model: account.bank.statement, id: cashbox_bug_01}:
    date: !eval "'%s-01-02' %(datetime.now().year+6)"
    journal_id: account_journal_cash_usd
    name: Cashbox in USD
    period_id: cashbox_creation_period_01
    user_id: base.user_root
    starting_details_ids:
      -  pieces: 2.0
         number: 3
         subtotal: 6.0
      -  pieces: 10.0
         number: 5
         subtotal: 50.0
      -  pieces: 50.0
         number: 8
         subtotal: 400.0
    ending_details_ids:
      -  pieces: 2.0
         number: 3
         subtotal: 6.0
      -  pieces: 10.0
         number: 5
         subtotal: 50.0
      -  pieces: 50.0
         number: 8
         subtotal: 400.0
    balance_start: 456.0
    balance_end: 456.0
-
  I create a cashbox in CHF
-
  !record {model: account.bank.statement, id: cashbox_bug_02}:
    date: !eval "'%s-01-02' %(datetime.now().year+6)"
    journal_id: account_journal_cash_chf
    name: Cashbox in CHF
    period_id: cashbox_creation_period_01
    user_id: base.user_root
    balance_start: 1260.0
-
  I confirm closing balance for USD cashbox
-
  !python {model: account.bank.statement}: |
    self.button_confirm_closing_balance(cr, uid, [ref('cashbox_bug_01')])
-
  I create next register for CHF cashbox in order to test it doesn't take pieces and number from USD Cashbox
-
  !record {model: account.bank.statement, id: cashbox_bug_02_next}:
    date: !eval "'%s-01-02' %(datetime.now().year+6)"
    journal_id: account_journal_cash_chf
    name: Cashbox in CHF (2)
    period_id: cashbox_creation_period_02
    user_id: base.user_root
    prev_reg_id: cashbox_bug_02
-
  I check that starting balance and ending balance are correct (all must have 0 pieces)
-
  !python {model: account.bank.statement}: |
    bs = self.browse(cr, uid, [ref('cashbox_bug_02_next')])[0]
    for line in bs.starting_details_ids:
        assert line.number == 0.0, "%s must not have %s pieces!" % (line.pieces, line.number)
    for line in bs.ending_details_ids:
        assert line.number == 0.0, "%s must not have %s pieces!" % (line.pieces, line.number)
-
  In order to verify that a cashbox creation take old pieces, I create the next USD Cashbox
-
  !record {model: account.bank.statement, id: cashbox_bug_01_next}:
    date: !eval "'%s-01-02' %(datetime.now().year+6)"
    journal_id: account_journal_cash_usd
    name: Cashbox in USD (2)
    period_id: cashbox_creation_period_02
    user_id: base.user_root
    prev_reg_id: cashbox_bug_01
-
  Then I verify it have all right number for all pieces
-
  !python {model: account.bank.statement}: |
    bs = self.browse(cr, uid, [ref('cashbox_bug_01_next')])[0]
    data = [(2.0, 3), (10.0, 5), (50.0, 8)]
    for line in bs.starting_details_ids:
        if line.pieces == 2.0:
            assert line.number == 3, "Number should be 3. It's %s" % line.number
        if line.pieces == 10.0:
            assert line.number == 5, "Number should be 5. It's %s" % line.number
        if line.pieces == 50.0:
            assert line.number == 8, "Number should be 8. It's %s" % line.number
    for line in bs.ending_details_ids:
        if line.pieces == 2.0:
            assert line.number == 0, "Number should be 0. It's %s" % line.number
        if line.pieces == 10.0:
            assert line.number == 0, "Number should be 0. It's %s" % line.number
        if line.pieces == 50.0:
            assert line.number == 0, "Number should be 0. It's %s" % line.number
