-
  I click on create invoice and check journal_id on currency are ok
-
  !python {model: account.bank.statement}: |
    bk = self.browse(cr, uid, ref('account_bank_statement_8'))
    ret = self.button_create_invoice(cr, uid, [ref('account_bank_statement_8')])
    inv_id = ret['res_id']
    inv_wiz = self.pool.get('wizard.account.invoice').browse(cr, uid, inv_id)
    assert inv_wiz.currency_id.id == bk.currency.id, "New direct invoice: wrong currency"
    assert inv_wiz.journal_id.type == 'purchase', "New direct invoice: wrong journal_type"
    assert inv_wiz.type == 'in_invoice', "New direct invoice: wrong type"
-
  I create a new invoice
-
  !record {model: wizard.account.invoice, id: new_direct_inv}: 
    partner_id: res_partner_supplier_0
    address_invoice_id: res_partner_address_tempo
    account_id: account_account_payable_supplier0
    invoice_line:
        - account_id: account_account_expense0
          name: XXX
          price_unit: 200
          product_id: product_food_for_staff0
          quantity: 1.0
          uos_id: product.product_uom_unit
          from_yml_test: False
    type: 'in_invoice'
    currency_id: base.EUR
    journal_id: account_journal_expenses_0
    register_id: account_bank_statement_8
    from_yml_test: False
-
  I validate this invoice and check that invoice is open and register line is in temp post state
-
 !python {model: wizard.account.invoice}: |
    self.invoice_create_wizard(cr, uid, [ref('new_direct_inv')])
    st = self.pool.get('account.bank.statement').browse(cr, uid, ref('account_bank_statement_8'))
    line_id = max(st.line_ids, key=lambda a:a.id)
    assert line_id.state == 'temp', "Direct Invoice: statement is not temp posted!"
    assert line_id.direct_invoice, "Direct Invoice: statement not direct"
    inv = line_id.invoice_id
    assert inv.state == 'draft', "Direct invoice not draft"
    assert not inv.reconciled, "Direct invoice should not be reconciled!"
-
  I hard post the register line and check that all is reconciled
-
  !python {model: account.bank.statement}: |
      st = self.browse(cr, uid, ref('account_bank_statement_8'))
      line_id = max(st.line_ids, key=lambda a:a.id)
      # Hard post the line
      self.pool.get('account.bank.statement.line').posting(cr, uid, [line_id.id], 'hard')
      st = self.browse(cr, uid, ref('account_bank_statement_8'))
      line_id = max(st.line_ids, key=lambda a:a.id)
      assert line_id.state == 'hard', "Direct Invoice: statement is not hard posted!"
      inv = line_id.invoice_id
      assert inv.state == 'paid', "Direct invoice not paid"
      assert inv.reconciled, "Direct invoice not reconciled!"
      rec = False
      # Find the account move line reconciled
      rec_line = filter(lambda a:a.reconcile_id, line_id.move_ids[0].line_id)
      
      # Check this line is reconciled with the invoice
      for move_rec in rec_line[0].reconcile_id.line_id:
          if move_rec.invoice and move_rec.invoice.id == inv.id:
              rec = True
              break
      assert rec, "Direct Invoice: st move line not reconciled with invoice move line"
