-
   Creating a service location
-
  !record {model: stock.location, id: location_service}:
    name: Test Service
    location_category: other
    usage: view
    service_location: True
- 
  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_a0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: A
    supplier: true
    
- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_0}:
    partner_id: res_partner_a0
    street: A   
- 
  Creating a product.product record service with reception
- 
  !record {model: product.product, id: product_service_recep_p1}:
    default_code: P9
    name: product 0 test
    type: service_recep
    procure_method: make_to_order
    international_status: product_attributes.int_1
    
- 
  Creating a product.product record stockable
- 
  !record {model: product.product, id: product_stockable_p2}:
    default_code: P15
    name: product 1 test
    type: product
    international_status: product_attributes.int_1
  
-
 0. I create a Sale order and trigger it to Outgoing shipment in
 order to test the code related to sale order.
- 
  !record {model: sale.order, id: sale_order_00}:
    partner_id: res_partner_a0
    pricelist_id: product.list0
    partner_invoice_id: res_partner_address_0
    partner_order_id: res_partner_address_0
    partner_shipping_id: res_partner_address_0
    categ: medical
    
-
  sale order line
-
  !record {model: sale.order.line, id: sale_order_line_00}:
    name: sale order line test
    order_id: sale_order_00
    product_id: product_stockable_p2
    product_uom: product.product_uom_unit
    product_uom_qty: 1.0
    price_unit: 1.0
    
-

  I validate the sale order

-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("sale_order_00"), 'order_confirm', cr)
    
    # check the order_type of outgoing object
    picking_obj = self.pool.get('stock.picking')
    ids = picking_obj.search(cr, uid, [('sale_id', '=', ref("sale_order_00"))], context=None)
    assert len(ids) == 1, 'The number of OUtoing picking is not correct (1 - %s)'%len(ids)
    pick = picking_obj.browse(cr, uid, ids[0], context=None)
    assert pick.order_category == 'medical', 'The order type of the outgoing picking object is not correct (medical, %s)'%pick.order_type
    
-
  1. I create a purchase order with a service product.
  The purchase order is then converted to purchase order
  and validated. No incoming shipment are created because
  only Service product present in the purchase order.
  
  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po0}:
    partner_id: res_partner_a0
    partner_address_id: res_partner_address_0
    pricelist_id: product.list0
    location_id: stock.stock_location_stock
    categ: log
-

  I validate the purchase order and check that no Incoming shipment has been created

-
  !python {model: purchase.order}: |
    # try on change functions
    prod = self.pool.get('product.product')
    prod.on_change_type(cr, uid, [ref("product_service_recep_p1")], 'product', context=None)
    prod.on_change_type(cr, uid, [ref("product_service_recep_p1")], 'service_recep', context=None)
-
  2. I create a purchase order with a stockable product, a service with reception product,
  and a service product. After validation process, an incoming shipment is created
  with two stock moves, one for the stockable and one for the service with reception product.
  
  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po1}:
    partner_id: res_partner_a0
    partner_address_id: res_partner_address_0
    pricelist_id: product.list0
    location_id: stock.stock_location_stock
    categ: log

- 
  Creating a purchase.order.line record for service with reception product
- 
  !record {model: purchase.order.line, id: purchase_order_line_p02}:
    order_id: purchase_order_po1
    price_unit: 1.0
    product_id: product_service_recep_p1
    product_uom: product.product_uom_unit
    product_qty: 1.00
- 
  Creating a purchase.order.line record for service with stockable product
- 
  !record {model: purchase.order.line, id: purchase_order_line_p03}:
    order_id: purchase_order_po1
    price_unit: 1.0
    product_id: product_stockable_p2
    product_uom: product.product_uom_unit
    product_qty: 1.00
-

  I validate the purchase order and check that no Incoming shipment has been created and
  contains the two correct stock moves

-
  !python {model: purchase.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', ref("purchase_order_po1"), 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', ref("purchase_order_po1"), 'purchase_approve', cr)
    
    pick_obj = self.pool.get('stock.picking')
    ids = pick_obj.search(cr, uid, [('purchase_id', '=', ref("purchase_order_po1"))], context=context)
    assert len(ids) == 1, 'No incoming shipment found, an incoming shipment should have been created with service with reception and stockable product (0 - %s)'%len(ids)
    
    pick = pick_obj.browse(cr, uid, ids[0], context=context)
    # the category must be log
    assert pick.order_category == 'log', "the order category does not correspond to purchase order category (log - %s)"%pick.order_category
    count = 0
    for move in pick.move_lines:
      count += 1
      assert move.product_id.id in (ref("product_service_recep_p1"), ref("product_stockable_p2")), "product of stock move is not correct (%s, %s) - %s"%(ref("product_service_recep_p1"), ref("product_stockable_p2"), move.product_id.id) 

    assert count == 2, "the number of stock moves is wrong 2 - %s"%count

-
  3. I create a purchase order with type Direct Purchase Order, with service with reception product.
  No incoming shipment should be created.
  
  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po2}:
    partner_id: res_partner_a0
    partner_address_id: res_partner_address_0
    pricelist_id: product.list0
    location_id: stock.stock_location_stock
    categ: log
    order_type: direct
    
- 
  Creating a purchase.order.line record for service product
- 
  !record {model: purchase.order.line, id: purchase_order_line_p04}:
    order_id: purchase_order_po2
    price_unit: 1.0
    product_id: product_service_recep_p1
    product_uom: product.product_uom_unit
    product_qty: 1.00
-

  I validate the purchase order and check that no Incoming shipment has been created

-
  !python {model: purchase.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', ref("purchase_order_po2"), 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', ref("purchase_order_po2"), 'purchase_approve', cr)
    
    pick_obj = self.pool.get('stock.picking')
    ids = pick_obj.search(cr, uid, [('purchase_id', '=', ref("purchase_order_po2"))], context=context)
    assert len(ids) == 0, 'An incoming shipment is found, no incoming shipment should have been created with service product (0 - %s)'%len(ids)

-
  4. I test the constraint of purchase order. A purchase order with category Service should
  not contain any non service (service, service with reception) product.
  
  Creating a purchase.order record
- 
  !record {model: purchase.order, id: purchase_order_po3}:
    partner_id: res_partner_a0
    partner_address_id: res_partner_address_0
    pricelist_id: product.list0
    location_id: stock.stock_location_stock
    categ: log
    
- 
  Creating a purchase.order.line record for service product
- 
  !record {model: purchase.order.line, id: purchase_order_line_p05}:
    order_id: purchase_order_po3
    price_unit: 1.0
    product_id: product_stockable_p2
    product_uom: product.product_uom_unit
    product_qty: 1.00
-

  I change the category of the purchase order to service, an exception should have been raised

-
  !python {model: purchase.order}: |
    from osv.osv import except_osv
    po = self.browse(cr, uid, ref("purchase_order_po3"), context=context)
    try:
      po.write({'categ':'service'}, context=context)
    except except_osv as e:
      assert False, 'The constraint about Purchase Order of type Category Service with not only Service with Reception Products has been triggered'
      # ok the constraint is triggered
      
    
