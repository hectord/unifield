-
  initialize company data
-
  !python {model: sale.order}: |
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    # set shipment_lead_time and preparation_lead_time
    company_obj.write(cr, uid, [company_id], {'shipment_lead_time': 1, 'preparation_lead_time': 2}, context=context)
    shipment_lead_time = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    preparation_lead_time = company_obj.read(cr, uid, [company_id], ['preparation_lead_time'], context=context)[0]['preparation_lead_time']
    assert shipment_lead_time == 1.0, 'company shipment_lead_time is wrong - 1.0 - %s'%shipment_lead_time
    assert preparation_lead_time == 2.0, 'company preparation_lead_time is wrong - 2.0 - %s'%preparation_lead_time
-
  I create partner
-
  !record {model: res.partner, id: partner200}:
    name: P200
    supplier: True
    customer: True
    supplier_lt: 6
    transport_0: sea
    transport_0_lt: 1
    procurement_lt: 4
    customer_lt: 7
-
  Address for Partner 200
-
  !record {model: res.partner.address, id: address_200}:
    partner_id: partner200
    street: Address200
-
  Product 200
- 
  !record {model: product.product, id: product_200}:
    name: Prod200
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: partner200
        pricelist_ids:
          - min_quantity: 1.00
            price: 1.00
            currency_id: base.EUR
            uom_id: product.product_uom_categ_unit
-
  Create a Sale Order
-
  !record {model: sale.order, id: so_order_date_200}:
    company_id: base.main_company
    invoice_quantity: order
    order_policy: manual
    partner_id: partner200
    partner_invoice_id: address_200
    partner_order_id: address_200
    partner_shipping_id: address_200
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
-
  Create a Sale Order Line
-
  !record {model: sale.order.line, id: sol_order_date_200}:
    product_uom: product.product_uom_unit
    product_id: product_200
    order_id: so_order_date_200
    price_unit: 1
    product_uom_qty: 10
    type: make_to_order
-
  I validate the sale order
-
  !python {model: sale.order}: |
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    # get shipment_lead_time and preparation_lead_time
    shipment_lead_time = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    preparation_lead_time = company_obj.read(cr, uid, [company_id], ['preparation_lead_time'], context=context)[0]['preparation_lead_time']
    assert shipment_lead_time == 1.0, 'company shipment_lead_time is wrong - 1.0 - %s'%shipment_lead_time
    assert preparation_lead_time == 2.0, 'company preparation_lead_time is wrong - 2.0 - %s'%preparation_lead_time
    # data
    partner = self.pool.get('res.partner').browse(cr, uid, ref("partner200"), context=context)
    today = time.strftime('%Y-%m-%d') # creation date (date_order)
    transport_lt = partner.transport_0_lt
    transport_type = partner.transport_0
    customer_lt = partner.customer_lt
    supplier_lt = partner.supplier_lt
    requested = (datetime.strptime(today, '%Y-%m-%d') + relativedelta(days=customer_lt)).strftime('%Y-%m-%d')
    rts = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d')
    confirmed = (datetime.strptime(requested, '%Y-%m-%d') + relativedelta(days=1)).strftime('%Y-%m-%d')
    # assert existing values    
    obj = self.browse(cr, uid, ref("so_order_date_200"), context=context)
    # creation date
    assert obj.date_order == today, 'creation date of so is not today - %s - %s'%(today,obj.date_order)
    # requested date
    assert obj.delivery_requested_date == requested, 'requested date of so is wrong - %s - %s'%(requested,obj.delivery_requested_date)
    # transport mode
    assert obj.transport_type == 'sea', 'transport type of so is wrong - sea - %s'%obj.transport_type
    # transport lead time
    assert obj.est_transport_lead_time == 1, 'transport lead time of so is wrong - 1.0 - %s'%obj.est_transport_lead_time
    # ready to ship date
    assert obj.ready_to_ship_date == rts, 'ready to ship date of so is wrong - %s - %s'%(rts,obj.ready_to_ship_date)
    # set confirmed date
    obj.write({'delivery_confirmed_date': confirmed}, context=context)
    
    # trigger so workflow
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("so_order_date_200"), 'order_confirm', cr)
-
  Check the dates of OUT object
-
  !python {model: stock.picking}: |
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    # get shipment_lead_time and preparation_lead_time
    shipment_lead_time = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    preparation_lead_time = company_obj.read(cr, uid, [company_id], ['preparation_lead_time'], context=context)[0]['preparation_lead_time']
    assert shipment_lead_time == 1.0, 'company shipment_lead_time is wrong - 1.0 - %s'%shipment_lead_time
    assert preparation_lead_time == 2.0, 'company preparation_lead_time is wrong - 2.0 - %s'%preparation_lead_time
    # data
    partner = self.pool.get('res.partner').browse(cr, uid, ref("partner200"), context=context)
    today = time.strftime('%Y-%m-%d') # creation date (date_order)
    transport_lt = partner.transport_0_lt
    transport_type = partner.transport_0
    customer_lt = partner.customer_lt
    supplier_lt = partner.supplier_lt
    requested = (datetime.strptime(today, '%Y-%m-%d') + relativedelta(days=customer_lt)).strftime('%Y-%m-%d')
    rts = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d')
    rts_time = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d %H:%M:%S')
    confirmed = (datetime.strptime(requested, '%Y-%m-%d') + relativedelta(days=1)).strftime('%Y-%m-%d')
    
    out_id = self.search(cr, uid, [('sale_id', '=', ref("so_order_date_200"))], context=context)[0]
    obj = self.browse(cr, uid, out_id, context=context)

    assert obj.min_date == rts_time, 'expected pick date from draft picking is wrong - %s - %s'%(rts_time, obj.min_date)
    for move in obj.move_lines:
      # assert date
      assert move.date == rts_time, 'actual pick date from move is wrong - %s - %s'%(rts_time,move.date)
      # assert date_expected
      assert move.date_expected == rts_time, 'expected pick date from move is wrong - %s - %s'%(rts_time,move.date_expected)
      
    # convert the OUT to standard OUT
    self.convert_to_standard(cr, uid, [obj.id], context=context)
    expected_shipped_date = (datetime.strptime(rts_time, '%Y-%m-%d %H:%M:%S') + relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d %H:%M:%S')
    # reload object because of cache
    obj = self.browse(cr, uid, out_id, context=context)
    assert obj.min_date == expected_shipped_date, 'expected shipped date from draft picking is wrong - %s - %s'%(expected_shipped_date, obj.min_date)
    for move in obj.move_lines:
      # assert date
      assert move.date == expected_shipped_date, 'actual shipped date from move is wrong - %s - %s'%(expected_shipped_date,move.date)
      # assert date_expected
      assert move.date_expected == expected_shipped_date, 'expected shipped date from move is wrong - %s - %s'%(expected_shipped_date,move.date_expected)
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    # get shipment_lead_time and preparation_lead_time
    shipment_lead_time = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    preparation_lead_time = company_obj.read(cr, uid, [company_id], ['preparation_lead_time'], context=context)[0]['preparation_lead_time']
    assert shipment_lead_time == 1.0, 'company shipment_lead_time is wrong - 1.0 - %s'%shipment_lead_time
    assert preparation_lead_time == 2.0, 'company preparation_lead_time is wrong - 2.0 - %s'%preparation_lead_time
    # data
    partner = self.pool.get('res.partner').browse(cr, uid, ref("partner200"), context=context)
    today = time.strftime('%Y-%m-%d') # creation date (date_order)
    transport_lt = partner.transport_0_lt
    transport_type = partner.transport_0
    customer_lt = partner.customer_lt
    supplier_lt = partner.supplier_lt
    requested = (datetime.strptime(today, '%Y-%m-%d') + relativedelta(days=customer_lt)).strftime('%Y-%m-%d')
    rts = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d')
    # date planned from procuement - rts - prep lt
    date_planned_time = (datetime.strptime(rts, '%Y-%m-%d') - relativedelta(days=preparation_lead_time)).strftime('%Y-%m-%d %H:%M:%S')
    date_planned = (datetime.strptime(rts, '%Y-%m-%d') - relativedelta(days=preparation_lead_time)).strftime('%Y-%m-%d')
    
    confirmed = (datetime.strptime(date_planned, '%Y-%m-%d') + relativedelta(days=1)).strftime('%Y-%m-%d')
    
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_order_date_200")], ['procurement_id'], context=context)[0]
    assert data['procurement_id'], 'procurement data is missing, problem at procurement generation'
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note', 'date_planned'], context=context)[0]
    # date planned of procurement order rts of so - preparation lead time
    assert data['date_planned'] == date_planned_time, 'procurement date planned is wrong - %s - %s'%(date_planned_time,data['date_planned'])
    
    assert data['purchase_id'], 'purchase_id is missing'
    po_id = data['purchase_id'][0]
    # assert existing values    
    obj = self.browse(cr, uid, po_id, context=context)
    # creation date
    assert obj.date_order == today, 'creation date of po is not today - %s - %s'%(today,obj.date_order)
    # requested date
    assert obj.delivery_requested_date == date_planned, 'requested date of po is wrong - %s - %s'%(date_planned,obj.delivery_requested_date)
    # transport mode
    assert obj.transport_type == 'sea', 'transport type of po is wrong - sea - %s'%obj.transport_type
    # transport lead time
    assert obj.est_transport_lead_time == 1, 'transport lead time of po is wrong - 1.0 - %s'%obj.est_transport_lead_time
    # set confirmed date
    obj.write({'delivery_confirmed_date': confirmed}, context=context)
    
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Check the dates of IN object
-
  !python {model: stock.picking}: |
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    sol_obj = self.pool.get('sale.order.line')
    proc_obj = self.pool.get('procurement.order')
    # get shipment_lead_time and preparation_lead_time
    shipment_lead_time = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    preparation_lead_time = company_obj.read(cr, uid, [company_id], ['preparation_lead_time'], context=context)[0]['preparation_lead_time']
    assert shipment_lead_time == 1.0, 'company shipment_lead_time is wrong - 1.0 - %s'%shipment_lead_time
    assert preparation_lead_time == 2.0, 'company preparation_lead_time is wrong - 2.0 - %s'%preparation_lead_time
    # data
    partner = self.pool.get('res.partner').browse(cr, uid, ref("partner200"), context=context)
    today = time.strftime('%Y-%m-%d') # creation date (date_order)
    transport_lt = partner.transport_0_lt
    transport_type = partner.transport_0
    customer_lt = partner.customer_lt
    supplier_lt = partner.supplier_lt
    requested = (datetime.strptime(today, '%Y-%m-%d') + relativedelta(days=customer_lt)).strftime('%Y-%m-%d')
    rts = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d')
    rts_time = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lead_time)).strftime('%Y-%m-%d %H:%M:%S')
    # date planned from procuement - rts - prep lt
    date_planned_time = (datetime.strptime(rts, '%Y-%m-%d') - relativedelta(days=preparation_lead_time)).strftime('%Y-%m-%d %H:%M:%S')
    date_planned = (datetime.strptime(rts, '%Y-%m-%d') - relativedelta(days=preparation_lead_time)).strftime('%Y-%m-%d')
    confirmed = (datetime.strptime(date_planned, '%Y-%m-%d') + relativedelta(days=1)).strftime('%Y-%m-%d')
    confirmed_time = (datetime.strptime(date_planned, '%Y-%m-%d') + relativedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_order_date_200")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note', 'date_planned'], context=context)[0]
    # date planned of procurement order rts of so - preparation lead time
    assert data['date_planned'] == date_planned_time, 'procurement date planned is wrong - %s - %s'%(date_planned_time,data['date_planned'])
    
    po_id = data['purchase_id'][0]
    in_id = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)[0]
    obj = self.browse(cr, uid, in_id, context=context)

    assert obj.min_date == confirmed_time, 'expected receipt date from incoming shipment is wrong - %s - %s'%(confirmed_time,obj.min_date)
    for move in obj.move_lines:
      # assert date
      assert move.date == confirmed_time, 'actual receipt date from move is wrong - %s - %s'%(confirmed_time,move.date)
      # assert date_expected
      assert move.date_expected == confirmed_time, 'expected receipt date from move is wrong - %s - %s'%(confirmed_time,move.date_expected)
