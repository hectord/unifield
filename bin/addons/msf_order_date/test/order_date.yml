-
  I create supplier
-
  !record {model: res.partner, id: supplier100}:
    name: S100
    supplier: True
    supplier_lt: 2
    transport_0: road
    transport_0_lt: 11
-
  I create customer
-
  !record {model: res.partner, id: customer100}:
    name: C100
    customer: True
    customer_lt: 3
    transport_0: sea
    transport_0_lt: 5
-
  I create a Purchase Order
-
  !record {model: purchase.order, id: po1}:
    name: 'PO/21'
    #company_id: base.main_company
    #invoice_method: 'order'
    location_id: stock.stock_location_stock
    partner_address_id: address1
    partner_id: supplier100
    pricelist_id: purchase.list0
-
  Check on_change functions so
-
  !python {model: sale.order}: |
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    shipment_lt = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    # data
    partner = self.pool.get('res.partner').browse(cr, uid, ref("customer100"), context=context)
    today = time.strftime('%Y-%m-%d') # creation date (date_order)
    transport_lt = partner.transport_0_lt
    transport_type = partner.transport_0
    customer_lt = partner.customer_lt
    requested = (datetime.strptime(today, '%Y-%m-%d') + relativedelta(days=customer_lt)).strftime('%Y-%m-%d')
    rts = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lt)).strftime('%Y-%m-%d')
    rts_false = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=0) - relativedelta(days=shipment_lt)).strftime('%Y-%m-%d')
    # partner
    res = self.onchange_partner_id(cr, uid, [], part=ref("customer100"), date_order=today, transport_lt=transport_lt, context=context)
    assert res['value']['delivery_requested_date'] == requested, 'partner: requested date is wrong - %s - %s'%(requested,res['value']['delivery_requested_date'])
    assert res['value']['transport_type'] == transport_type, 'partner: transport_type is wrong - sea - %s'%res['value']['transport_type']
    assert res['value']['est_transport_lead_time'] == transport_lt, 'partner: transport lead time is wrong - %s - %s'%(transport_lt,res['value']['est_transport_lead_time'])
    assert res['value']['ready_to_ship_date'] == rts, 'partner: ready to ship date is wrong - %s - %s'%(rts,res['value']['ready_to_ship_date'])
    # partner False
    res = self.onchange_partner_id(cr, uid, [], part=False, date_order=today, transport_lt=transport_lt, context=context)
    assert res['value']['delivery_requested_date'] == False, 'partner False: requested date is wrong - %s - %s'%(False,res['value']['delivery_requested_date'])
    assert res['value']['transport_type'] == False, 'partner False: transport_type is wrong - False - %s'%res['value']['transport_type']
    assert res['value']['est_transport_lead_time'] == 0.0, 'partner False: transport lead time is wrong - 0.0 - %s'%res['value']['est_transport_lead_time']
    assert res['value']['ready_to_ship_date'] == False, 'partner False: ready to ship date is wrong - %s - %s'%(False,res['value']['ready_to_ship_date'])
    # creation date
    res = self.onchange_date_order(cr, uid, [], part=ref("customer100"), date_order=today, context=context)
    assert res['value']['delivery_requested_date'] == requested, 'creation date: requested date is wrong - %s - %s'%(requested,res['value']['delivery_requested_date'])
    assert res['value']['ready_to_ship_date'] != rts, 'requested date: ready to ship date is wrong - %s - %s'%(rts,res['value']['ready_to_ship_date'])
    # creation date False
    res = self.onchange_date_order(cr, uid, [], part=ref("customer100"), date_order=False, context=context)
    assert res['value']['delivery_requested_date'] == False, 'creation date False: requested date is wrong - %s - %s'%(False,res['value']['delivery_requested_date'])
    assert res['value']['ready_to_ship_date'] == False, 'creation date False: ready to ship date is wrong - %s - %s'%(False,res['value']['ready_to_ship_date'])
    # requested date
    res = self.onchange_requested_date(cr, uid, [], part=ref("customer100"), date_order=today, requested_date=requested, transport_lt=transport_lt, context=context)
    assert res['value']['ready_to_ship_date'] == rts, 'requested date: ready to ship date is wrong - %s - %s'%(rts,res['value']['ready_to_ship_date'])
    # requested date False
    res = self.onchange_requested_date(cr, uid, [], part=ref("customer100"), date_order=today, requested_date=False, transport_lt=transport_lt, context=context)
    assert res['value']['ready_to_ship_date'] == False, 'requested date False: ready to ship date is wrong - %s - %s'%(False,res['value']['ready_to_ship_date'])
    # transport type
    res = self.onchange_transport_type(cr, uid, [], part=ref("customer100"), transport_type=transport_type, requested_date=requested, context=context)
    assert res['value']['est_transport_lead_time'] == transport_lt, 'transport lead time is wrong - %s - %s'%(transport_lt,res['value']['est_transport_lead_time'])
    assert res['value']['ready_to_ship_date'] == rts, 'transport type: ready to ship date is wrong - %s - %s'%(rts,res['value']['ready_to_ship_date'])
    # transport type False
    res = self.onchange_transport_type(cr, uid, [], part=ref("customer100"), transport_type=False, requested_date=requested, context=context)
    assert res['value']['est_transport_lead_time'] == 0.0, 'transport lead time is wrong - 0.0 - %s'%res['value']['est_transport_lead_time']
    assert res['value']['ready_to_ship_date'] == rts_false, 'transport type False:ready to ship date is wrong - %s - %s'%(rts_false,res['value']['ready_to_ship_date'])
    # transport lead time
    res = self.onchange_transport_lt(cr, uid, [], requested_date=requested, transport_lt=transport_lt, context=context)
    assert res['value']['ready_to_ship_date'] == rts, 'transport lt: ready to ship date is wrong - %s - %s'%(rts,res['value']['ready_to_ship_date'])
    # transport lead time False
    res = self.onchange_transport_lt(cr, uid, [], requested_date=requested, transport_lt=False, context=context)
    assert res['value']['ready_to_ship_date'] == rts_false, 'transport lt False: ready to ship date is wrong - %s - %s'%(rts_false,res['value']['ready_to_ship_date'])
    
-
  Check on_change functions po
-
  !python {model: purchase.order}: |
    # test default values
    po_test = self.browse(cr, uid, ref("po1"), context=context)
    assert po_test.internal_type, 'internal_type missing'
    assert po_test.partner_type, 'partner_type missing'
    # objects
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    company_obj = self.pool.get('res.company')
    company_id = company_obj._company_default_get(cr, uid, self._name, context=context)
    shipment_lt = company_obj.read(cr, uid, [company_id], ['shipment_lead_time'], context=context)[0]['shipment_lead_time']
    # data
    partner = self.pool.get('res.partner').browse(cr, uid, ref("supplier100"), context=context)
    today = time.strftime('%Y-%m-%d') # creation date (date_order)
    transport_lt = partner.transport_0_lt
    transport_type = partner.transport_0
    supplier_lt = partner.supplier_lt
    requested = (datetime.strptime(today, '%Y-%m-%d') + relativedelta(days=supplier_lt)).strftime('%Y-%m-%d')
    rts = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=transport_lt) - relativedelta(days=shipment_lt)).strftime('%Y-%m-%d')
    rts_false = (datetime.strptime(requested, '%Y-%m-%d') - relativedelta(days=0) - relativedelta(days=shipment_lt)).strftime('%Y-%m-%d')
    # partner
    res = self.onchange_partner_id(cr, uid, [], part=ref("supplier100"), date_order=today, transport_lt=transport_lt, context=context)
    assert res['value']['delivery_requested_date'] == requested, 'po-partner: requested date is wrong - %s - %s'%(requested,res['value']['delivery_requested_date'])
    assert res['value']['transport_type'] == transport_type, 'po-partner: transport_type is wrong - sea - %s'%res['value']['transport_type']
    assert res['value']['est_transport_lead_time'] == transport_lt, 'po-partner: transport lead time is wrong - %s - %s'%(transport_lt,res['value']['est_transport_lead_time'])
    assert 'ready_to_ship_date' not in res['value'], 'po-partner:ready to ship date should not be in res dictionary'
    # partner False
    res = self.onchange_partner_id(cr, uid, [], part=False, date_order=today, transport_lt=transport_lt, context=context)
    assert res['value']['delivery_requested_date'] == False, 'po-partner False: requested date is wrong - %s - %s'%(False,res['value']['delivery_requested_date'])
    assert res['value']['transport_type'] == False, 'po-partner False: transport_type is wrong - False - %s'%res['value']['transport_type']
    assert res['value']['est_transport_lead_time'] == 0.0, 'po-partner False: transport lead time is wrong - 0.0 - %s'%res['value']['est_transport_lead_time']
    assert 'ready_to_ship_date' not in res['value'], 'po-partner False:ready to ship date should not be in res dictionary'
    # creation date
    res = self.onchange_date_order(cr, uid, [], part=ref("supplier100"), date_order=today, context=context)
    assert res['value']['delivery_requested_date'] == requested, 'creation date: requested date is wrong - %s - %s'%(requested,res['value']['delivery_requested_date'])
    assert 'ready_to_ship_date' not in res['value'], 'creation date (date_order):ready to ship date should not be in res dictionary'
    # creation date False
    res = self.onchange_date_order(cr, uid, [], part=ref("supplier100"), date_order=False, context=context)
    assert res['value']['delivery_requested_date'] == False, 'po-creation date False: requested date is wrong - %s - %s'%(False,res['value']['delivery_requested_date'])
    assert 'ready_to_ship_date' not in res['value'], 'po-creation date (date_order) False:ready to ship date should not be in res dictionary'
    # requested date
    res = self.onchange_requested_date(cr, uid, [], part=ref("supplier100"), date_order=today, requested_date=requested, transport_lt=transport_lt, context=context)
    # test disabled due to UF-1054
    # assert 'value' not in res, 'po-requested date:value should not be in res dictionary'
    # requested date False
    res = self.onchange_requested_date(cr, uid, [], part=ref("supplier100"), date_order=today, requested_date=False, transport_lt=transport_lt, context=context)
    # test disabled due to UF-1054
    # assert 'value' not in res, 'po-requested date False:value should not be in res dictionary'
    # requested date WARNING
    res = self.onchange_requested_date(cr, uid, [], part=ref("supplier100"), date_order=today, requested_date=today, transport_lt=transport_lt, context=context)
    assert 'warning' in res, 'po-requested date Warning:a warning should have been generated'
    # transport type
    res = self.onchange_transport_type(cr, uid, [], part=ref("supplier100"), transport_type=transport_type, requested_date=requested, context=context)
    assert res['value']['est_transport_lead_time'] == transport_lt, 'transport lead time is wrong - %s - %s'%(transport_lt,res['value']['est_transport_lead_time'])
    assert 'ready_to_ship_date' not in res['value'], 'po-transport type:ready to ship date should not be in res dictionary'
    # transport type False
    res = self.onchange_transport_type(cr, uid, [], part=ref("supplier100"), transport_type=False, requested_date=requested, context=context)
    assert res['value']['est_transport_lead_time'] == 0.0, 'po-transport lead time is wrong - 0.0 - %s'%res['value']['est_transport_lead_time']
    assert 'ready_to_ship_date' not in res['value'], 'po-transport type False:ready to ship date should not be in res dictionary'
    
