-
  In order to test the reason type move feature with a chained location,
  I will create a chained stock location (manual operation), a warehouse, 
  a shop and a sale order.  I will confirm the sale order and see if the 
  chained location give the reason type of the initial picking to the new.
  Same thing with stock move
- 
  I create a chained stock location
-
  !record {model: stock.location, id: chained1}:
    name: test chained
    active: True
    scrap_location: False
    chained_auto_packing: manual
    usage: internal
    chained_location_type: customer
    location_category: stock
-
  I create a warehouse
-
  !record {model: stock.warehouse, id:  warehouse1}:
    name: Warehouse test
    lot_input_id: stock.stock_location_stock
    lot_stock_id: stock.stock_location_stock
    lot_output_id: chained1
-
  I create a shop
-
  !record {model: sale.shop, id: shop1}:
    name: Shop test
    payment_default_id: account.account_payment_term
    warehouse_id: warehouse1
-
  I create a product
-
  !record {model: product.product, id: product_test}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    reviewed_consumption: 45
    international_status: product_attributes.int_1
- 
  I create a customer
-
  !record {model: res.partner, id: cust1}:
    name: C1
    customer: True
-
  I create an address for this customer
-
  !record {model: res.partner.address, id: addrc1}:
    name: C1
    partner_id: cust1 
-
  I create a sale order
-
  !record {model: sale.order, id: so1}:
    amount_total: 5.0
    amount_untaxed: 5.0
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_quantity: order
    order_line:
      - company_id: base.main_company
        name: P1
        delay: 7.0
        price_unit: 12.0
        product_id: product_test
        product_uom: product.product_uom_unit
        product_uom_qty: 15.0
        product_uos_qty: 15.0
        state: draft
        type: make_to_order
    order_policy: manual
    partner_id: cust1
    partner_invoice_id: addrc1
    partner_order_id: addrc1
    partner_shipping_id: addrc1
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: shop1
- 
  I confirm the sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: so1}
-
  I check if a stock picking has been created
- 
  !python {model: stock.picking}: |
    pick_id = self.search(cr, uid, [('sale_id', '=', ref('so1'))], order='id', context=context)
    modules = self.pool.get('ir.module.module')
    mod_pur = modules.search(cr, uid, [('name','=','msf_outgoing'), ('state', 'in', ['installed', 'to upgrade', 'to install'])])
    if mod_pur:
        l = 1
    else:
        l = 2
    assert len(pick_id) == l, "No stock picking created !"
    assert self.browse(cr, uid, pick_id[0], context=context).reason_type_id.id == ref('reason_type_deliver_partner'), "The created stock picking has no the Deliver partner reason type move"
    for move in self.browse(cr, uid, pick_id[0], context=context).move_lines:
      assert move.reason_type_id.id == ref('reason_type_deliver_partner'), "The created stock move has no the Deliver partner reason type move"
    if not mod_pur:  
        assert self.browse(cr, uid, pick_id[1], context=context).reason_type_id.id == ref('reason_type_deliver_partner'), "The chained stock picking has no the Deliver partner reason type move"
        for move in self.browse(cr, uid, pick_id[1], context=context).move_lines:
          assert move.reason_type_id.id == ref('reason_type_deliver_partner'), "The chained stock move has no the Deliver partner reason type move"
