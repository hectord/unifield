-
  I open the HQ Entries Import wizard and set a test file
-
  !python {model: hq.entries.import}: |
    # needed imports
    import addons, base64, time, logging
    # prepare some values
    context = {'lang': u'en_MF', 'tz': False, 'client': 'web', 'department_id': False}
    # fetch file path
    filename = 'hq_entries.csv'
    file_path = addons.get_module_resource('account_hq_entries','test','files', filename)
    # read file to give it to the wizard
    file = open(file_path, 'r')
    # replace all old date by those in this year
    file_replaced = file.read().replace('2013', time.strftime('%Y'))
    file64 = base64.b64encode(file_replaced)
    # create wizard with right values
    wiz_id = self.create(cr, uid, {
      'file': file64,
      'filename': filename,
    }, context=context)
    # launch wizard validation
    res = self.button_validate(cr, uid, [wiz_id], context)
    assert res != False, "An error occured during HQ entries validation."
    message = res.get('context', False) and res.get('context').get('message', False) and res.get('context').get('message') or False
    res_id = res.get('res_id', False)
    assert res_id != False, "No confirmation wizard found!"
    wizard_obj = self.pool.get('hr.payroll.import.confirmation')
    wiz = wizard_obj.browse(cr, uid, [res_id], context=context)[0]
    if wiz.nberrors != 0:
      logging.getLogger('tests').log(logging.TEST, 'Error(s): \n%s' % wiz.errors)
    assert wiz.nberrors == 0, "%s errors found!" % wiz.nberrors
    assert wiz.total == 14, "All lines did not be imported. Total: %s" % wiz.total
    assert wiz.state == 'hq', "Wrong wizard state: %s. Expected: 'hq'" % wiz.state
-
  I check that all entries are in valid state.
-
  !python {model: hq.entries}: |
    line_ids = self.search(cr, uid, [])
    assert len(line_ids) == 14, "Should be only 14 lines! Current: %s" % len(line_ids)
    errors = False
    for line in self.browse(cr, uid, line_ids, context={}):
      assert line.analytic_state == 'valid', "Line %s is invalid (%s). Account: %s Amount: %s" % (line.id or '', line.analytic_state or '', line.account_id.code or '', line.amount or 0.0)
-
  I validate all HQ Entries
-
  !python {model: hq.entries.validation}: |
    # The wizard only takes active_ids that are in context. So we search all HQ Entries, put them into context and launch the process!
    hq_ids = self.pool.get('hq.entries').search(cr, uid, [])
    res = self.pool.get('hq.entries').get_validation_wizard(cr, uid, [], context={'active_ids': hq_ids})
    assert res.get('res_id', False) != False, "No wizard created!"
    assert res.get('res_model', False) == 'hq.entries.validation', "Wrong return type. Should be hq.entries.validation!"
    self.button_validate(cr, uid, res.get('res_id'))
-
  I test HQ entries import result (5 JI on Jan the 8th, 4 JE in BIF, 1 JE on CHF, 2 JE in EUR, etc.)
-
  !python {model: account.move}: |
    import time, logging
    # Test that 7 JE are on HQ journal
    logging.getLogger('tests').log(logging.INFO, "7 JE on HQ")
    je_hq_ids = self.search(cr, uid, [('journal_id.type', '=', 'hq')])
    assert len(je_hq_ids) == 7, "Expect 7 moves in HQ Journal. Current: %s" % len(je_hq_ids)
    # Test that 2 JE are done January the 9th
    logging.getLogger('tests').log(logging.INFO, "2 JE on HQ, January the 9th")
    je_9_ids = self.search(cr, uid, [('journal_id.type', '=', 'hq'), ('date', '=', time.strftime('%Y-01-09'))])
    assert len(je_9_ids) == 2, "Expect 2 moves in HQ Journal for January, the 9th. Current: %s" % len(je_9_ids)
    # Test that 4 JE are done in BIF
    logging.getLogger('tests').log(logging.INFO, "4 JE on HQ, in BIF currency")
    je_4_args = [('journal_id.type', '=', 'hq')] + self._search_currency(cr, uid, self, 'currency_id', [('currency_id', '=', ref('base.BIF'))])
    je_4_ids = self.search(cr, uid, je_4_args)
    assert len(je_4_ids) == 4, "Expect 4 moves in HQ Journal in BIF currency. Curent: %s" % len(je_4_ids)
    # Test that 1 JE is in CHF
    logging.getLogger('tests').log(logging.INFO, "1 JE on HQ, in CHF currency")
    je_1_args = [('journal_id.type', '=', 'hq')] + self._search_currency(cr, uid, self, 'currency_id', [('currency_id', '=', ref('base.CHF'))])
    je_1_ids = self.search(cr, uid, je_1_args)
    assert len(je_1_ids) == 1, "Expect 1 move in HQ Journal in CHF currency. Current: %s" % len(je_1_ids)
    # Test that 2 JE are done in EUR
    logging.getLogger('tests').log(logging.INFO, "2 JE on HQ, in EUR currency")
    je_2_args = [('journal_id.type', '=', 'hq')] + self._search_currency(cr, uid, self, 'currency_id', [('currency_id', '=', ref('base.EUR'))])
    je_2_ids = self.search(cr, uid, je_2_args)
    assert len(je_2_ids) == 2, "Expect 2 moves in HQ Journal in EUR currency. Current: %s" % len(je_2_ids)
    # Test that 5 JI are done in EUR, January the 8th (without counterpart)
    logging.getLogger('tests').log(logging.INFO, "5 JI on HQ, in EUR currency, January the 8th (without counterpart)")
    ji_ids = self.pool.get('account.move.line').search(cr, uid, [('journal_id.type', '=', 'hq'), ('date', '=', time.strftime('%Y-01-08')), ('currency_id', '=', ref('base.EUR')), ('account_id', '!=', ref('account_4000'))])
    assert len(ji_ids) == 5, "Expect 5 move lines in HQ Journal in EUR currency, January the 8th. Current: %s" % len(ji_ids)
