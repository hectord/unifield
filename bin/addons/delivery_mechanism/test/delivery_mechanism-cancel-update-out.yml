-
  Create a Sale Order
-
  !record {model: sale.order, id: so_J}:
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: procurement
    order_policy: manual
    partner_id: partner_A
    partner_invoice_id: address_A
    partner_order_id: address_A
    partner_shipping_id: address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
-
  Create a Sale Order Line
-
  !record {model: sale.order.line, id: sol_J1}:
    product_uom: product.product_uom_unit
    product_id: product_A
    order_id: so_J
    price_unit: 1
    product_uom_qty: 10
    date_planned: '2011-04-13'
    type: make_to_order
-
  !record {model: sale.order.line, id: sol_J2}:
    product_uom: product.product_uom_unit
    product_id: product_B
    order_id: so_J
    price_unit: 1
    product_uom_qty: 5
    date_planned: '2011-04-13'
    type: make_to_order
-
  I validate the sale order
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("so_J"), 'order_confirm', cr)
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_J1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # change Invoicing control to From Picking
    self.write(cr, uid, [po_id], {'invoice_method':'picking'}, context=context)
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Process the incoming shipment - reduce both qty - a back order is created
-
  !python {model: stock.picking}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    po_obj = self.pool.get('purchase.order')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_J1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # find the IN
    in_ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    # cancel the incoming shipment with out update - then check the out
    dic = self.enter_reason(cr, uid, in_ids, context=dict(context, cancel_type='update_out'))
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    # enter a reason
    wiz_obj = self.pool.get(wiz_model)
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      wiz_obj.write(cr, uid, [obj.id], {'change_reason': 'test yml'}, context=context)
      
    wiz_obj.do_cancel(cr, uid, [dic['res_id']], context=dic['context'])
    data = self.read(cr, uid, in_ids, ['state', 'purchase_id'], context=context)[0]
    assert data['state'] == 'cancel', 'the incoming shipment is not Canceled - cancel - %s'%data['state']
    # check the corresponding purchase state - the state has been automaticly manually corrected because the cancelation of incoming is definitive (out updated)
    # as the invoice control is From Picking, we do not wait for the invoice, the po state is therefore Done
    data = po_obj.read(cr, uid, [data['purchase_id'][0]], ['state'], context=context)[0]
    assert data['state'] == 'done', 'the corresponding po is not in Done state - done - %s'%data['state']
    # check the moves in OUT - back order contained 10 A and 5 B, should have been decreased in OUT
    a_qty = [0.0]
    b_qty = [0.0]
    out_ids = self.search(cr, uid, [('sale_id', '=', ref("so_J"))], context=context)
    # only one OUT for the sale order
    assert len(out_ids) == 1, 'number of out objects is wrong - 1 - %s'%len(out_ids)
    for obj in self.browse(cr, uid, out_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("product_A"):
          a_qty.remove(move.product_qty)
          # the move should be canceled
          assert move.state == 'cancel', 'the out move product A should be canceled - cancel - %s'%move.state
        if move.product_id.id == ref("product_B"):
          b_qty.remove(move.product_qty)
          # the move should be canceled
          assert move.state == 'cancel', 'the out move product B should be canceled - cancel - %s'%move.state
      # check the sale order, it should be manually corrected
      assert obj.sale_id.state == 'done', 'corresponding sale order state is wrong - done - %s'%obj.sale_id.state
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    
    
