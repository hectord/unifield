-
  In order to test the product cost valuation method, we will
  create some stock moves to Cross-docking and stock locatio
  and see if the cost price of the product is ok.
-
  We create a service stock location
-
  !record {model: stock.location, id: service_loc}:
    name: service
    service_location: True
    location_category: other
    usage: inventory
-
  We create a stock move from MSF Supplier to Cross-Docking
-
  !record {model: stock.picking, id: val_pick1}:
    type: in
    move_lines:
      - product_id: product_E
        product_qty: 10.0
        name: 'product_E'
        product_uom: product.product_uom_unit
        location_id: stock.stock_location_internal_suppliers
        location_dest_id: msf_cross_docking.stock_location_cross_docking
-
  Process the picking
-    
  !python {model: stock.picking}: |
    self.action_confirm(cr, uid, [ref('val_pick1')], context=context)
    self.force_assign(cr, uid, [ref('val_pick1')])
    dic = self.action_process(cr, uid, ref('val_pick1'), context=context)
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    # reduce qty and then split moves
    wiz_obj = self.pool.get(wiz_model)
    wiz_obj.copy_all(cr,uid,[dic['res_id']], context=dic['context'])
    
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      for out in getattr(obj, 'product_moves_in'): # -> because is now IN with average product cost method !!!
        out.write({'cost': 100.0}, context=wiz_c)
    
    self.pool.get(dic['res_model']).copy_all(cr,uid, [dic['res_id']], context=dic['context'])
    self.pool.get(dic['res_model']).do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
-
  Check the product cost price
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_E'))
    assert product.standard_price == 1.00, 'Bad cost price (Expected 0.00 - Result %s) [3]' % product.standard_price
-
  We create a stock move from MSF Supplier to Input
-
  !record {model: stock.picking, id: val_pick2}:
    type: in
    move_lines:
      - product_id: product_E
        product_qty: 10.0
        name: 'product_E'
        product_uom: product.product_uom_unit
        location_id: stock.stock_location_internal_suppliers
        location_dest_id: msf_cross_docking.stock_location_input
-
  Process the picking
-    
  !python {model: stock.picking}: |
    self.action_confirm(cr, uid, [ref('val_pick2')], context=context)
    self.force_assign(cr, uid, [ref('val_pick2')])
    dic = self.action_process(cr, uid, ref('val_pick2'), context=context)
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    # reduce qty and then split moves
    wiz_obj = self.pool.get(wiz_model)
    wiz_obj.copy_all(cr,uid,[dic['res_id']], context=dic['context'])
    
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      for out in getattr(obj, 'product_moves_in'): # -> because is now IN with average product cost method !!!
        out.write({'cost': 200.0}, context=wiz_c)
    
    self.pool.get(dic['res_model']).copy_all(cr,uid, [dic['res_id']], context=dic['context'])
    self.pool.get(dic['res_model']).do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
-
  Check the product cost price
-
  !python {model: product.product}: |
    product = self.browse(cr, uid, ref('product_E'))
    assert product.standard_price == 200.00, 'Bad cost price (Expected 200.00 - Result %s) [3]' % product.standard_price
-
  We create a stock move from MSF Supplier to Stock
-
  !record {model: stock.picking, id: val_pick3}:
    type: in
    move_lines:
      - product_id: product_E
        product_qty: 20.0
        name: 'product_E'
        product_uom: product.product_uom_unit
        location_id: stock.stock_location_internal_suppliers
        location_dest_id: stock.stock_location_stock
-
  Process the picking
-    
  !python {model: stock.picking}: |
    self.action_confirm(cr, uid, [ref('val_pick3')], context=context)
    self.force_assign(cr, uid, [ref('val_pick3')])
    dic = self.action_process(cr, uid, ref('val_pick3'), context=context)
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    # reduce qty and then split moves
    wiz_obj = self.pool.get(wiz_model)
    wiz_obj.copy_all(cr,uid,[dic['res_id']], context=dic['context'])
    
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      for out in getattr(obj, 'product_moves_in'): # -> because is now IN with average product cost method !!!
        out.write({'cost': 500.0}, context=wiz_c)
    
    self.pool.get(dic['res_model']).copy_all(cr,uid, [dic['res_id']], context=dic['context'])
    self.pool.get(dic['res_model']).do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
    product = self.pool.get('product.product').browse(cr, uid, ref('product_E'))
    assert product.standard_price == 400.00, 'Bad cost price (Expected 400.00 - Result %s) [3]' % product.standard_price
