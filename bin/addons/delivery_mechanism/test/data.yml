-
  In order to make tests, I create some elements in accounting.
-
  I create a fiscalyear
-
  !record {model: account.fiscalyear, id: fiscalyear0-delivery}:
    code: !eval "'FY%s'% (datetime.now().year+10)"
    company_id: base.main_company
    date_start: '2011-01-01'
    date_stop: '2011-12-31'
    name: delivery Fiscal Year 2011
-
  I create the period 000
-
  !record {model: account.period, id: period_000-delivery}:
    company_id: base.main_company
    date_start: '2011-01-01'
    date_stop: '2011-12-31'
    fiscalyear_id: fiscalyear0-delivery
    name: delivery period
    special: 1
- 
  Partner A
- 
  !record {model: res.partner, id: partner_A}:
    name: A
    supplier: true
    customer: true
- 
  Address for Partner A
- 
  !record {model: res.partner.address, id: address_A}:
    partner_id: partner_A
    street: AddressA
-
  Product A
- 
  !record {model: product.product, id: product_A}:
    name: ProdA
    cost_method: average
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: partner_A
    international_status: product_attributes.int_1
-
  Product B
-
  !record {model: product.product, id: product_B}:
    name: ProdB
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: partner_A
    international_status: product_attributes.int_1
-
  Product C
-
  !record {model: product.product, id: product_C}:
    name: ProdC
    cost_method: average
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: partner_A
    international_status: product_attributes.int_1
-
  Product D
-
  !record {model: product.product, id: product_D}:
    name: ProdD
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: partner_A
    international_status: product_attributes.int_1
-
  Product E
-
  !record {model: product.product, id: product_E}:
    name: ProdE
    cost_method: average
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: partner_A
    international_status: product_attributes.int_1
-
  I edit all the journals to include the proprietary instance
-
  !python {model: account.journal}: |
    journal_ids = self.search(cr, uid, [])
    company = self.pool.get('res.company').browse(cr, uid, uid, context=context)
    if company and company.instance_id:
      self.write(cr, uid, journal_ids, {'instance_id': company.instance_id.id})
-
  Location Test for testing the request_location_id on the IR
-
  !record {model: stock.location, id: location_test}:
    name: Location Test
