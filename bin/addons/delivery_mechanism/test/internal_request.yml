-
  Create an Internal Request
-
  !record {model: sale.order, id: ir_1}:
    location_requestor_id: location_test
    delivery_requested_date: '2011-04-13'
    procurement_request: True
-
  I check the Location Requestor id
-
  !python {model: sale.order}: |
    ir_data = self.read(cr, uid, ref("ir_1"), ['location_requestor_id'])
    assert ir_data['location_requestor_id'], 'The Location Requestor is missing'
-
  Create an Internal Request Line (Sale Order Line)
-
  !record {model: sale.order.line, id: irl_1}:
    product_uom: product.product_uom_unit
    product_id: product_A
    order_id: ir_1
    price_unit: 1
    product_uom_qty: 10
    date_planned: '2011-04-13'
    type: make_to_order
-
  I validate the Internal Request
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("ir_1"), 'procurement_validate', cr)
-
  I check the sourcing line
-
  !python {model: sourcing.line}: |
    sl_id = self.search(cr, uid, [('sale_order_id', '=', ref("ir_1"))])
    read_sl= self.read(cr, uid, sl_id, ['supplier'])[0]
    assert read_sl['supplier'], 'The supplier is missing'
-
  I Confirm the Internal Request
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("ir_1"), 'procurement_confirm', cr)
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("irl_1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Process the incoming shipment and check that the default destination_location on the internal picking is the same the requestor_location_id of the IR
-
  !python {model: stock.picking}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    po_obj = self.pool.get('purchase.order')
    move_obj = self.pool.get('stock.move')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("irl_1")], ['procurement_id'], context=context)[0]
    assert data['procurement_id'], 'the procurement is missing, problem in procurement generation'
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # find the IN
    in_ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    move_ids = move_obj.search(cr, uid, [('picking_id', '=', in_ids[0])], context=context)
    dic = self.action_process(cr, uid, in_ids, context=context)
    wiz_obj = self.pool.get(dic['res_model'])
    data_wiz = wiz_obj.read(cr, uid, [dic['res_id']], ['dest_type'], context=dic['context'])[0]
    wiz_obj.copy_all(cr,uid, [dic['res_id']], context=dic['context'])
    wiz_obj.do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
    data = self.read(cr, uid, in_ids,['move_lines'], context=context)[0]
    for move_line in data['move_lines']:
        if move_obj.read(cr, uid, move_line, ['purchase_line_id'])['purchase_line_id']:
            pol_id = move_obj.read(cr, uid, move_line, ['purchase_line_id'])['purchase_line_id'][0]
            int_move = move_obj.search(cr, uid, [('purchase_line_id', '=', pol_id), ('type', '=', 'internal')])
            location_dest_id = move_obj.read(cr, uid, int_move, ['location_dest_id'])
            if location_dest_id:
                location_dest_id = move_obj.read(cr, uid, int_move, ['location_dest_id'])[0]['location_dest_id'][0]
                assert location_dest_id == ref("location_test"), 'The location_dest_id of the stock move should be the same as the location_requestor_id of the IR but it is not'
