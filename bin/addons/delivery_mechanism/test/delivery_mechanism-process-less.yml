-
  Create a Sale Order
-
  !record {model: sale.order, id: so_B}:
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: partner_A
    partner_invoice_id: address_A
    partner_order_id: address_A
    partner_shipping_id: address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
-
  Create a Sale Order Line
-
  !record {model: sale.order.line, id: sol_B1}:
    product_uom: product.product_uom_unit
    product_id: product_A
    order_id: so_B
    price_unit: 1
    product_uom_qty: 10
    date_planned: '2011-04-13'
    type: make_to_order
-
  !record {model: sale.order.line, id: sol_B2}:
    product_uom: product.product_uom_unit
    product_id: product_B
    order_id: so_B
    price_unit: 1
    product_uom_qty: 5
    date_planned: '2011-04-13'
    type: make_to_order
-
  I validate the sale order
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("so_B"), 'order_confirm', cr)
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_B1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # change Invoicing control to From Picking
    self.write(cr, uid, [po_id], {'invoice_method':'picking'}, context=context)
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Process the incoming shipment - reduce both qty - a back order is created
-
  !python {model: stock.picking}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_B1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # find the IN
    in_ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    pick = self.browse(cr, uid, in_ids[0], context=context)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    dic = self.action_process(cr, uid, in_ids, context=context)
    # reduce quantities - in out memory moves
    wiz_obj = self.pool.get(dic['res_model'])
    for obj in wiz_obj.browse(cr, uid, [dic['res_id']], context=context):
      for out in getattr(obj, 'product_moves_%s'%picking_type): # -> because is now IN with average product cost method !!!
        if out.product_id.id == ref("product_A"):
          out.write({'quantity_ordered': 7})
        if out.product_id.id == ref("product_B"):
          out.write({'quantity_ordered': 1})

    wiz_obj.copy_all(cr,uid,[dic['res_id']], context=dic['context'])
    wiz_obj.do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])


    # openERP swap IN -> backorder
    data = self.read(cr, uid, in_ids, ['backorder_id'], context=context)[0]
    new_in_ids = [data['backorder_id'][0]]
    data = self.read(cr, uid, new_in_ids, ['state'], context=context)[0]
    assert data['state'] == 'done', 'the incoming shipment is not done - done - %s'%data['state']
    # assert the backorder
    back_ids = in_ids
    data = self.read(cr, uid, back_ids, ['state'], context=context)[0]
    assert data['state'] == 'assigned', 'the backorder is not assigned - assigned - %s'%data['state']
    # check quantities
    for obj in self.browse(cr, uid, back_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("product_A"):
          assert move.product_qty == 3, 'back order qty is wrong - 10-7=3 - %s'%move.product_qty
        if move.product_id.id == ref("product_B"):
          assert move.product_qty == 4, 'back order qty is wrong - 5-1=4 - %s'%move.product_qty
