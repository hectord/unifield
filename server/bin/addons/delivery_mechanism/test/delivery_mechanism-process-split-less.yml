-
  Create a Sale Order
-
  !record {model: sale.order, id: so_D}:
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: partner_A
    partner_invoice_id: address_A
    partner_order_id: address_A
    partner_shipping_id: address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
-
  Create a Sale Order Line
-
  !record {model: sale.order.line, id: sol_D1}:
    product_uom: product.product_uom_unit
    product_id: product_A
    order_id: so_D
    price_unit: 1
    product_uom_qty: 10
    date_planned: '2011-04-13'
    type: make_to_order
-
  !record {model: sale.order.line, id: sol_D2}:
    product_uom: product.product_uom_unit
    product_id: product_B
    order_id: so_D
    price_unit: 1
    product_uom_qty: 5
    date_planned: '2011-04-13'
    type: make_to_order
-
  I validate the sale order
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("so_D"), 'order_confirm', cr)
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_D1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # change Invoicing control to From Picking
    self.write(cr, uid, [po_id], {'invoice_method':'picking'}, context=context)
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Process the incoming shipment - reduce both qty - a back order is created
-
  !python {model: stock.picking}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_D1")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # find the IN
    in_ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    pick = self.browse(cr, uid, in_ids[0], context=context)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    # process wizard
    dic = self.action_process(cr, uid, in_ids, context=context)
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    # reduce qty and then split moves
    wiz_obj = self.pool.get(wiz_model)
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      for out in getattr(obj, 'product_moves_%s'%picking_type): # -> because is now IN with average product cost method !!!
        # call the split wizard
        dic_split = out.split(context=wiz_c)
        split_model = dic_split['res_model']
        split_ids = [dic_split['res_id']]
        split_c = dic_split['context']
        split_obj = self.pool.get(split_model)
        # depending on the product, we put different quantity in the new move
        if out.product_id.id == ref("product_A"):
          # reduce qty
          out.write({'quantity_ordered': 7}, context=wiz_c)
          split_obj.write(cr, uid, split_ids, {'quantity': 5}, context=split_c)
        if out.product_id.id == ref("product_B"):
          # reduce qty
          out.write({'quantity_ordered': 2}, context=wiz_c)
          split_obj.write(cr, uid, split_ids, {'quantity': 1}, context=split_c)
        # we perform the split
        split_obj.split(cr, uid, split_ids, context=split_c)
    wiz_obj.copy_all(cr,uid,[dic['res_id']], context=dic['context'])
    wiz_obj.do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
    # openERP swap IN -> backorder
    data = self.read(cr, uid, in_ids, ['backorder_id'], context=context)[0]
    back_ids = in_ids
    in_ids = [data['backorder_id'][0]]
    # assert a backorder has been created
    assert in_ids, 'backorder does not exist'
    data = self.read(cr, uid, in_ids, ['state'], context=context)[0]
    assert data['state'] == 'done', 'the incoming shipment is not Done - done - %s'%data['state']
    # assert the backorder
    data = self.read(cr, uid, back_ids, ['state'], context=context)[0]
    assert data['state'] == 'assigned', 'the backorder is not assigned - assigned - %s'%data['state']
    # check the moves in backorder
    a_qty = [3.0]
    b_qty = [3.0]
    for obj in self.browse(cr, uid, back_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    # check the moves in IN
    a_qty = [2.0, 5.0]
    b_qty = [1.0, 1.0]
    for obj in self.browse(cr, uid, in_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    # check the moves in OUT
    a_qty = [5.0, 2.0, 3.0, 0.0, 0.0] # the missing qty is put on a new stock move after assignation
    b_qty = [3.0, 1.0, 1.0, 0.0, 0.0] # same behavior, the missing 3 is placed in the new move
    out_ids = self.search(cr, uid, [('sale_id', '=', ref("so_D"))], context=context)
    # only one OUT for the sale order
    assert len(out_ids) == 2, 'number of out objects is wrong - 2 - %s'%len(out_ids)
    for obj in self.browse(cr, uid, out_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    
