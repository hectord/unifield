-
  In order to test the de-activation of a product,
  we will create a product and try to de-activate it
-
  Create the product P13
-
  !record {model: product.product, id: product13}:
    categ_id: product_cat1
    name: P13
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
-
  Then, we a create a FO
-
  !record {model: sale.order, id: fo3}:
    picking_policy: direct
    invoice_quantity: order
    partner_order_id: customer_address_1
    partner_invoice_id: customer_address_1
    partner_shipping_id: customer_address_1
    partner_id: customer1
    pricelist_id: purchase.list0
    order_type: regular
    order_line:
    - product_uom: product.product_uom_unit
      product_id: product13
      price_unit: 1.50
      product_uom_qty: 1
      name: P13
-
  Then, we try to de-activate this product
-
  !python {model: product.product}: |
    res = self.deactivate_product(cr, uid, ref('product13'))
    assert res == True, "Error occured when the de-activation of the product"
-
  Validate the FO
-
  !python {model: sale.order}: |
    from osv import osv
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    try:
      wf_service.trg_validate(uid, 'sale.order', ref("fo3"), 'order_validated', cr)
      assert False, "Error not raised"
    except osv.except_osv, e:
      pass
