-
  Tests of the splitting line wizard
-
  We create a new UoM
-
  !record {model: product.uom, id: split_uom}:
    category_id: product.product_uom_categ_unit
    name: Split
    factor: 1.0
    rounding: 0.01
-
  We create a new sale order
-
  !record {model: sale.order, id: split_so}:
    name: Split
    company_id: base.main_company
    picking_policy: direct
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
    order_type: regular
-
  We create a line for this sale order
-
  !record {model: sale.order.line, id: split_sol}:
    product_uom: split_uom
    product_id: product2
    order_id: split_so
    price_unit: 3.0
    product_uom_qty: 300
    name: P2
-
  Launch the split order line wizard
-
  !record {model: split.sale.order.line.wizard, id: split_wiz}:
    sale_line_id: split_sol
    original_qty: 300
    new_line_qty: 2.05
-
  Run the splitting
-
  !python {model: split.sale.order.line.wizard}: |
    self.split_line(cr, uid, ref('split_wiz'), context=context)
-
  Check if the SO has now 2 lines with the good quantities
-
  !python {model: sale.order.line}: |
    lines = self.search(cr, uid, [('order_id', '=', ref('split_so'))], context=context)
    assert len(lines) == 2, "The SO must have 2 lines after splitting, but it has %s lines !" % len(lines)
    for l in self.browse(cr, uid, lines, context=context):
      if l.product_uom_qty != 297.95 and l.product_uom_qty != 2.05:
          assert False, "The quantities of SO lines are not correct"
-
  Launch a second time the split order line wizard
-
  !record {model: split.sale.order.line.wizard, id: split_wiz1}:
    sale_line_id: split_sol
    original_qty: 297.95
    new_line_qty: 297.95
-
  Check if the splitting method return an error
-
  !python {model: split.sale.order.line.wizard}: |
     from osv import osv
     try:
       self.split_line(cr, uid, ref('split_wiz1'), context=context)
       raise False, "No error raised when the new qty is equal to the original qty"
     except osv.except_osv, e:
       pass
-
  Change the new qty to have a new qty greater than the original qty
-
  !record {model: split.sale.order.line.wizard, id: split_wiz1}:
    sale_line_id: split_sol
    original_qty: 297.95
    new_line_qty: 400
-
  Check if the splitting method return an error
-
  !python {model: split.sale.order.line.wizard}: |
     from osv import osv
     try:
       self.split_line(cr, uid, ref('split_wiz1'), context=context)
       raise False, "No error raised when the new qty is greater than the original qty"
     except osv.except_osv, e:
       pass
-
  Change the new qty to have a negative new qty
-
  !record {model: split.sale.order.line.wizard, id: split_wiz1}:
    sale_line_id: split_sol
    original_qty: 297.95
    new_line_qty: -10
-
  Check if the splitting method return an error
-
  !python {model: split.sale.order.line.wizard}: |
     from osv import osv
     try:
       self.split_line(cr, uid, ref('split_wiz1'), context=context)
       raise False, "No error raised when the new qty is negative"
     except osv.except_osv, e:
       pass
-
  Change the new qty to have a new qty equal to 0.00
-
  !record {model: split.sale.order.line.wizard, id: split_wiz1}:
    sale_line_id: split_sol
    original_qty: 297.95
    new_line_qty: 0.00
-
  Check if the splitting method return an error
-
  !python {model: split.sale.order.line.wizard}: |
     from osv import osv
     try:
       self.split_line(cr, uid, ref('split_wiz1'), context=context)
       raise False, "No error raised when the new qty is 0.00"
     except osv.except_osv, e:
       pass
-
  Change the new qty to have a new qty equal to 10.00
-
  !record {model: split.sale.order.line.wizard, id: split_wiz1}:
    sale_line_id: split_sol
    original_qty: 297.95
    new_line_qty: 10.00
-
  Check if the splitting method return an error
-
  !python {model: split.sale.order.line.wizard}: |
     from osv import osv
     try:
       self.split_line(cr, uid, ref('split_wiz1'), context=context)
     except osv.except_osv, e:
       raise False, "An error has been raised when the new qty is 10.00"
