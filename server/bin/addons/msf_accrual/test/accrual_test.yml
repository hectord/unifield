-
  In order to test the financing contract,
  we need a lot.
  I create, in order, a account type, ...
-
  !record {model: account.account.type, id: account_account_type_expense0}:
    close_method: none
    code: expense
    name: Expense
    sign: 1
-
  !record {model: account.account.type, id: account_account_type_accrual0}:
    close_method: none
    code: accrual
    name: Accrual
    sign: 1
-
  ...an expense account, ...
-
  !record {model: account.account, id: test_expense}:
    name: "Test Expense"
    code: "TEST"
    user_type: account_account_type_expense0
    type: payable 
-
  ...an accrual account, ...
-
  !record {model: account.account, id: test_accrual}:
    name: "Test Accrual"
    code: "TEST2"
    user_type: account_account_type_accrual0
    type: payable 
    reconcile: True
-
 ...a cost center...
-
  !record {model: account.analytic.account, id: analytic_account_OC1}:
    name: "OC1"
    code: "OC1"
    category: OC
-
  ...an analytical journal, ...
-
  !record {model: account.analytic.journal, id: analytic_accrual_journal}:
    code: AC
    name: Accruals
    type: general
-
  ...a journal, ...
-
  !record {model: account.journal, id: accrual_journal}:
    name: Accruals
    code: AC
    type: accrual
    analytic_journal_id: analytic_accrual_journal
-
  I create an address
-
  !record {model: res.partner.address, id: res_partner_address_msf}:
    name: Médecins Sans Frontières
    street: 9 bis rue de Lyon
    zip: 01630
    city: Saint-Genis-Pouilly
    phone: +33 1 23 45 67 89
    email: essai@msf.org
-
 ...an employee...
-
  !record {model: hr.employee, id: employee_arthur_dent}:
    address_home_id: res_partner_address_msf
    company_id: base.main_company
    gender: male
    marital: hr.hr_employee_marital_status_single
    name: Arthur Dent
    user_id: base.user_root
-
  I set the company currency's rate to 1 for the move
-
  !record {model: res.currency.rate, id: currency_rate_test_3}:
    name: !eval "'%s-01-01' %(datetime.now().year+1)"
    rate: 1.00
    currency_id: base.CHF
-
  I set another currency's rate to 100 for the move
-
  !record {model: res.currency.rate, id: currency_rate_test_4}:
    name: !eval "'%s-01-01' %(datetime.now().year+1)"
    rate: 100.00
    currency_id: base.EUR
-
  ...a fiscal year, ...
-
  !record {model: account.fiscalyear, id: account_fiscalyear_fiscalyear0}:
    code: !eval "'FY%s'% (datetime.now().year+1)"
    company_id: base.main_company
    date_start: !eval "'%s-01-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year+1)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year+1)"
-
  ... and a period.
-
  !record {model: account.period, id: account_period_mar0}:
    company_id: base.main_company
    date_start: !eval "'%s-03-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-03-31' %(datetime.now().year+1)"
    fiscalyear_id: account_fiscalyear_fiscalyear0
    name: !eval "'Mar %s' %(datetime.now().year+1)"
    special: 1
    state: draft
-
  ... and the next period.
-
  !record {model: account.period, id: account_period_apr0}:
    company_id: base.main_company
    date_start: !eval "'%s-04-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-04-30' %(datetime.now().year+1)"
    fiscalyear_id: account_fiscalyear_fiscalyear0
    name: !eval "'Apr %s' %(datetime.now().year+1)"
    special: 1
    state: draft
-
  ... and a distribution.
-
  !record {model: analytic.distribution, id: distribution_test}:
    cost_center_lines: 
    - analytic_id: analytic_account_OC1
      percentage: 100
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
    funding_pool_lines:
    - analytic_id: analytic_distribution.analytic_account_msf_private_funds
      cost_center_id: analytic_account_OC1
      percentage: 100
      currency_id: base.CHF
      date: !eval "'%s-03-12' %(datetime.now().year+1)"
-
  I create an accrual line with all of this.
-
  !record {model: msf.accrual.line, id: accrual_line_test}:
    period_id: account_period_mar0
    expense_account_id: test_expense
    accrual_account_id: test_accrual
    description: 'test description'
    reference: 'test reference'
    currency_id: base.CHF
    date: !eval "'%s-03-12' %(datetime.now().year+1)"
    document_date: !eval "'%s-03-12' %(datetime.now().year+1)"
    accrual_amount: 4242.0
    third_party_type: 'hr.employee'
    employee_id: employee_arthur_dent
    analytic_distribution_id: distribution_test
    state: draft
-
  Validate it
-
  !python {model: wizard.accrual.validation}: |
    self.button_confirm(cr, uid, [], context={'active_ids': [ref("accrual_line_test")] })
-
  Assert that line is posted
-
  !python {model: msf.accrual.line}: |
    accrual_line = self.browse(cr, uid, ref("accrual_line_test"), context={})
    assert accrual_line.state == 'posted', ("Line was not posted!")
    
