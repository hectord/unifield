-
  In order to test dates in Sale Order, I create a sale order
  and run actions to pass into each step of the workflow and test consistency
  of dates
-
  Check Creation date values
-
  I create a Sale Order
-
  !record {model: sale.order, id: so1}:
    name: 'SO/21'
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
-
  Check if default value is good
-
  !assert {model: sale.order, id: so1}:
    - date_order == time.strftime('%Y-%m-%s'), "Default value of Creation date is wrong"
-
  Check Creation date modification in an opening period
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    try:
      self.write(cr, uid, ref('so1'), {'date_order': time.strftime('%Y-%m-%d')})
    except osv.except_osv, e:
      assert False, "Error when creation date is in an opened accounting period : %s" %e
-
  Check Creation date modification in an closed period
-
  !python {model: sale.order}: |
    try:
      self.write(cr, uid, ref('so1'), {'date_order': '2007-01-01'})
      assert False, "Error when creation date is in a non opened accounting period"
    except Exception, e:
      pass
-
  Check Delivery Requested date default value
-
  !assert {model: sale.order, id: so1}:
    - delivery_requested_date == False, "Error on default value for Delivery Requested Date"
-
  Check Estimated transport lead-time default value
-
  !assert {model: sale.order, id: so1}:
    - est_transport_lead_time == 0, "Error on default value for Estimated transport lead-time"
-
  Check Ready to ship date default value
-
  !assert {model: sale.order, id: so1}:
    - ready_to_ship_date == False, "Error on default value for Ready To Ship Date"
-
  Check Shipment date defautl value
-
  !assert {model: sale.order, id: so1}:
    - shipment_date == False, "Error on default value for Shipment date"
-
  Launch the partner selection and check generated value for Delivery Requested Date
-
  !python {model: sale.order}: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    res = self.onchange_partner_id(cr, uid, [ref('so1')], ref('supplier3'), '2007-12-01', context=context)
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=30)).strftime('%Y-%m-%d')
    # See UF-215
    #assert res['value']['delivery_requested_date'] == req_date, "Error on partner selection for the Delivery Requested Date"
    #assert res['value']['ready_to_ship_date'] == req_date, "Error on partner selection for the Ready To Ship Date"
    #assert res['value']['delivery_confirmed_date'] == req_date, "Error on partner selection for the Delivery Confirmed Date"
-
  Overwrite the Delivery Requested Date with a date in past
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    try:
      self.write(cr, uid, ref('so1'), {'delivery_requested_date': '2007-01-01'})
      #assert False, "Error on writing Delivery Requested Date in past" 
    except osv.except_osv, e:
        res = self.onchange_requested_date(cr, uid, [ref('so1')], ref('supplier3'), '2007-01-01', '2007-01-01', 2, context=context)
        assert res.get('warning', False), "Error on selecting Delivery Requested Date in past" 
-
  Overwrite the Delivery Requested Date with a date in future ( < today + 24 months)
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    res = self.onchange_requested_date(cr, uid, [ref('so1')], ref('supplier3'), '2007-01-01', two_days, 2, context=context)
    assert not res.get('warning', False), "Error on selecting Delivery Requested Date in future ( < today + 24 months)"
    try:
      self.write(cr, uid, ref('so1'), {'delivery_requested_date': two_days})
    except osv.except_osv, e:
      pass
      #assert False, "Error on writing Delivery Requested Date in future ( < today + 24 months)"
-
  Overwrite the Delivery Requested Date with a date in future ( > today + 24 months)
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    three_years = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(years=3)).strftime('%Y-%m-%d')
    try:
      self.write(cr, uid, ref('so1'), {'delivery_requested_date': three_years})
      #assert False, "Error on writing Delivery Requested Date in future ( > today + 24 months)" 
    except osv.except_osv, e:
        res = self.onchange_requested_date(cr, uid, [ref('so1')], ref('supplier3'), '2007-01-01', three_years, 2, context=context)
        assert res.get('warning', False), "Error on selecting Delivery Requested Date in future ( > today + 24 months)"
-
  Overwrite the Delivery Confirmed Date with a date in past
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    try:
      self.write(cr, uid, ref('so1'), {'delivery_confirmed_date': '2007-01-01'})
      #assert False, "Error on writing Delivery Confirmed Date in past" 
    except osv.except_osv, e:
        res = self.onchange_requested_date(cr, uid, [ref('so1')], ref('supplier3'), '2007-01-01', two_days, 3, context=context)
#        assert res.get('warning', False), "Error on selecting Delivery Confirmed Date in past" 
-
  Overwrite the Delivery Confirmed Date with a date in future
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    three_years = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(years=3)).strftime('%Y-%m-%d')
    res = self.onchange_requested_date(cr, uid, [ref('so1')], ref('supplier3'), '2007-01-01', two_days, 3, context=context)
    assert not res.get('warning', False), "Error on selecting Delivery Confirmed Date in future"
    try:
      self.write(cr, uid, ref('so1'), {'delivery_confirmed_date': three_years})
    except osv.except_osv, e:
      assert False, "Error on writing Delivery Confirmed Date in future"
-
  Check the Ready to Ship Date value when no transport lead time
-
  !assert {model: sale.order, id: so1}:
    - ready_to_ship_date == False, "Wrong value for Ready To Ship Date"
-
  Check the Ready To Ship Date value estimated transport lead time is changing
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    ship_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') - relativedelta(days=28)).strftime('%Y-%m-%d')
    try:
      self.write(cr, uid, ref('so1'), {'ready_to_ship_date': '2007-01-01'})
      #assert False, "Error on writing Ready To Ship Date in past"
    except osv.except_osv, e:
      res = self.onchange_transport_lt(cr, uid, [ref('so1')], two_days, 3, context=context)
      assert res.get('value', False) and res['value'].get('ready_to_ship_date', False) == ship_date, "Wrong value for Ready To Ship Date when select Est. transport Lead Time"
      try:
        self.write(cr, uid, ref('so1'), {'ready_to_ship_date': two_days})
      except osv.except_osv, e:
        assert False, "Error on writing Ready To Ship date > Creation date"
-
  Check values for Shipment date with non internation order type
-
  !python {model: sale.order}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    two_days = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=2)).strftime('%Y-%m-%d')
    ship_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') - relativedelta(days=28)).strftime('%Y-%m-%d')
    res = self.internal_type_change(cr, uid, [ref('so1')], 'international', two_days, False)
    #assert res.get('value', False) and res['value'].get('shipment_date', False) == two_days, "Error when selecting International as Order type"
-
    I create a line for P1 in SO 1
-
  !record {model: sale.order.line, id: so1_line1}:
    product_uom: product.product_uom_unit
    product_id: product1
    order_id: so1
    price_unit: 1.30
    product_uom_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
    Check if the Delivery Requested Date change with a value minor than the header date
-
  !python {model: sale.order.line}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    three_years = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(years=3)).strftime('%Y-%m-%d')
    try:
      self.write(cr, uid, ref('so1_line1'), {'date_planned': '2007-01-01'})
      assert True, "Error when Delivery Requested Date with wrong value raise an error on writing"
    except osv.except_osv, e:
      try:
        self.write(cr, uid, ref('so1_line1'), {'date_planned': three_years})
        res = self.dates_change(cr, uid, [ref('so1_line1')], '2007-01-01', time.strftime('%Y-%m-%d'))
        assert res.get('warning', False), "Error when select a requested date for a line minor than the header date"
      except osv.except_osv, e:
        assert False, "Error when Delivery Requested Date with good value raise an error on writing"
-
    Check if the Delivery Confirmed Date change with a value minor than the header date
-
  !python {model: sale.order.line}: |
    from osv import osv
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    three_years = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(years=3)).strftime('%Y-%m-%d')
    try:
      self.write(cr, uid, ref('so1_line1'), {'confirmed_delivery_date': '2007-01-01'})
      # See UF-215
      #assert False, "Error when Delivery Confirmed Date with wrong value doesn't raise an error on writing"
    except osv.except_osv, e:
      try:
        self.write(cr, uid, ref('so1_line1'), {'confirmed_delivery_date': three_years})
        res = self.dates_change(cr, uid, [ref('so1_line1')], time.strftime('%Y-%m-%d'), '2007-01-01')
        assert res.get('warning', False), "Error when select a confirmed date for a line minor than the header date"
      except osv.except_osv, e:
        assert False, "Error when Delivery Confirmed Date with good value raise an error on writing"
