-
  Create a Sale Order 1 (SO1) in English
-
  !record {model: sale.order, id: so1}:
    name: My FO test
    company_id: base.main_company
    date_order: '2011-04-01'
    delivery_requested_date: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: partner_A
    partner_invoice_id: address_A
    partner_order_id: address_A
    partner_shipping_id: address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
-
  Open the import wizard for the SO in English
-
  !python {model: sale.order}: |
    import base64, logging
    from spreadsheet_xml.spreadsheet_xml import SpreadsheetXML
    # we set the lang to English to test the translation of the template's header columns
    lang = 'en_MF'
    context.update({'yml_test': True, 'lang': lang})
    wiz_values = self.wizard_import_fo_line(cr, uid, ref('so1'), context)
    res_model = wiz_values['res_model']
    assert res_model == 'wizard.import.fo.line', ("The wizard model should be 'wizard.import.fo.line' and it is %s" % res_model)
    logging.getLogger('tests').log(logging.TEST, 'We check the header of the template (translation)')
    template = self.pool.get(res_model).read(cr, uid, wiz_values['res_id'], ['file'])['file']
    fileobj = SpreadsheetXML(xmlstring=base64.decodestring(template))
    rows = fileobj.getRows()
    column_header = []
    for first_row in rows:
        for cell in range(len(first_row)):
            cell_data = first_row.cells[cell].data
            column_header.append(cell_data)
        break
    expected_header = ['Product Code', 'Product Description', 'Quantity', 'UoM', 'Price', 'Delivery requested date', 'Currency', 'Comment']
    assert column_header==expected_header, ("Wrong header, it should be %s and it is %s" % (expected_header, column_header))
    assert wiz_values['context'].get('active_id') == ref("so1"), ("The reference to the fo doesn't exist")
    self.pool.get(res_model).cancel(cr, uid, wiz_values['res_id'], context)
-
  Import the file through the wizard for the SO
-
  !python {model: wizard.import.fo.line}: |
    import addons, base64, logging
    wiz_ids = self.search(cr, uid, [('fo_id', '=', ref('so1'))])
    assert len(wiz_ids) == 1, ("There should be one wizard open at a time")
    # we set the lang to French and take the file to import accordingly
    lang = 'en_MF'
    # get the file path
    file_path = addons.get_module_resource('msf_doc_import','test','import_files_for_testing', 'so.xml')
    file = open(file_path, 'r')
    file64 = base64.b64encode(file.read())
    logging.getLogger('tests').log(logging.TEST, 'We write the file to import in the wizard in English.')
    self.write(cr, uid, wiz_ids, {'file': file64}, context)
    context.update({'yml_test': True, 'lang': lang})
    logging.getLogger('tests').log(logging.TEST, 'We import the file.')
    self.import_file(cr, uid, wiz_ids, context)
    self.close_import(cr, uid, wiz_ids, context)
-
  Check the lines imported on the fo in English
-
  !python {model: sale.order}: |
    import logging
    fo = self.browse(cr, uid, ref('so1'), context)
    count_line_imported = len(fo.order_line)
    assert count_line_imported==16, ("The number of lines imported should be 16 but it is %s" % count_line_imported)
    count_line_with_errors = len([line for line in fo.order_line if line.to_correct_ok])
    assert count_line_with_errors==15, ("The number of lines with errors should be 15 but it is %s" % count_line_with_errors)
    sol_obj = self.pool.get('sale.order.line')
    ProdA_ids = sol_obj.search(cr, uid, [('order_id', '=', fo.id), ('default_code', '=', 'ProdA')], context=context)
    read_ProdA = sol_obj.read(cr, uid, ProdA_ids, ['price_unit', 'product_uom', 'type', 'date_planned', 'product_uom_qty', 'functional_currency_id', 'comment'], context)[0]
    logging.getLogger('tests').log(logging.TEST, "Check the price of the product ('ProdA') if it was fulfill.")
    assert read_ProdA['price_unit'] == 3.15, ("The price was defined in the xml file, it must be this one (3.15) but is is %s" % read_ProdA['price_unit'])
    logging.getLogger('tests').log(logging.TEST, "Check the UOM of the product if it was fulfill and right ('ProdA').")
    uom_unit = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'product', 'product_uom_unit')[1]
    assert read_ProdA['product_uom'][0] == uom_unit, ("The UOM was not defined in the xml file, it should be this one (PCE)")
    logging.getLogger('tests').log(logging.TEST, "Check the procurement method of the line after the import ('ProdA')")
    assert read_ProdA['type'] == 'make_to_stock', ("The procurement method should be the one of the product ProdA (make_to_stock)")
    logging.getLogger('tests').log(logging.TEST, "Check the date of the line if it was fulfill and right ('ProdA').")
    assert read_ProdA['date_planned']=='2012-08-12', ("The date was not correct it should be 2012-08-12")
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the line if it was fulfill ('ProdA').")
    assert read_ProdA['product_uom_qty']==12, ("The quantity was not correct, it should be 12 and it was %s" % read_ProdA['product_uom_qty'])
    logging.getLogger('tests').log(logging.TEST, "Check the currency of the line if it was fulfill ('ProdA').")
    curr_eur = self.pool.get('res.currency').search(cr, uid, [('name', '=', 'EUR')], context=context)[0]
    assert read_ProdA['functional_currency_id'][0]==curr_eur, ("The currency was not correct, it should be EUR")
    logging.getLogger('tests').log(logging.TEST, "Check the comment of the line if it was fulfill ('ProdA').")
    assert read_ProdA['comment']=='test comment fo', ("The comment was not correct, it should be 'test comment fo'")
    
    ProdB_ids = sol_obj.search(cr, uid, [('order_id', '=', fo.id), ('default_code', '=', 'ProdB')], context=context)
    read_ProdB = sol_obj.read(cr, uid, ProdB_ids, ['price_unit', 'product_uom', 'type', 'date_planned', 'product_uom_qty', 'functional_currency_id'], context)[0]
    logging.getLogger('tests').log(logging.TEST, "Check the price of the product ('ProdB') if it was empty")
    assert read_ProdB['price_unit'] == 187.0, ("The price was not defined in the xml file, it should be the one of the product ProdB (187.0) but is is %s" % read_ProdB['price_unit'])
    logging.getLogger('tests').log(logging.TEST, "Check the UOM of the product if it was empty ('ProdB')")
    uom_km = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'product', 'product_uom_km')[1]
    assert read_ProdB['product_uom'][0] == uom_km, ("The UOM was not defined in the xml file, it should be the one of the product ProdB (km)")
    logging.getLogger('tests').log(logging.TEST, "Check the procurement method of the line after the import('ProdB')")
    assert read_ProdB['type'] == 'make_to_order', ("The procurement method should be the one of the product ProdB (make_to_order)")
    logging.getLogger('tests').log(logging.TEST, "Check the date of the line if it was empty ('ProdB').")
    assert read_ProdB['date_planned']=='2011-04-13', ("The date was not correct it should be '2011-04-13'")
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the line if it was empty ('ProdB').")
    assert read_ProdB['product_uom_qty']==1, ("The quantity was empty, it should be 1 and it was %s. ('ProdB')" % read_ProdB['product_uom_qty'])
    logging.getLogger('tests').log(logging.TEST, "Check the currency of the line if it was empty ('ProdB').")
    assert read_ProdB['functional_currency_id'][0]==fo.pricelist_id.currency_id.id, ("The currency was not correct, it should be the currency of the pricelist of the Field Order")
