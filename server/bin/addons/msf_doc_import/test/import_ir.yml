-
  Create an Internal Request 1 (IR1) in English
-
  !record {model: sale.order, id: ir1}:
    name: My IR test
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_quantity: order
    order_policy: manual
    partner_id: partner_A
    partner_invoice_id: address_A
    partner_order_id: address_A
    partner_shipping_id: address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    procurement_request: True
-
  Open the import wizard for the IR in English
-
  !python {model: sale.order}: |
    import base64, logging
    from spreadsheet_xml.spreadsheet_xml import SpreadsheetXML
    # we set the lang to English to test the translation of the template's header columns
    lang = 'en_MF'
    context.update({'yml_test': True, 'lang': lang})
    wiz_values = self.wizard_import_ir_line(cr, uid, ref('ir1'), context)
    res_model = wiz_values['res_model']
    assert res_model == 'wizard.import.ir.line', ("The wizard model should be 'wizard.import.ir.line' and it is %s" % res_model)
    logging.getLogger('tests').log(logging.TEST, 'We check the header of the template (translation)')
    template = self.pool.get(res_model).read(cr, uid, wiz_values['res_id'], ['file'])['file']
    fileobj = SpreadsheetXML(xmlstring=base64.decodestring(template))
    rows = fileobj.getRows()
    column_header = []
    for first_row in rows:
        for cell in range(len(first_row)):
            cell_data = first_row.cells[cell].data
            column_header.append(cell_data)
        break
    expected_header = ['Product Code', 'Product Description', 'Quantity', 'Cost Price', 'UoM', 'Currency', 'Comment']
    assert column_header==expected_header, ("Wrong header, it should be %s and it is %s" % (expected_header, column_header))
    assert wiz_values['context'].get('active_id') == ref("ir1"), ("The reference to the IR doesn't exist")
    self.pool.get(res_model).cancel(cr, uid, wiz_values['res_id'], context)
-
  Import the file through the wizard for the IR in English
-
  !python {model: wizard.import.ir.line}: |
    import addons, base64, logging
    wiz_ids = self.search(cr, uid, [('fo_id', '=', ref('ir1'))])
    assert len(wiz_ids) == 1, ("There should be one wizard open at a time")
    # we set the lang to English and take the file to import accordingly
    lang = 'en_MF'
    # get the file path
    file_path = addons.get_module_resource('msf_doc_import','test','import_files_for_testing', 'ir.xml')
    file = open(file_path, 'r')
    file64 = base64.b64encode(file.read())
    logging.getLogger('tests').log(logging.TEST, 'We write the file to import in the wizard in English.')
    self.write(cr, uid, wiz_ids, {'file': file64}, context)
    context.update({'yml_test': True, 'lang': lang})
    logging.getLogger('tests').log(logging.TEST, 'We import the file.')
    self.import_file(cr, uid, wiz_ids, context)
    self.close_import(cr, uid, wiz_ids, context)
-
  Check the lines imported on the IR in English
-
  !python {model: sale.order}: |
    import logging
    ir = self.browse(cr, uid, ref('ir1'), context)
    count_line_imported = len(ir.order_line)
    assert count_line_imported==12, ("The number of lines imported should be 12 but it is %s" % count_line_imported)
    count_line_with_errors = len([line for line in ir.order_line if line.to_correct_ok])
    assert count_line_with_errors==11, ("The number of lines with errors should be 11 but it is %s" % count_line_with_errors)
    sol_obj = self.pool.get('sale.order.line')
    ProdA_ids = sol_obj.search(cr, uid, [('order_id', '=', ir.id), ('default_code', '=', 'ProdA')], context=context)
    read_ProdA = sol_obj.read(cr, uid, ProdA_ids, ['product_uom_qty', 'product_uom', 'functional_currency_id', 'comment'], context)[0]
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the product ('ProdA') if it was fulfill.")
    assert read_ProdA['product_uom_qty'] == 24, ("The quantity was defined in the xml file, it must be this one (24) but is is %s" % read_ProdA['product_uom_qty'])
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the product ('ProdA') if it was fulfill.")
    uom_unit = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'product', 'product_uom_unit')[1]
    assert read_ProdA['product_uom'][0] == uom_unit, ("The product_uom was defined in the xml file, it must be this one (PCE) but is is %s" % read_ProdA['product_uom'])
    logging.getLogger('tests').log(logging.TEST, "Check the currency of the line if it was fulfill ('ProdA').")
    curr_eur = self.pool.get('res.currency').search(cr, uid, [('name', '=', 'EUR')], context=context)[0]
    assert read_ProdA['functional_currency_id'][0]==curr_eur, ("The currency was not correct, it should be EUR")
    logging.getLogger('tests').log(logging.TEST, "Check the comment of the line if it was fulfill ('ProdA').")
    assert read_ProdA['comment']=='Comment IR', ("The comment was not correct, it should be 'Comment IR'")
    
    ProdB_ids = sol_obj.search(cr, uid, [('order_id', '=', ir.id), ('default_code', '=', 'ProdB')], context=context)
    read_ProdB = sol_obj.read(cr, uid, ProdB_ids, ['product_uom_qty', 'product_uom', 'functional_currency_id', 'comment'], context)[0]
    logging.getLogger('tests').log(logging.TEST, "Check the quantity of the line if it was empty ('ProdB').")
    assert read_ProdB['product_uom_qty']==1, ("The quantity was empty, it should be 1 and it was %s. ('ProdB')" % read_ProdB['product_uom_qty'])
    uom_km = self.pool.get('ir.model.data').get_object_reference(cr, uid, 'product', 'product_uom_km')[1]
    assert read_ProdB['product_uom'][0] == uom_km, ("The UOM was not defined in the xml file, it should be the one of the product ProdB (km)")
    logging.getLogger('tests').log(logging.TEST, "Check the currency of the line if it was empty ('ProdB').")
    assert read_ProdB['functional_currency_id'][0]==ir.pricelist_id.currency_id.id, ("The currency was not correct, it should be the currency of the pricelist of the Field Order")
