-
  I create a Sale Order to follow
-
  !record {model: sale.order, id: so1}:
    name: Regular1
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: customer1_addr
    partner_invoice_id: customer1_addr
    partner_shipping_id: customer1_addr
    partner_id: customer1
    pricelist_id: product.list0
    order_type: regular
    order_line:
      - name: P1
        price_unit: 6000
        product_uom: product.product_uom_unit
        product_uom_qty: 5.0
        state: draft
        delay: 7.0
        product_id: product1
        product_uos_qty: 5.0
        th_weight: 0.0
        type: make_to_order
      - name: P4
        price_unit: 6000
        product_uom: product.product_uom_unit
        product_uom_qty: 2.0
        state: draft
        delay: 7.0
        product_id: product4
        product_uos_qty: 2.0
        th_weight: 0.0
        type: make_to_order
      - name: P2
        price_unit: 200
        product_uom: product.product_uom_unit
        product_uom_qty: 1.0
        state: draft
        delay: 7.0
        product_id: product2
        product_uos_qty: 1.0
        th_weight: 0.0
        type: make_to_stock
      - name: P3
        price_unit: 100
        product_uom: product.product_uom_unit
        product_uom_qty: 3.0
        state: draft
        delay: 7.0
        product_id: product3
        product_uos_qty: 3.0
        th_weight: 0.0
        type: make_to_stock
-
  I create a follow-up
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('sales_followup.so1'),
               'active_ids': [ref('sales_followup.so1')]}
    res = self.run(cr, uid, [ref('sales_followup.action_sale_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  I check the creation of the wizard
-
  !python {model: sale.order.followup}: |
    assert len(self.search(cr, uid, [])) == 1, "Wrong number of created wizard"
-
  (Step 1) I check if the wizard is related to the sale order and if the information is ok
-
  !python {model: sale.order.followup}: |
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('sales_followup.so1'), "The created wizard is not linked to the Sale Order (1)"
        assert wiz.state == 'Draft', "The state on the wizard is different than the state of the Sale Order (1)"
        assert len(wiz.line_ids) == 4, "Number of lines in the follow-up not corresponding to the number of lines in the sale order (1)"
        for line in wiz.line_ids:
            if line.product_id.id == ref('product1'):
              assert line.sourced_ok == 'No', "Sourced is not equal to 'No' (1/P1)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (1/P1)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)'  (1/P1)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (1/P1)"
              assert line.purchase_status == 'No order (0)', "The purchase status is different than 'No order (0)' (1/P1)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (1/P1)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (1/P1)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (1/P1)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (1/P1)"
              assert len(line.outgoing_ids) == 0, "Number of outgoing deliveries is different than 0 (1/P1)"
              assert line.outgoing_status == 'No deliveries (0)', "Outgoing status is different than 'No deliveries (0)' (1/P1)"
            
            if line.product_id.id == ref('product2'):
              assert line.sourced_ok == 'No', "Sourced is not equal to 'No' (1/P2)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (1/P2)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (1/P2)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (1/P2)"              
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (1/P2)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (1/P2)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (1/P2)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (1/P2)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (1/P2)"
              assert len(line.outgoing_ids) == 0, "Number of outgoing deliveries is different than 0 (1/P2)"
              assert line.outgoing_status == 'No deliveries (0)', "Outgoing status is different than 'No deliveries (0)' (1/P2)"
              
            if line.product_id.id == ref('product3'):
              assert line.sourced_ok == 'No', "Sourced is not equal to 'No' (1/P3)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (1/P3)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (1/P3)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (1/P3)"
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (1/P3)"              
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (1/P3)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (1/P3)"
              assert line.product_available == 'Waiting (2000.0)', "The product availability is not 'Waiting (2000.0)' (1/P3)"
              assert line.available_qty == 2000.0, "The available qty is not equal to 2000.00 (1/P3)"
              assert len(line.outgoing_ids) == 0, "Number of outgoing deliveries is different than 0 (1/P3)"
              assert line.outgoing_status == 'No deliveries (0)', "Outgoing status is different than 'No deliveries (0)' (1/P3)"
             
            if line.product_id.id == ref('product4'):
              assert line.sourced_ok == 'No', "Sourced is not equal to 'No' (1/P4)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (1/P4)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (1/P4)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (1/P4)"
              assert line.purchase_status == 'No order (0)', "The purchase status is different than 'No order (0)' (1/P4)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (1/P4)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (1/P4)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (1/P4)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (1/P4)"
              assert len(line.outgoing_ids) == 0, "Number of outgoing deliveries is different than 0 (1/P4)"
              assert line.outgoing_status == 'No deliveries (0)', "Outgoing status is different than 'No deliveries (0)' (1/P4)"

    self.unlink(cr, uid, wiz_ids)
-
  I confirm the sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: so1}

-
  I create again a wizard
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('sales_followup.so1'),
               'active_ids': [ref('sales_followup.so1')]}
    res = self.run(cr, uid, [ref('sales_followup.action_sale_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  (Step 2) I check if the wizard is related to the sale order and if the information is ok
-
  !python {model: sale.order.followup}: |
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('sales_followup.so1'), "The created wizard is not linked to the Sale Order (2)"
        assert len(wiz.line_ids) == 4, "Number of lines in the follow-up not corresponding to the number of lines in the sale order (2)"
        
        for line in wiz.line_ids:
            if line.product_id.id == ref('product1'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (2/P1)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (2/P1)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (2/P1)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (2/P1)"
              assert line.purchase_status == 'No order (0)', "The purchase status is different than 'No order (0)' (2/P1)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (2/P1)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (2/P1)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (2/P1)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (2/P1)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (2/P1)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (2/P1)"
            
            if line.product_id.id == ref('product2'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (2/P2)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (2/P2)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (2/P2)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (2/P2)"              
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (2/P2)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (2/P2)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (2/P2)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (2/P2)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (2/P2)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (2/P2)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)'(2/P2)"
              
            if line.product_id.id == ref('product3'):              
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (2/P3)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (2/P3)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (2/P3)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (2/P3)"
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (2/P3)"              
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (2/P3)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (2/P3)"
              assert line.product_available == 'Available (2000.0)', "The product availability is not 'Available (2000.0)' (2/P3)"
              assert line.available_qty == 2000.0, "The available qty is not equal to 2000.00 (2/P3)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (2/P3)"
              assert line.outgoing_status == 'Available (1)', "Outgoing status is different than 'Waiting (1)' (2/P3)"
             
            if line.product_id.id == ref('product4'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (2/P4)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (2/P4)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (2/P4)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (2/P4)"
              assert line.purchase_status == 'No order (0)', "The purchase status is different than 'No order (0)' (2/P4)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (2/P4)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (2/P4)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (2/P4)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (2/P4)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (2/P4)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (2/P4)"
    self.unlink(cr, uid, wiz_ids)
-
  I run the scheduler.
-
  !python  {model: procurement.order}: |
    self.run_scheduler(cr, uid , context={'update_mode':'init'})
-
  I create again a wizard
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('sales_followup.so1'),
               'active_ids': [ref('sales_followup.so1')]}
    res = self.run(cr, uid, [ref('sales_followup.action_sale_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  (Step 3) I check if the wizard is related to the sale order and if the information is ok
-
  !python {model: sale.order.followup}: |
    import netsvc
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('sales_followup.so1'), "The created wizard is not linked to the Sale Order (3)"
        assert len(wiz.line_ids) == 4, "Number of lines in the follow-up not corresponding to the number of lines in the sale order (3)"
        
        for line in wiz.line_ids:
            if line.product_id.id == ref('product1'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (3/P1)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (3/P1)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (3/P1)"
              assert len(line.purchase_ids) == 1, "Number of PO is different than 0 (3/P1)"
              assert line.purchase_status == 'Draft (1)', "The purchase status is different than 'Draft (1)' (3/P1)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (3/P1)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (3/P1)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (3/P1)"
              assert line.available_qty == 0.0, "The available qty is not equal to 0.00 (3/P1)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (3/P1)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (3/P1)"
              
              for quotation in line.purchase_ids:
                for o_line in quotation.order_line:
                    self.pool.get('purchase.order.line').write(cr, uid, o_line.id, {'price_unit': 6000})
                wf_service = netsvc.LocalService("workflow")
                wf_service.trg_validate(uid, 'purchase.order', quotation.id, 'purchase_confirm', cr)
            
            if line.product_id.id == ref('product2'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (3/P2)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (3/P2)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (3/P2)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (3/P2)"              
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (3/P2)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (3/P2)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (3/P2)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (3/P2)"
              assert line.available_qty == 0.0, "The available qty is not equal to 0.00 (3/P2)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (3/P2)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (3/P2)"
              
            if line.product_id.id == ref('product3'):              
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (3/P3)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (3/P3)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (3/P3)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (3/P3)"
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (3/P3)"              
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (3/P3)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (3/P3)"
              assert line.product_available == 'Available (2000.0)', "The product availability is not 'Available (2000.0)' (3/P3)"
              assert line.available_qty == 2000.0, "The available qty is not equal to 2000.00 (3/P3)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (3/P3)"
              assert line.outgoing_status == 'Available (1)', "Outgoing status is different than 'Available (1)' (3/P3)"
             
            if line.product_id.id == ref('product4'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (3/P4)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (3/P4)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (3/P4)"
              assert len(line.purchase_ids) == 1, "Number of PO is different than 1 (3/P4)"
              assert line.purchase_status == 'Draft (1)', "The purchase status is different than 'Draft (1)' (3/P4)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (3/P4)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (3/P4)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (3/P4)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (3/P4)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (3/P4)"
              
              for quotation in line.purchase_ids:
                for o_line in quotation.order_line:
                    self.pool.get('purchase.order.line').write(cr, uid, o_line.id, {'price_unit': 6000})
                wf_service = netsvc.LocalService("workflow")
                wf_service.trg_validate(uid, 'purchase.order', quotation.id, 'purchase_confirm', cr)
        
    self.unlink(cr, uid, wiz_ids)
-
  I create again a wizard
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('sales_followup.so1'),
               'active_ids': [ref('sales_followup.so1')]}
    res = self.run(cr, uid, [ref('sales_followup.action_sale_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  (Step 4) I check if the wizard is related to the sale order and if the information is ok
-
  !python {model: sale.order.followup}: |
    import netsvc
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('sales_followup.so1'), "The created wizard is not linked to the Sale Order (4)"
        assert len(wiz.line_ids) == 4, "Number of lines in the follow-up not corresponding to the number of lines in the sale order (4)"
        
        for line in wiz.line_ids:
            
            if line.product_id.id == ref('product1'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (4/P1)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (4/P1)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (4/P1)"
              assert len(line.purchase_ids) == 1, "Number of PO is different than 1 (4/P1)"
              assert line.purchase_status == 'Validated (1)', "The purchase status is different than 'Validated (1)' (4/P1)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (4/P1)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (4/P1)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (4/P1)"
              assert line.available_qty == 0.0, "The available qty is not equal to 0.00 (4/P1)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (4/P1)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (4/P1)"
              
            if line.product_id.id == ref('product2'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (4/P2)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (4/P2)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (4/P2)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (4/P2)"              
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (4/P2)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (4/P2)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (4/P2)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (4/P2)"
              assert line.available_qty == 0.0, "The available qty is not equal to 0.00 (4/P2)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (4/P2)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (4/P2)"
              
            if line.product_id.id == ref('product3'):              
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (4/P3)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (4/P3)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (4/P3)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (4/P3)"
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (4/P3)"              
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (4/P3)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (4/P3)"
              assert line.product_available == 'Available (2000.0)', "The product availability is not 'Available (2000.0)' (4/P3)"
              assert line.available_qty == 2000.0, "The available qty is not equal to 2000.00 (4/P3)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (4/P3)"
              assert line.outgoing_status == 'Available (1)', "Outgoing status is different than 'Available (1)' (4/P3)"
              for move in line.outgoing_ids:
                  self.pool.get('stock.move').action_assign(cr, uid, [move.id])
             
            if line.product_id.id == ref('product4'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (4/P4)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (4/P4)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (4/P4)"
              assert len(line.purchase_ids) == 1, "Number of PO is different than 1 (4/P4)"
              assert line.purchase_status == 'Validated (1)', "The purchase status is different than 'Validated (1)' (4/P4)"  
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (4/P4)"
              assert line.incoming_status == 'No shipment (0)', "The incoming status is different than 'No shipment (0)' (4/P4)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (4/P4)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (4/P4)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (4/P4)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (4/P4)"
              
              for quotation in line.purchase_ids:
                # Delivery confirmed date is mandatory at confirmed state (unifield naming) (== 'approved' state openERP naming)
                quotation.write({'delivery_confirmed_date': '2012-03-03'}, context=context)
                wf_service = netsvc.LocalService("workflow")
                wf_service.trg_validate(uid, 'purchase.order', quotation.id, 'purchase_approve', cr)
        
    self.unlink(cr, uid, wiz_ids)
-
  I create again a wizard
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('sales_followup.so1'),
               'active_ids': [ref('sales_followup.so1')]}
    res = self.run(cr, uid, [ref('sales_followup.action_sale_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  (Step 5) I check if the wizard is related to the sale order and if the information is ok
-
  !python {model: sale.order.followup}: |
    import netsvc
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('sales_followup.so1'), "The created wizard is not linked to the Sale Order (5)"
        assert len(wiz.line_ids) == 4, "Number of lines in the follow-up not corresponding to the number of lines in the sale order (5)"
        
        for line in wiz.line_ids:
            if line.product_id.id == ref('product1'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (5/P1)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (5/P1)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (5/P1)"
              assert len(line.purchase_ids) == 1, "Number of PO is different than 1 (5/P1)"
              assert line.purchase_status == 'Confirmed (1)', "The purchase status is different than 'Confirmed (1)' (5/P1)"
              assert len(line.incoming_ids) == 1, "Number of Incoming shipment is different than 1 (5/P1)"
              assert line.incoming_status == 'Available (1)', "The incoming status is different than 'Available (1)' (5/P1)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (5/P1)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (5/P1)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (5/P1)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (5/P1)"
            
            if line.product_id.id == ref('product2'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (5/P2)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (5/P2)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (5/P2)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (5/P2)"              
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (5/P2)"
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (5/P2)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (5/P2)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (5/P2)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (5/P2)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (5/P2)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (5/P2)"
              
            if line.product_id.id == ref('product3'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (5/P3)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (5/P3)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (5/P3)"
              assert len(line.purchase_ids) == 0, "Number of PO is different than 0 (5/P3)"
              assert line.purchase_status == 'N/A (0)', "The purchase status is not 'N/A (0)' (5/P3)"              
              assert len(line.incoming_ids) == 0, "Number of Incoming shipment is different than 0 (5/P3)"
              assert line.incoming_status == 'N/A (0)', "The incoming status is not 'N/A (0)' (5/P3)"
              assert line.product_available == 'Available (2000.0)', "The product availability is not 'Available (2000.0)' (5/P3)"
              assert line.available_qty == 2000.0, "The available qty is not equal to 2000.00 (5/P3)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (5/P3)"
              assert line.outgoing_status == 'Available (1)', "Outgoing status is different than 'Available (1)' (5/P3)"
              for out in line.outgoing_ids:
                 self.pool.get('stock.move').action_done(cr, uid, out.id)
             
            if line.product_id.id == ref('product4'):
              assert line.sourced_ok == 'Closed', "Sourced is not equal to 'Closed' (5/P4)"
              assert len(line.tender_ids) == 0, "Number of calls for tender is different than 0 (5/P4)"
              assert line.tender_status == 'N/A (0)', "Tender status is different than 'N/A (0)' (5/P4)"
              assert len(line.purchase_ids) == 1, "Number of PO is different than 1 (5/P4)"
              assert line.purchase_status == 'Confirmed (1)', "The purchase status is different than 'Confirmed (1)' (5/P4)"
              assert len(line.incoming_ids) == 1, "Number of Incoming shipment is different than 1 (5/P4)"
              assert line.incoming_status == 'Available (1)', "The incoming status is different than 'Available (1)' (5/P4)"
              assert line.product_available == 'Waiting (0.0)', "The product availability is not 'Waiting (0.0)' (5/P4)"
              assert line.available_qty == 0.00, "The available qty is not equal to 0.00 (5/P4)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (5/P4)"
              assert line.outgoing_status == 'Waiting (1)', "Outgoing status is different than 'Waiting (1)' (5/P4)"
        
    self.unlink(cr, uid, wiz_ids)
-
  I create again a wizard
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('sales_followup.so1'),
               'active_ids': [ref('sales_followup.so1')]}
    res = self.run(cr, uid, [ref('sales_followup.action_sale_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  (Step 6 - Final) I check if the wizard is related to the sale order and if the information is ok
-
  !python {model: sale.order.followup}: |
    import netsvc
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('sales_followup.so1'), "The created wizard is not linked to the Sale Order (6)"
        assert len(wiz.line_ids) == 4, "Number of lines in the follow-up not corresponding to the number of lines in the sale order (6)"

        for line in wiz.line_ids:
            if line.product_id.id == ref('product3'):
              assert line.available_qty == 1997.0, "The available qty is not equal to 1997.00 (6/P3)"
              assert len(line.outgoing_ids) == 1, "Number of outgoing deliveries is different than 1 (6/P3)"
              assert line.outgoing_status == 'Closed (1)', "Outgoing status is different than 'Closed (1)' (6/P3)"
