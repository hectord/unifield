-
  In order to test the analytic account module
  I create the analytic account
-
  !record {model: account.analytic.account, id: analytic_account_1}:
    name: "Test Account"
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
-
 And I create a currency
-
 !record {model: res.currency, id: cur_1}:
    name: CUR
    currency_name: Test currency
-
  I check that the activation date is 3 months ago
-
  !python {model: account.analytic.account}: |
    ac = self.browse(cr, uid, ref("analytic_account_1"))
    import datetime
    from dateutil.relativedelta import relativedelta
    assert  ac.date_start == (datetime.datetime.today() + relativedelta(months=-3)).strftime('%Y-%m-%d'), "Wrong activation date"
-
  I create Asset Account Type.
-
  !record {model: account.account.type, id: account_account_type_asset0}:
    close_method: balance
    code: asset
    name: Asset
    sign: 1
-
  I create the account
-
  !record {model: account.account, id: account_1}:
    name: "Test Account"
    code: "TEST"
    type: payable
    user_type: account_account_type_asset0
-
  I create an analytical journal, ...
-
  !record {model: account.analytic.journal, id: analytic_journal_1}:
    code: CANJ
    name: Cash Analytic Journal
    type: general
-
  I create a fiscalyear
-
  !record {model: account.fiscalyear, id: fiscalyear1}:
    code: !eval "'FY%s'% (datetime.now().year+1)"
    company_id: base.main_company
    date_start: !eval "'%s-01-01' %(datetime.now().year+1)"
    date_stop: !eval "'%s-12-31' %(datetime.now().year+1)"
    name: !eval "'Fiscal Year %s' %(datetime.now().year+1)"
-
  I create March period for next year
-
  !record {model: account.period, id: period_3_1}:
    company_id: base.main_company
    date_start: !eval "'%s-03-01' % (datetime.now().year + 1)"
    date_stop: !eval "'%s-03-31' % (datetime.now().year + 1)"
    name: !eval "'March-%s' % (datetime.now().year + 1)"
    fiscalyear_id: fiscalyear1
    special: 0
    number: 3
-
  I create April period for next year
-
  !record {model: account.period, id: period_4_1}:
    company_id: base.main_company
    date_start: !eval "'%s-04-01' % (datetime.now().year + 1)"
    date_stop: !eval "'%s-04-30' % (datetime.now().year + 1)"
    name: !eval "'April-%s' % (datetime.now().year + 1)"
    fiscalyear_id: fiscalyear1
    special: 0
    number: 4
-
  I open all periods
-
  !python {model: account.period}: |
    period_ids = self.search(cr, uid, [])
    self.action_set_state(cr, uid, period_ids, {'state': 'draft'})
-
  I create an account analytic line with all of this.
-
  !record {model: account.analytic.line, id: move_line_test}:
    name: testline
    account_id: analytic_account_1
    general_account_id: account_1
    journal_id: analytic_journal_1
    amount: 10.0
    amount_currency: 10.0
    currency_id: cur_1
    date: !eval "'%s-03-12' % (datetime.now().year + 1)"
-
  I change the inactivation date to today (forbidden)
-
  !python {model: account.analytic.account}: |
    import datetime
    try:
      self.write(cr, uid, ref('analytic_account_1'), vals={'date': datetime.datetime.now().strftime('%Y-%m-%d')})
    except Exception as exception:
      assert exception.value == "You cannot set an inactivity date lower than tomorrow!", "Date inactivity lower"
-
  I change the dates so that date_start > date (forbidden)
-
  !python {model: account.analytic.account}: |
    import datetime
    try:
      self.write(cr, uid, ref('analytic_account_1'), vals={'date_start': '%s-03-12' %(datetime.datetime.now().year + 1), 'date': '%s-03-01' %(datetime.datetime.now().year + 1)})
    except Exception as exception:
      assert exception.value == "Activation date must be lower than inactivation date!", "Activation date must be lower"
-
  I change the analytic line date so that it is outside the account's activity period (forbidden)
-
  !python {model: account.analytic.line}: |
    import datetime
    try:
      self.write(cr, uid, ref('move_line_test'), vals={'account_id': ref('analytic_account_1'), 'date': '%s-03-01' %(datetime.datetime.now().year + 2)})
    except Exception as exception:
      assert exception.value == "The analytic account selected 'Test Account' is not active.", "date out of the account"
