-
  In order to test the new purchase order line screen, we first create new partners.
  We then create new products with different internal and supplier configuration (code and name).
  
  Finally we create purchase orders with purchase order lines for these different products.
-
  I create a service stock location
-
  !record {model: stock.location, id: service_loc}:
    name: service
    service_location: True
    location_category: other
    usage: inventory
-
  Creating a product.category record
- 
  !record {model: product.category, id: product_category_testproducts0}:
    name: Test products
    sequence: 0.0
-

  I create the first partner,
  Name AFRICOM
  Customer <checked>
  Supplier <checked>


  Creating a res.partner record
-
  !record {model: res.partner, id: res_partner_africom0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: AFRICOM
    supplier: true
-
  I create the second partner,
  Name AlainDeLoin
  Customer <checked>
  Supplier <checked>


  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_alaindeloin0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: AlainDeLoin
    supplier: true
-
  I create the third partner,
  Name Berthe
  Customer <checked>
  Supplier <checked>


  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_berthe0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: Berthe
    supplier: true
-

  I create the corresponding addresses


  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_0}:
    country_id: base.au
    partner_id: res_partner_africom0
    street: street
    type: default
    zip: '1234'


- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_2}:
    partner_id: res_partner_alaindeloin0
    street: street
    
    
- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_3}:
    partner_id: res_partner_berthe0
    street: street
-

  I create an asset type
-

  !record {model: product.asset.type, id: product_asset_type_0}:
    name: IT
-

  I create the first product, with no specified suppliers,
  Name Boite Ã  chaussures
  Reference CHAUSS INT 1234


  Creating a product.product record
- 
  !record {model: product.product, id: product_product_boitechaussures0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: CHAUSS-INT-123
    mes_type: fixed
    name: Boite \xc3\xa0 chaussures
    name_template: Boite \xc3\xa0 chaussures
    procure_method: make_to_order
    seller_delay: '1'
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    subtype: asset
    asset_type_id: product_asset_type_0
    international_status: product_attributes.int_1
-

  I create an asset


  Creating a product.asset record
- 
  !record {model: product.asset, id: product_asset_testassetcamembert0}:
    asset_type_id: product_asset_type_0
    brand: brand
    model: model
    serial_nb: d
    type: d
    invo_date: '2011-03-22'
    invo_num: d
    invo_value: 120.1
    invo_currency: base.EUR
    name: Boite \xc3\xa0 chaussures asset
    prod_int_code: CHAUSS-INT-123
    prod_int_name: Boite \xc3\xa0 chaussures
    product_id: product_product_boitechaussures0
    arrival_date: '2011-03-27'
    orig_mission_code: d
    receipt_place: d
    international_po: d
-

  I create the product.asset.event record

- 
  !record {model: product.asset.event, id: product_asset_event_0}:
    asset_id: product_asset_testassetcamembert0
    date: '2011-03-28'
    event_type: reception
    state: inUse
    proj_code: 1123
    location: warzazat
    product_id: product_product_boitechaussures0

- 
  Creating a stock.location record
- 
  !record {model: stock.location, id: stock_location_testlocation0}:
    chained_auto_packing: manual
    chained_delay: 0.0
    chained_location_type: none
    name: test location
    parent_left: 24
    parent_right: 25
    usage: internal
    
    
- 
  Creating a stock.picking record
- 
  !record {model: stock.picking, id: stock_picking_int0}:
    company_id: base.main_company
    invoice_state: none
    move_type: direct
    name: INT/00001
    type: internal
    
    
- 
  Creating a stock.move record
- 
  !record {model: stock.move, id: stock_move_producttest0}:
    company_id: base.main_company
    date: '2011-03-28 12:05:06'
    date_expected: '2011-03-28 12:05:06'
    location_dest_id: stock_location_testlocation0
    location_id: stock_location_testlocation0
    name: product test
    picking_id: stock_picking_int0
    price_unit: 0.0
    product_id: product_product_boitechaussures0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    product_uos_qty: 1.0
    asset_id: product_asset_testassetcamembert0
-

  I check the onchange function, product_asset.onChangeProductId

-

  !python {model: product.asset}: |
  
    result = self.onChangeProductId(cr, uid, [], ref("product_product_boitechaussures0"))
    
    values = result['value']
    
    assert values['asset_type_id'] == ref("product_asset_type_0"), 'asset_type_id wrong'
    assert values['prod_int_code'] == 'CHAUSS-INT-123', '%s prod_int_code wrong'%(values['prod_int_code'],)
    assert values['prod_int_name'] == 'Boite \\xc3\\xa0 chaussures', 'prod_int_name wrong'
-

  I check the onchange function, product_asset_event.onChangeAssetId

-

  !python {model: product.asset.event}: |
  
    result = self.onChangeAssetId(cr, uid, [], ref("product_asset_testassetcamembert0"))
    
    values = result['value']
    
    assert values['product_id'] == ref("product_product_boitechaussures0"), 'product wrong'
    assert values['brand'] == 'brand', 'brand wrong'
    assert values['model'] == 'model', 'model wrong'
    assert values['serial_nb'] == 'd', 'serial wrong (%s, %s)'%(values['serial_nb'], 'd')
-

  I check the onchange function, stock_move.onchange_product_id
  
-

  !python {model: stock.move}: |
  
    result = self.onchange_product_id(cr, uid, [], prod_id=ref("product_product_boitechaussures0"))
    
    values = result['value']
    
    assert values['asset_id'] == False, 'asset_id wrong'
