-
  In order to test Cash and Bank transfers, I create a Bank Register, then I create a Cash Register. Finally I write 1 line on each register
  to test if they are correctly registered.
-
  I create a Bank Register
-
  !record {model: account.bank.statement, id: account_bank_statement_4}:
    date: !eval time.strftime('%Y-06-10')
    journal_id: account_journal_bank_0
    name: account_bank_statement_4
    period_id: period_6
    user_id: base.user_root
    balance_start: 1.0
-
  I click on 'Open Bank' button to open the Bank Register
-
  !python {model: account.bank.statement}: |
    self.button_open_bank(cr, uid, [ref("account_bank_statement_4")], {"lang": "en_US", "tz": False, "active_model": "account.bank.statement", \
        "active_ids": [ref("account_bank_statement_4")], "active_id": ref("account_bank_statement_4"), })
-
  Then I create a Cash Register
-
  !record {model: account.bank.statement, id: account_bank_statement_5}:
    date: !eval time.strftime('%Y-06-10')
    journal_id: account_journal_cash_0
    name: Our cash register
    period_id: period_6
    starting_details_ids:
      -  pieces: 100.0
         number: 2
         subtotal: 200.0
      -  pieces: 100.0
         number: 1
         subtotal: 100.0
    balance_start: 300.0
    balance_end: 300.0
-
  I click on 'Open Cash' button to open the Cash Register
-
  !python {model: account.bank.statement}: |
    self.button_open_cash(cr, uid, [ref("account_bank_statement_5")], {"lang": "en_US", "tz": False, "active_model": "account.bank.statement", \
        "active_ids": [ref("account_bank_statement_5")], "active_id": ref("account_bank_statement_5"), })
-
  I create a line in the Bank Register
-
  !record {model: account.bank.statement, id: account_bank_statement_4}:
    line_ids:

        - name: Transfer to a CashBox
          date: !eval time.strftime('%Y-06-10')
          document_date: !eval time.strftime('%Y-06-10')
          account_id: account_account_transfer_0
          amount: -1000.0
          transfer_amount: 1000.0
          transfer_journal_id: account_journal_cash_0
-
  I click on a button to hard post this line
-
  !python {model: account.bank.statement.line}: |
      absl_obj = self.pool.get('account.bank.statement.line')
      absl_ids = absl_obj.search(cr, uid, [('statement_id', '=', ref("account_bank_statement_4"))])
      for id in absl_ids:
          absl_obj.button_hard_posting(cr, uid, [id], context={})
-
  I create a line in the Cash Register
-
  !record {model: account.bank.statement, id: account_bank_statement_5}:
    line_ids:
        - name: Transfer from 
          date: !eval time.strftime('%Y-06-10')
          document_date: !eval time.strftime('%Y-06-10')
          account_id: account_account_transfer_0
          amount: 1000.0
          transfer_amount: 1000.0
          transfer_journal_id: account_journal_bank_0
-
  I click on a button to hard post this line
-
  !python {model: account.bank.statement.line}: |
      absl_obj = self.pool.get('account.bank.statement.line')
      absl_ids = absl_obj.search(cr, uid, [('statement_id', '=', ref("account_bank_statement_5"))])
      for id in absl_ids:
          absl_obj.button_hard_posting(cr, uid, [id], context={})
-
  I check that all lines are correctly written
-
  !python {model: account.bank.statement.line}: |
      move_line_obj = self.pool.get('account.move.line')
      first_bank_transfer_id = move_line_obj.search(cr, uid, [('statement_id', '=', ref("account_bank_statement_4")), \
        ('account_id', '=', ref("account_account_transfer_0"))])[0]
      first_cash_transfer_id = move_line_obj.search(cr, uid, [('statement_id', '=', ref("account_bank_statement_5")), \
        ('account_id', '=', ref("account_account_transfer_0"))])[0]
      first_bank_transfer_debit = move_line_obj.read(cr, uid, first_bank_transfer_id).get('debit')
      first_cash_transfer_credit = move_line_obj.read(cr, uid, first_cash_transfer_id).get('credit')
      assert first_bank_transfer_debit == first_cash_transfer_credit, "Bank Transfer Debit is not the same as Cash Transfer Credit"
