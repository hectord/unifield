-
  To check down payment we create a Purchase Order with a 300 amount (with 5 products) and create 2 down payments.
  We receive 1 product and create invoice.
  We validate it and check all is ok then we receive 2 products.
  We create invoice, validate it and check that all is ok.
-
  Wa update the activation date for payable account
-
  !python {model: account.account}: |
     import time
     self.write(cr, uid, ref('account.a_pay'), {'activation_date': time.strftime('%Y-01-01')})
-
  We create a Purchase order with 5 product of 60 EUR.
-
  !record {model: purchase.order, id: po1}:
    name: PO01
    partner_id: res_partner_supplier_wood_0
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: picking
    location_id: stock.stock_location_stock
    partner_address_id: res_partner_address_tempo
    pricelist_id: purchase.list0
-
  We create a line for this purchase order
-
  !record {model: purchase.order.line, id: po1_l1}:
    product_uom: product.product_uom_unit
    product_id: product_basic_finance_0
    order_id: po1
    price_unit: 60
    product_qty: 5
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We confirm the po1
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: po1}
-
  We validate the po1
-
  !workflow {model: purchase.order, action: purchase_approve, ref: po1}
-
  We create a down payment of 100 for PO1 in a Cheque Register.
-
  !record {model: account.bank.statement.line, id: dp01_po01}:
    name: DP01 for PO1
    cheque_number: 000001
    account_id: account_account_down_payment_0
    partner_id: res_partner_supplier_wood_0
    amount: -100
    date: !eval time.strftime('%Y-05-02')
    document_date: !eval time.strftime('%Y-05-01')
    sequence: 1
    statement_id: account_bank_statement_3
    down_payment_id: po1
-
  We create a down payment of 55 for PO1 in a Cheque Register.
-
  !record {model: account.bank.statement.line, id: dp02_po01}:
    name: DP02 for PO1
    cheque_number: 000002
    account_id: account_account_down_payment_0
    partner_id: res_partner_supplier_wood_0
    amount: -55
    date: !eval time.strftime('%Y-05-13')
    document_date: !eval time.strftime('%Y-05-12')
    sequence: 1
    statement_id: account_bank_statement_3
    down_payment_id: po1
-
  We hard post this two Down Payment and check that two accounting lines have same PO and amount
-
  !python {model: account.move.line}: |
    absl_ids = self.pool.get('account.bank.statement.line').search(cr, uid, [('id', 'in', [ref("dp01_po01"), ref("dp02_po01")])])
    self.pool.get('account.bank.statement.line').posting(cr, uid, absl_ids, 'hard')
    aml_ids = self.search(cr, uid, [('down_payment_id', '=', ref("po1"))])
    assert len(aml_ids) == 2, "You should have 2 down payment lines!"
    dp01_id = self.search(cr, uid, [('id', 'in', aml_ids), ('amount_currency', '=', 100)])
    assert len(dp01_id) == 1, "Down payment line with 100 EUR is missing!"
    dp02_id = self.search(cr, uid, [('id', 'in', aml_ids), ('amount_currency', '=', 55)])
-
  I validate shipment with 1 product, then create invoice 01.
-
  !python {model: stock.picking}: |
    # Prepare values to split picking
    import time
    today = time.strftime('%Y-%m-%d')
    pick_ids = self.search(cr, uid, [('purchase_id', '=', ref("po1"))])
    # Create partial datas for partial reception
    # Example: {'move608': {'product_id': browse_record(product.product, 404), 'product_uom': 1, 'product_qty': 1.0}, 'address_id': 1, 
    #   'partner_id': 1, 'delivery_date': '2012-04-05'}
    pick = self.browse(cr, uid, pick_ids[0])
    partial_datas = {
        'partner_id': pick.address_id.partner_id.id,
        'address_id': pick.address_id.id,
        'delivery_date' : today
    }
    for move in pick.move_lines:
        partial_datas['move%s'%(move.id)]= {
            'product_id': move.product_id,
            'product_qty': 1.0,
            'product_uom': move.product_uom.id,
    }
    #print "PARTIAL DATAS %s" % partial_datas
    # Do partial reception
    res_do_partial = self.pool.get("stock.picking").do_partial(cr, uid, [pick.id], partial_datas)
    # Search new picking
    new_pick_id = res_do_partial and res_do_partial[pick.id] and res_do_partial[pick.id].get('delivered_picking') or False
    # Create invoice
    journal_ids = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'purchase')])
    res_invoice = self.action_invoice_create(cr, uid, [new_pick_id], journal_ids[0], False, 'in_invoice', {'date_inv': time.strftime('%Y-%m-%d')})
-
  I confirm invoice 01 and check that down_payment_amount is ok, invoice is paid and right down payment is used.
-
  !python {model: account.invoice}: |
    # Search invoice
    inv_ids = self.pool.get('account.invoice').search(cr, uid, [('state', '=', 'draft'), ('type', '=', 'in_invoice'), ('partner_id', '=', ref("res_partner_supplier_wood_0"))])
    # Disallow analytic distribution verification
    from mx import DateTime
    self.write(cr, uid, inv_ids, {'from_yml_test': True, 'document_date': (DateTime.now()+DateTime.RelativeDateTime(days=-2)).strftime('%Y-%m-%d')})
    # Validate invoice
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.invoice', inv_ids[0], 'invoice_open', cr)
    # Check invoice state
    invoice = self.browse(cr, uid, inv_ids[0])
    assert invoice.state == 'paid', "Invoice should be paid! Please check down payment flow."
    # Search down payment and check that it's reconciled and down_payment_amount is 60
    aml_ids = self.pool.get('account.move.line').search(cr, uid, [('down_payment_id', '=', ref("po1")), ('amount_currency', '=', 100)])
    assert len(aml_ids) == 1, "Should have only one down payment line attached to PO1 and that have an amount of 100 EUR!"
    down_payment = self.pool.get('account.move.line').browse(cr, uid, aml_ids[0])
    assert down_payment.reconcile_id != False, "Down payment is not reconciled!"
    assert down_payment.down_payment_amount == 60, "Down payment should be %s instead of %s" % (60, down.payment.down_payment_amount)
-
  I receipt 2 products from PO1 and create invoice 02.
-
  !python {model: stock.picking}: |
    # Prepare values to split picking
    import time
    today = time.strftime('%Y-%m-%d')
    pick_ids = self.search(cr, uid, [('purchase_id', '=', ref("po1")), ('state', '!=', 'done')])
    # Create partial datas for partial reception
    pick = self.browse(cr, uid, pick_ids[0])
    partial_datas = {
        'partner_id': pick.address_id.partner_id.id,
        'address_id': pick.address_id.id,
        'delivery_date' : today
    }
    for move in pick.move_lines:
        partial_datas['move%s'%(move.id)]= {
            'product_id': move.product_id,
            'product_qty': 2.0,
            'product_uom': move.product_uom.id,
    }
    # Do partial reception
    res_do_partial = self.pool.get("stock.picking").do_partial(cr, uid, pick_ids, partial_datas)
    # Search new picking
    new_pick_id = res_do_partial and res_do_partial[pick.id] and res_do_partial[pick.id].get('delivered_picking') or False
    # Create invoice
    journal_ids = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'purchase')])
    res_invoice = self.action_invoice_create(cr, uid, [new_pick_id], journal_ids[0], False, 'in_invoice', {'date_inv': time.strftime('%Y-%m-%d')})
-
  I confirm invoice 02 and check that down_payment_amount is ok, invoice is NOT paid and right down payments are used.
-
  !python {model: account.invoice}: |
    # Search invoice
    inv_ids = self.pool.get('account.invoice').search(cr, uid, [('state', '=', 'draft'), ('type', '=', 'in_invoice'), ('partner_id', '=', ref("res_partner_supplier_wood_0"))])
    # Disallow analytic distribution verification
    from mx import DateTime
    self.write(cr, uid, inv_ids, {'from_yml_test': True, 'document_date': (DateTime.now()+DateTime.RelativeDateTime(days=-1)).strftime('%Y-%m-%d')})
    # Validate invoice
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'account.invoice', inv_ids[0], 'invoice_open', cr)
    # Check invoice state
    invoice = self.browse(cr, uid, inv_ids[0])
    assert invoice.state != 'paid', "Invoice should NOT be paid! Please check down payment flow."
    # Search down payment 55 and check that it's reconciled and down_payment_amount is 55
    aml2_ids = self.pool.get('account.move.line').search(cr, uid, [('down_payment_id', '=', ref("po1")), ('amount_currency', '=', 55)])
    assert len(aml2_ids) == 1, "Should have only one down payment line attached to PO1 and that have an amount of 55 EUR!"
    down_payment2 = self.pool.get('account.move.line').browse(cr, uid, aml2_ids[0])
    assert down_payment2.reconcile_id != False, "Down payment 02 SHOULD BE reconciled!"
    assert down_payment2.down_payment_amount == 55, "Down payment 02 amount should be totally used (is %s, should be %s)" % (down_payment2.down_payment_amount, 55)
    # Search down payment 100 and check that it's reconciled and down_payment_amount is 100
    aml_ids = self.pool.get('account.move.line').search(cr, uid, [('down_payment_id', '=', ref("po1")), ('amount_currency', '=', 100)])
    assert len(aml_ids) == 1, "Should have only one down payment line attached to PO1 and that have an amount of 100 EUR!"
    down_payment = self.pool.get('account.move.line').browse(cr, uid, aml_ids[0])
    assert down_payment.reconcile_id != False, "Down payment 01 SHOULD BE reconciled!"
    assert down_payment.down_payment_amount == 100, "Down payment 01 amount should be totally used (is %s, should be %s)" % (down_payment.down_payment_amount, 100)
-
  I pay invoice 02 with import invoice wizard
-
  !record {model: wizard.import.invoice, id: wizard_import_invoice_0}:
    currency_id: base.EUR
    statement_id: account_bank_statement_2
    date: !eval time.strftime('%Y-05-25')
-
  I add the invoice 02 in this wizard
-
  !python {model: wizard.import.invoice}: |
    move_line_ids = self.pool.get('account.move.line').search(cr, uid, [('partner_id', '=', ref("res_partner_supplier_wood_0")), ('ready_for_import_in_register','=',True)])
    self.write(cr, uid, [ref('wizard_import_invoice_0')], {'line_ids': [(6, 0, move_line_ids)]})
-
  I test the group import button
-
  !python {model: wizard.import.invoice}: |
    self.group_import(cr, uid, [ref('wizard_import_invoice_0')])
-
  I validate the import invoice wizard
-
  !python {model: wizard.import.invoice}: |
    self.action_confirm(cr, uid, [ref('wizard_import_invoice_0')])
-
  I check that imported invoice 02 have generated a register line with 25 EUR.
-
  !python {model: account.bank.statement.line}: |
    absl_ids = self.search(cr, uid, [('statement_id', '=', ref("account_bank_statement_2")), ('number_imported_invoice', '>', 0), ('partner_id', '=', ref("res_partner_supplier_wood_0")), ('amount', '=', -25.0)])
    assert len(absl_ids) == 1, "Error when fetch register line that come from import invoice for invoice 02"
-
  I hard post this register line and check that invoice 01 and invoice 02 are paid
-
  !python {model: account.bank.statement.line}: |
    absl_ids = self.search(cr, uid, [('statement_id', '=', ref("account_bank_statement_2")), ('number_imported_invoice', '>', 0), ('partner_id', '=', ref("res_partner_supplier_wood_0")), ('amount', '=', -25.0)])
    self.posting(cr, uid, absl_ids, 'hard')
    inv_ids = self.pool.get('account.invoice').search(cr, uid, [('type', '=', 'in_invoice'), ('partner_id', '=', ref("res_partner_supplier_wood_0"))])
    for invoice in self.pool.get('account.invoice').read(cr, uid, inv_ids, ['state']):
        assert invoice['state'] == 'paid', "Invoice %s is not totally paid!" % invoice['id']
