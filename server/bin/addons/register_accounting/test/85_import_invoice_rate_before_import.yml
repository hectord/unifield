-
  I create a supplier invoice in CHF for the supplier wood1
-
  !record {model: account.invoice, id: account_invoice_for_import_in_cash2}:
    account_id: account_account_payable_supplier0
    address_contact_id: res_partner_address_tempo
    address_invoice_id: res_partner_address_tempo
    check_total: 60.0
    company_id: base.main_company
    currency_id: base.CHF
    invoice_line:
      - account_id: account_account_expense0
        name: 'Basic product'
        price_unit: 12.0
        product_id: product_basic_finance_0
        quantity: 5.0
        uos_id: product.product_uom_unit
    journal_id: account_journal_expenses_0
    partner_id: res_partner_supplier_wood_0
    reference_type: none
    type: in_invoice
-
  I create another supplier invoice in CHF for the same supplier (supplier_wood_1)
-
  !record {model: account.invoice, id: account_invoice_for_import_in_cash3}:
    account_id: account_account_payable_supplier0
    address_contact_id: res_partner_address_tempo
    address_invoice_id: res_partner_address_tempo
    check_total: 36.0
    company_id: base.main_company
    currency_id: base.CHF
    invoice_line:
      - account_id: account_account_expense0
        name: 'Basic product'
        price_unit: 12.0
        product_id: product_basic_finance_0
        quantity: 3.0
        uos_id: product.product_uom_unit
    journal_id: account_journal_expenses_0
    partner_id: res_partner_supplier_wood_0
    reference_type: none
    type: in_invoice
-
  I validate first invoice
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_for_import_in_cash2}
-
  I validate second invoice
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_for_import_in_cash3}
-
  I use the import invoice button on the cash register in CHF in order to check it could be opened
-
  !python {model: account.bank.statement}: |
    wizard = self.button_wiz_import_invoices(cr, uid, [ref("cash_register_10y")], {"lang": "en_US", "tz": False, \
        "active_model": "account.bank.statement", "active_ids": [ref("cash_register_0")], \
        "active_id": ref("cash_register_10y"), })
    assert wizard.get('res_model') == 'wizard.import.invoice', "This is not the right wizard!"
    assert wizard.get('context') != False, "Context is missing!"
    wizard_context = wizard.get('context')
    assert wizard_context.get('active_id') == ref("cash_register_10y"), "Come from bad register line!"
    # Delete wizard in order to simplify next tests
    self.pool.get('wizard.import.invoice').unlink(cr, uid, wizard.get('res_id'))
-
  I create a wizard with the 25th of the current month (because of the fact that the register is in this current period)
-
  !record {model: wizard.import.invoice, id: wizard_import_invoice_1}:
    currency_id: base.CHF
    statement_id: cash_register_10y
    date: !eval (DateTime.now()+DateTime.RelativeDateTime(years=10,day=25)).strftime('%Y-%m-%d')
-
  I add the 2 invoices in this wizard
-
  !python {model: wizard.import.invoice}: |
    move_line_ids = self.pool.get('account.move.line').search(cr, uid, [('invoice', 'in', [ref('account_invoice_for_import_in_cash2'), ref('account_invoice_for_import_in_cash3')]), ('ready_for_import_in_register','=',True)])
    self.write(cr, uid, [ref('wizard_import_invoice_1')], {'line_ids': [(6, 0, move_line_ids)]})
-
  I test the group import button
-
  !python {model: wizard.import.invoice}: |
    self.group_import(cr, uid, [ref('wizard_import_invoice_1')])
-
  I validate the wizard
-
  !python {model: wizard.import.invoice}: |
    self.action_confirm(cr, uid, [ref('wizard_import_invoice_1')])
-
  I check that a line exists incash_register_0. That it's temp posted. And that the amount is those of previous invoices (60 + 36 = 96).
-
  !python {model: account.bank.statement.line}: |
    search_ids = self.search(cr, uid, [('statement_id', '=', ref('cash_register_10y')), ('state', '=', 'temp')])
    assert len(search_ids) == 1, "More than one line found: an error occured with Import Invoice Wizard."
    line = self.browse(cr, uid, search_ids)[0]
    assert line.state == 'temp', "Register line is not Temp posted"
    assert line.amount == -96.0, "Wrong amount"
    assert ref('account_invoice_for_import_in_cash2') in [x.invoice and x.invoice.id for x in line.imported_invoice_line_ids] != False, "First invoice not in results!"
    assert ref('account_invoice_for_import_in_cash3') in [x.invoice and x.invoice.id for x in line.imported_invoice_line_ids] != False, "Second invoice not in results!"
-
  I hard post register line
-
  !python {model: account.bank.statement.line}: |
    search_ids = self.search(cr, uid, [('statement_id', '=', ref('cash_register_10y')), ('state', '=', 'temp')])
    self.posting(cr, uid, search_ids, 'hard')
-
  I check that first invoice is paid
-
  !assert {model: account.invoice, id: account_invoice_for_import_in_cash2}:
    - state == 'paid'
-
  I check that second invoice is paid
-
  !assert {model: account.invoice, id: account_invoice_for_import_in_cash3}:
    - state == 'paid'
-
  I check the reconciled entry has a new addendum line
-
  !python {model: account.bank.statement.line}: |
     ana_obj = self.pool.get('account.analytic.line')
     search_ids = self.search(cr, uid, [('statement_id', '=', ref('cash_register_10y'))])
     for obj in self.browse(cr, uid, search_ids):
         find_add = False
         for move in obj.move_ids:
             for m in move.line_id:
                 if not m.reconcile_id:
                     continue
                 for ml in m.reconcile_id.line_id:
                     if ml.is_addendum_line:
                         assert ml.currency_id.id != ml.functional_currency_id.id, "Addendum line: currency_id != functional_currency_id"
                         assert ml.debit == 64, "Addendum line: debit (%s)!=64 "%(ml.debit,)
                         assert ml.amount_currency == 0, "Addendum line: amount_currency not null: %s"%(ml.amount_currency,)
                         found_ana = False
                         for ll in ml.move_id.line_id:
                             if ll.account_id.user_type.code == 'expense':
                                 ana_lines = ana_obj.search(cr, uid, [('move_id', '=', ll.id)])
                                 assert len(ana_lines) == 1, "No analytic line found for addendum line (%s)"%(len(ana_lines))
                                 found_ana = True
                                 for ana in ana_obj.browse(cr, uid, ana_lines):
                                     assert ana.currency_id.id == ml.functional_currency_id.id, "Addendum line: wrong ana. line currency"
                                     assert  ana.amount_currency == ana.amount == 64, "Addendum line: wrong amount %s %s"%(ana.amount_currency, ana.amount)
                         assert found_ana, "No add ana found"
                     find_add = True
         assert find_add, "No addendum line found"
-
  I change the fx rate
-
  !record {model: res.currency.rate, id: new_rate1}:
    currency_id: base.CHF
    rate: 6
    name: !eval (DateTime.now()+DateTime.RelativeDateTime(years=10,month=1, day=2)).strftime('%Y-%m-%d')
-
  I check the reconciled entry has a new addendum line
-
  !python {model: account.bank.statement.line}: |
     ana_obj = self.pool.get('account.analytic.line')
     search_ids = self.search(cr, uid, [('statement_id', '=', ref('cash_register_10y'))])
     for obj in self.browse(cr, uid, search_ids):
         find_add = False
         for move in obj.move_ids:
             for m in move.line_id:
                 if not m.reconcile_id:
                     continue
                 for ml in m.reconcile_id.line_id:
                     if ml.is_addendum_line:
                         assert ml.currency_id.id != ml.functional_currency_id.id, "Addendum line: currency_id != functional_currency_id"
                         assert ml.debit == 80, "Addendum line: debit (%s)!=80 "%(ml.debit,)
                         assert ml.amount_currency == 0, "Addendum line: amount_currency not null: %s"%(ml.amount_currency,)
                         found_ana = False
                         for ll in ml.move_id.line_id:
                             if ll.account_id.user_type.code == 'expense':
                                 ana_lines = ana_obj.search(cr, uid, [('move_id', '=', ll.id)])
                                 assert len(ana_lines) == 1, "No analytic line found for addendum line (%s)"%(len(ana_lines))
                                 found_ana = True
                                 for ana in ana_obj.browse(cr, uid, ana_lines):
                                     assert ana.currency_id.id == ml.functional_currency_id.id, "Addendum line: wrong ana. line currency"
                                     assert  ana.amount_currency == ana.amount == 80, "Addendum line: wrong amount %s %s"%(ana.amount_currency, ana.amount)
                         assert found_ana, "No add ana found"
                     find_add = True
         assert find_add, "No addendum line found"
-
  I change the fx rate
-
  !record {model: res.currency.rate, id: new_rate2}:
    currency_id: base.CHF
    rate: 1.2
    name: !eval (DateTime.now()+DateTime.RelativeDateTime(years=10,month=1, day=10)).strftime('%Y-%m-%d')
-
  I check the reconciled entry has a new addendum line
-
  !python {model: account.bank.statement.line}: |
     ana_obj = self.pool.get('account.analytic.line')
     search_ids = self.search(cr, uid, [('statement_id', '=', ref('cash_register_10y'))])
     for obj in self.browse(cr, uid, search_ids):
         find_add = False
         for move in obj.move_ids:
             for m in move.line_id:
                 if not m.reconcile_id:
                     continue
                 for ml in m.reconcile_id.line_id:
                     if ml.is_addendum_line:
                         assert ml.currency_id.id != ml.functional_currency_id.id, "Addendum line: currency_id != functional_currency_id"
                         assert ml.debit == 16, "Addendum line: debit (%s)!=16 "%(ml.debit,)
                         assert ml.amount_currency == 0, "Addendum line: amount_currency not null: %s"%(ml.amount_currency,)
                         found_ana = False
                         for ll in ml.move_id.line_id:
                             if ll.account_id.user_type.code == 'expense':
                                 ana_lines = ana_obj.search(cr, uid, [('move_id', '=', ll.id)])
                                 assert len(ana_lines) == 1, "No analytic line found for addendum line (%s)"%(len(ana_lines))
                                 found_ana = True
                                 for ana in ana_obj.browse(cr, uid, ana_lines):
                                     assert ana.currency_id.id == ml.functional_currency_id.id, "Addendum line: wrong ana. line currency"
                                     assert  ana.amount_currency == ana.amount == 16, "Addendum line: wrong amount %s %s"%(ana.amount_currency, ana.amount)
                         assert found_ana, "No add ana found"
                     find_add = True
         assert find_add, "No addendum line found"
