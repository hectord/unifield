-
  In order to test split functionnality, I create 2 hq entries. One to be split.
-
  !record {model: hq.entries, id: hq_entry_1}:
    name: Transport int order to Porba
    ref: DZ5000098
    account_id_first_value: account_6303
    account_id: account_6303
    destination_id_first_value: analytic_distribution.analytic_account_destination_support
    destination_id: analytic_distribution.analytic_account_destination_support
    cost_center_id_first_value: cc1
    cost_center_id: cc1
    analytic_id_first_value: fp1
    analytic_id: fp1
    currency_id: base.EUR
    document_date: !eval time.strftime('%Y-02-02')
    date: !eval time.strftime('%Y-02-15')
    amount: 555.0
    period_id: account.period_2
-
  The second to be in HQ list view and do some comparison on all wizards
-
  !record {model: hq.entries, id: hq_entry_2}:
    name: Salaries John Doe
    ref:
    account_id: account_6401
    account_id_first_value: account_6401
    destination_id_first_value: analytic_distribution.analytic_account_destination_operation
    destination_id: analytic_distribution.analytic_account_destination_operation
    cost_center_id_first_value: cc1
    cost_center_id: cc1
    analytic_id_first_value: fp1
    analytic_id: fp1
    currency_id: base.EUR
    document_date: !eval time.strftime('%Y-02-11')
    date: !eval time.strftime('%Y-02-12')
    amount: 123.0
    period_id: account.period_2
-
  I do a split of the first line by launching split wizard on it and creating 2 lines
-
  !python {model: hq.entries, context: {'active_ids': [ref('hq_entry_1')]}}: |
    # prepare some values
    ctx = {'active_ids': [ref('hq_entry_1')]}
    sl_obj = self.pool.get('hq.entries.split.lines')
    import logging
    # process
    logging.getLogger('tests').log(logging.TEST, 'I launch the split wizard and test result.')
    res = self.get_split_wizard(cr, uid, ref('hq_entry_1'), context=ctx)
    assert res != False, "No split wizard result!"
    assert res.get('res_model', False) == 'hq.entries.split', "Wrong result model for Split wizard!"
    assert res.get('res_id', False) != False, "No wizard ID for split one!"
    wiz_id = res.get('res_id', False) and res.get('res_id')[0]
    # Check wizard
    wiz = self.pool.get('hq.entries.split').browse(cr, uid, wiz_id)
    assert wiz.original_id.id == ref('hq_entry_1'), "Wrong original line"
    # Check that fields are correctly filled in when you create a new line
    logging.getLogger('tests').log(logging.TEST, 'I check that a new wizard line contains same values as original line.')
    vals = {'wizard_id': wiz_id,}
    ctx.update({'parent_id': wiz_id,})
    for field in ['name', 'ref']:
      vals.update({field: sl_obj._get_field(cr, uid, field, context=ctx)})
    for field in ['account_id', 'amount', 'destination_id', 'cost_center_id', 'analytic_id']:
      vals.update({field: sl_obj._get_field(cr, uid, field, field_type='m2o', context=ctx)})
    vals.update({'amount': sl_obj._get_amount(cr, uid, context=ctx)})
    name = 'Transport int order to Porba'
    reference = 'DZ5000098'
    account_id = ref('account_6303')
    dest_id = ref('analytic_distribution.analytic_account_destination_support')
    cc_id = ref('cc1')
    ana_id = ref('fp1')
    amount = 555.0
    logging.getLogger('tests').log(logging.TEST, 'Check name…')
    assert vals.get('name', False) == name, "Field name should be: %s" % (name,)
    logging.getLogger('tests').log(logging.TEST, 'Check ref…')
    assert vals.get('ref', False) == reference, "Field ref should be: %s" % (reference,)
    logging.getLogger('tests').log(logging.TEST, 'Check account_id…')
    assert vals.get('account_id', False) == account_id, "Field account_id should be: %s" % (account_id,)
    logging.getLogger('tests').log(logging.TEST, 'Check destination_id…')
    assert vals.get('destination_id', False) == dest_id, "Field destination_id should be: %s" % (dest_id,)
    logging.getLogger('tests').log(logging.TEST, 'Check cost_center_id…')
    assert vals.get('cost_center_id', False) == cc_id, "Field cost_center_id should be: %s" % (cc_id,)
    logging.getLogger('tests').log(logging.TEST, 'Check analytic_id…')
    assert vals.get('analytic_id', False) == ana_id, "Field analytic_id should be: %s" % (ana_id,)
    logging.getLogger('tests').log(logging.TEST, 'Check amount…')
    assert vals.get('amount', False) == amount, "Field amount should be: %s" % (amount,)
    logging.getLogger('tests').log(logging.TEST, 'Create 2 lines, 1 with a 500 amount (and new reference). Check that if we create a new line, it gives a 55 amount.')
    vals.update({'amount': 500.0, 'ref': 'ESC-300456'})
    first_split = sl_obj.create(cr, uid, vals, context=ctx)
    residual_amount = sl_obj._get_amount(cr, uid, context=ctx)
    assert residual_amount == 55.0, "Wrong amount: %s. Expected %s." % (residual_amount, 55.0,)
    logging.getLogger('tests').log(logging.TEST, 'Create the last line on 6404 G/L account with 55.0 amount and new reference.')
    vals.update({'account_id': ref('account_6401'), 'amount': 55.0, 'ref': 'ESC-300450'})
    second_split = sl_obj.create(cr, uid, vals, context=ctx)
    logging.getLogger('tests').log(logging.TEST, 'Check that first line is analytically valid and the second one not (should be an error of destination)')
    first = sl_obj.browse(cr, uid, first_split)
    assert first.state == 'valid', "Wrong analytic state for the first split line! Info: %s" % (first.state_info,)
    second = sl_obj.browse(cr, uid, second_split)
    assert second.state == 'invalid', "Wrong analytic state for the second split line! Should be invalid. Info: %s" % (second.state_info,)
    assert second.state_info == 'Destination not compatible with account'
    logging.getLogger('tests').log(logging.TEST, 'Set new destination to change analytic state of second line and check that state is now OK!')
    sl_obj.write(cr, uid, [second_split], {'destination_id': ref('analytic_distribution.analytic_account_destination_operation')})
    second = sl_obj.browse(cr, uid, second_split)
    assert second.state == 'valid', "Wrong analytic state for the second split line after modifications! Info: %s" % (second.state_info,)
    logging.getLogger('tests').log(logging.TEST, 'Validate the wizard')
    self.pool.get('hq.entries.split').button_validate(cr, uid, [wiz_id])
    logging.getLogger('tests').log(logging.TEST, 'Check that the old line have "is_original" set to True and that 2 new lines appears with a 500 amount and a 55 amount.')
    assert self.browse(cr, uid, ref('hq_entry_1')).is_original == True, "Original HQ Entry is not set as original!"
    first_split_line_id = self.search(cr, uid, [('amount', '=', 500.0)])
    assert len(first_split_line_id) == 1, "Should only find 1 line for first split line. Find: %s" % (len(first_split_line_id),)
    second_split_line_id = self.search(cr, uid, [('amount', '=', 55.0)])
    assert len(second_split_line_id) == 1, "Should only find 1 line for second split line. Find: %s" % (len(second_split_line_id,))
    logging.getLogger('tests').log(logging.TEST, 'Check that all lines are valid')
    all_ids = self.search(cr, uid, [('user_validated', '=', False)])
    for line in self.browse(cr, uid, all_ids):
      assert line.analytic_state == 'valid', "Wrong analytic distribution state for line with an amount of: %s" % (line.amount or 0.0,)
-
  I split the second line by reference and check that unsplit wizard works with right lines and that result is the initial line I have.
-
  !python {model: hq.entries}: |
    # prepare some values
    ctx = {'active_ids': [ref('hq_entry_2')]}
    sl_obj = self.pool.get('hq.entries.split.lines')
    import logging
    # process
    logging.getLogger('tests').log(logging.TEST, 'I launch the split wizard')
    res = self.get_split_wizard(cr, uid, ref('hq_entry_2'), context=ctx)
    wiz_id = res.get('res_id', False) and res.get('res_id')[0]
    wiz = self.pool.get('hq.entries.split').browse(cr, uid, wiz_id)
    # Check that fields are correctly filled in when you create a new line
    logging.getLogger('tests').log(logging.TEST, 'I prepare values for new split lines.')
    vals = {'wizard_id': wiz_id,}
    ctx.update({'parent_id': wiz_id,})
    for field in ['name', 'ref']:
      vals.update({field: sl_obj._get_field(cr, uid, field, context=ctx)})
    for field in ['account_id', 'amount', 'destination_id', 'cost_center_id', 'analytic_id']:
      vals.update({field: sl_obj._get_field(cr, uid, field, field_type='m2o', context=ctx)})
    logging.getLogger('tests').log(logging.TEST, 'Create 2 lines, 1 with a 100 amount (and new reference) and the second one with new amount and ref.')
    vals.update({'amount': 100.0, 'ref': 'REF 001'})
    first_split = sl_obj.create(cr, uid, vals, context=ctx)
    vals.update({'amount': 23.0, 'ref': 'REF 002'})
    second_split = sl_obj.create(cr, uid, vals, context=ctx)
    logging.getLogger('tests').log(logging.TEST, 'I validate the wizard')
    self.pool.get('hq.entries.split').button_validate(cr, uid, [wiz_id])
    logging.getLogger('tests').log(logging.TEST, 'I search line with 23.0 amount and launch Unsplit wizard on it.')
    second_line_id = self.search(cr, uid, [('amount', '=', 23.0)])
    unsplit_ctx = {'active_ids': second_line_id}
    unsplit_wiz_res = self.get_unsplit_wizard(cr, uid, second_line_id, context=unsplit_ctx)
    unsplit_wiz_id = unsplit_wiz_res.get('res_id', False) and unsplit_wiz_res.get('res_id')[0] or False
    assert unsplit_wiz_id != False, "No unsplit wizard launched!"
    logging.getLogger('tests').log(logging.TEST, 'I check that the wizard have 3 lines to process.')
    unsplit_wiz = self.pool.get('hq.entries.unsplit').browse(cr, uid, unsplit_wiz_id)
    assert len(unsplit_wiz.process_ids) == 3, "Wrong number of lines to unsplit (%s). Expected: %s" % (len(unsplit_wiz.process_ids), 3)
    logging.getLogger('tests').log(logging.TEST, 'Check each wizard process line. They need to have 123.0, 100.0 or 23.0 amount')
    for process_line in unsplit_wiz.process_ids:
      assert process_line.amount in [123.0, 100.0, 23.0], "Wrong amount for this line: %s with this amount: %s" % (process_line.name, process_line.amount)
    logging.getLogger('tests').log(logging.TEST, 'I validate the wizard and check HQ Entries result. Should be 4 lines in HQ Entries, only one with 123.0 amount and no one with 100.0 amount or 23.0 amount.')
    self.pool.get('hq.entries.unsplit').button_validate(cr, uid, [unsplit_wiz_id])
    all_ids = self.search(cr, uid, [('user_validated', '=', False)])
    assert len(all_ids) == 4, "Wrong HQ Entries number: %s. Expected 4." % (len(all_ids),)
    forbidden_ids = self.search(cr, uid, [('amount', 'in', [100.0, 23.0])])
    assert len(forbidden_ids) == False, "Wrong unsplitted lines: %s. Expected: 0." % (len(forbidden_ids),)
-
  I validate all HQ Entries to check result.
-
  !python {model: account.move.line}: |
    # Prepare some values
    import logging
    # Process
    hq_ids = self.pool.get('hq.entries').search(cr, uid, [('user_validated', '=', False)])
    res = self.pool.get('hq.entries').get_validation_wizard(cr, uid, hq_ids, context={'active_ids': hq_ids,})
    wiz_id = res.get('res_id', False) and res.get('res_id')[0] or False
    assert wiz_id != False, "No validation wizard launched!"
    logging.getLogger('tests').log(logging.TEST, 'I validate HQ entries')
    self.pool.get('account.analytic.journal')
    self.pool.get('hq.entries.validation').button_validate(cr, uid, wiz_id)
    logging.getLogger('tests').log(logging.TEST, 'I check that there is some account move with 555.0 amount and another with 123.0 amount.')
    split_ids = self.pool.get('account.move').search(cr, uid, [('amount', '=', 555.0)])
    assert len(split_ids) == 3, "Wrong number of split journal entries: %s. Expected: %s." % (len(split_ids), 3)
    normal_ids = self.pool.get('account.move').search(cr, uid, [('amount', '=', 123.0)])
    assert len(normal_ids) == 1, "Wrong number of normal journal entries from HQ: %s. Expected: %s." % (len(normal_ids), 1)
    logging.getLogger('tests').log(logging.TEST, 'I check the details of 555.0 journal entries. One should be on HQ journal, the 2 others on correction journal')
    hq_move_ids = self.pool.get('account.move').search(cr, uid, [('id', 'in', split_ids), ('journal_id.type', '=', 'hq')])
    assert len(hq_move_ids) == 1, "Wrong number of journal entry that is on HQ journal and with a 555.0 amount: %s. Expected: %s." % (len(hq_move_ids), 1)
    od_move_ids = self.pool.get('account.move').search(cr, uid, [('id', 'in', split_ids), ('journal_id.type', '=', 'correction')])
    assert len(od_move_ids) == 2, "Wrong number of journal entries that are on correction journal and with an amount of 555: %s. Expected: %s." % (len(od_move_ids), 2)
    correction_move_id = False
    reversal_move_id = False
    for move in self.pool.get('account.move').browse(cr, uid, od_move_ids):
      if len(move.line_id) == 3:
        correction_move_id = move.id
        continue
      elif len(move.line_id) == 2:
        reversal_move_id = move.id
        continue
      else:
        assert 1 == 2, "Error when attempting to find journal entries. Wrong number of joournal items: %s" % (len(move.line_id),)
