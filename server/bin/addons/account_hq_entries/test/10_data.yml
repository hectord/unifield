-
  In order to make tests, I create some elements in accounting.
-
  I create an Expense account type.
-
  !record {model: account.account.type, id: type_expense}:
    close_method: unreconciled
    code: expense
    name: Expense
    sign: 1
    report_type: expense
-
  I create a Debt account type.
-
  !record {model: account.account.type, id: type_debt}:
    close_method: balance
    code: debt
    name: debt
    sign: 1
-
  I create a reconciliable 4000 debt account
-
  !record {model: account.account, id: account_4000}:
    name: 4000 account
    code: '4000'
    type: other
    user_type: type_debt
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    reconcile: 1
-
  I create a 6303 expense account
-
  !record {model: account.account, id: account_6303}:
    name: 6303 account
    code: '6303'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_support
    destination_ids: [analytic_distribution.analytic_account_destination_support]
-
  I create a 6400 expense account
-
  !record {model: account.account, id: account_6400}:
    name: 6400 account
    code: '6400'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_support
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_support]
-
  I create a 6401 expense account
-
  !record {model: account.account, id: account_6401}:
    name: 6401 account
    code: '6401'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_operation
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_national_staff]
-
  I create a 6412 expense account
-
  !record {model: account.account, id: account_6412}:
    name: 6412 account
    code: '6412'
    type: other
    user_type: type_expense
    type_for_register: none
    company_id: base.main_company
    currency_mode: current
    activation_date: !eval time.strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_support
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_support]
-
  I create an analytic journal for HQ entries
-
  !record {model: account.analytic.journal, id: analytic_journal_hq}:
    code: ahq
    name: Analytic HQ Journal
    type: hq
-
  I create an analytic correction journal
-
  !record {model: account.analytic.journal, id: analytic_correction_journal}:
    code: ACOR
    name: Analytic Correction Journal
    type: correction
-
  I create a correction journal for split
-
  !record {model: account.journal, id: account_journal_correction}:
    code: COR
    company_id: base.main_company
    name: Correction Journal
    type: correction
    analytic_journal_id: analytic_correction_journal
    allow_date: 0
-
  I create a HQ Journal
-
  !record {model: account.journal, id: journal_hq}:
    code: hq
    company_id: base.main_company
    name: HQ Journal
    type: hq
    allow_date: 0
    analytic_journal_id: analytic_journal_hq
-
  I update company to have 4000 account as hq default counterpart
-
  !python {model: res.company}: |
    assert self.write(cr, uid, [ref('base.main_company')], {'counterpart_hq_entries_default_account': ref('account_4000')}) == ref('base.main_company'), "Setting up company HQ counterpart (%) failed!" % ref('account_4000')
-
  I create a link between 6400 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_6400_operation}:
    account_id: account_6400
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6400 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_6400_support}:
    account_id: account_6400
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create a link between 6401 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_6401_operation}:
    account_id: account_6401
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6401 expense account and National Staff destination
-
  !record {model: account.destination.link, id: tuple_6401_nat}:
    account_id: account_6401
    destination_id: analytic_distribution.analytic_account_destination_national_staff
-
  I create a link between 6412 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_6412_operation}:
    account_id: account_6412
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6412 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_6412_support}:
    account_id: account_6412
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create a link between 6303 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_6303_support}:
    account_id: account_6303
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create CC1 analytic account
-
  !record {model: account.analytic.account, id: cc1}:
    name: Cost Center 1
    code: CC1
    type: normal
    category: OC
    date_start: !eval time.strftime('%Y-01-01')
-
  I create FP1 analytic account
-
  !record {model: account.analytic.account, id: fp1}:
    name: Funding Pool 1
    code: FP1
    category: FUNDING
    date_start: !eval time.strftime('%Y-01-01')
    cost_center_ids: [cc1]
    tuple_destination_account_ids: [tuple_6400_operation, tuple_6400_support, tuple_6401_operation, tuple_6401_nat, tuple_6412_operation, tuple_6412_support, tuple_6303_support]
-
  I add a new FX rate for EUR, CHF and BIF for the first day of this year
-
  !python {model: res.currency.rate}: |
    import time
    self.create(cr, uid, {
      'currency_id': ref('base.BIF'),
      'name': time.strftime('%Y-01-01'),
      'rate': 226.0,
    })
    self.pool.get('res.currency').write(cr, uid, [ref('base.BIF')], {'active': True})
-
  I activate all needed destination analytic account
-
  !python {model: account.analytic.account}: |
    import time
    self.write(cr, uid, [ref('analytic_distribution.analytic_account_destination_support'), ref('analytic_distribution.analytic_account_destination_operation'), ref('analytic_distribution.analytic_account_destination_national_staff'), ref('analytic_distribution.analytic_account_msf_private_funds')], {'date_start': time.strftime('%Y-01-01')})
