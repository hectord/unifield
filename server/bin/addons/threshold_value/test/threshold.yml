-
  In order to test the threshold rules feature, I will create
  a threshold rule for each product defined in data.yml, run
  the scheduler and check if a procurement order is created or
  not
-
  I create a threshold rule for product1/2/5/8/9/11
-
  !record {model: threshold.value, id: threshold1}:
    name: Threshold1
    location_id: stock.stock_location_stock
    compute_method: computed
    consumption_method: amc
    frequency: 3.00
    safety_month: 1.00
    lead_time: 1.50
    supplier_lt: False
    line_ids:
      - product_id: product1
        product_uom_id: product.product_uom_unit
      - product_id: product2
        product_uom_id: product.product_uom_unit
      - product_id: product5
        product_uom_id: product.product_uom_unit
      - product_id: product8
        product_uom_id: product.product_uom_unit
      - product_id: product9
        product_uom_id: product.product_uom_unit
      - product_id: product11
        product_uom_id: product.product_uom_unit
-
  Update the period of consumption
-
  !python {model: threshold.value}: |
    import datetime
    from dateutil.relativedelta import relativedelta
    self.write(cr, uid, [ref('threshold1')], {'consumption_period_from': (datetime.datetime.today() + relativedelta(day=1, months=-2)).strftime('%Y-%m-%d'), 
                                              'consumption_period_to': (datetime.datetime.today() + relativedelta(months=1, day=1, days=-1)).strftime('%Y-%m-%d')})
-
  I create a threshold rule for product3/4/6/7
-
  !record {model: threshold.value, id: threshold2}:
    name: Threshold2
    location_id: stock.stock_location_stock
    compute_method: fixed
    line_ids:
      - product_id: product3
        product_uom_id: product.product_uom_unit
        fixed_threshold_value: 250
        fixed_product_qty: 500
      - product_id: product4
        product_uom_id: product.product_uom_unit
        fixed_threshold_value: 250
        fixed_product_qty: 75
      - product_id: product6
        product_uom_id: product.product_uom_unit
        fixed_threshold_value: 250
        fixed_product_qty: 150
      - product_id: product7
        product_uom_id: product.product_uom_unit
        fixed_threshold_value: 250
        fixed_product_qty: 150
-
  I run the scheduler
-
  !python {model: procurement.order}: |
    self.run_threshold_value(cr, uid, False, context={})
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1'), ('product_id', '=', ref('product1'))], context=context)
    assert res_ids, "No procurement created for product 1"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Product 1 (Expected 175.00 :: %s)" % res.product_qty
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1'), ('product_id', '=', ref('product2'))], context=context)
    assert not res_ids, "Procurement created for product 2"
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold2'), ('product_id', '=', ref('product3'))], context=context)
    assert not res_ids, "Procurement created for product 3"
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold2'), ('product_id', '=', ref('product4'))], context=context)
    assert res_ids, "No procurement created for product 4"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 75.00, "Bad quantity on procurement order for Product 4 (Expected 75.00 :: %s)" % res.product_qty
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1'), ('product_id', '=', ref('product5'))], context=context)
    assert res_ids, "No procurement created for product 5"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Product 5 (Expected 175.00 :: %s)" % res.product_qty
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold2'), ('product_id', '=', ref('product6'))], context=context)
    assert res_ids, "No procurement created for product 6"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 150.00, "Bad quantity on procurement order for Product 6 (Expected 150.00 :: %s)" % res.product_qty
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold2'), ('product_id', '=', ref('product7'))], context=context)
    assert not res_ids, "Procurement created for product 7"
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1'), ('product_id', '=', ref('product8'))], context=context)
    assert res_ids, "No procurement created for product 8"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Product 8 (Expected 175.00 :: %s)" % res.product_qty
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1'), ('product_id', '=', ref('product9'))], context=context)
    assert len(res_ids) == 1, "Too procurement created for threshold 9"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_id.id == ref('product9'), "No procurement created for product 9"
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Product 9 (Expected 175.00 :: %s)" % res.product_qty
- 
  I check if a procurement order was created
-
  !python {model: procurement.order}: |
    res_ids = self.search(cr, uid, [('name', '=', 'Threshold value: Threshold1'), ('product_id', '=', ref('product11'))], context=context)
    assert len(res_ids) == 1, "Too procurement created for threshold 11"
    res = self.browse(cr, uid, res_ids[0], context=context)
    assert res.product_id.id == ref('product11'), "Bad product on procurement order for Threshold 11"
    assert res.product_qty == 175.00, "Bad quantity on procurement order for Product 11 (Expected 175.00 :: %s)" % res.product_qty