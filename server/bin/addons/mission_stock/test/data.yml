-
  In order to test the behaviour of the mission stock report,
  we will create a mission stock report for an other instance
  and use the local instance.
-
    In order to test the mission stock module, we start by creating a new product category
-
  Create a new partner for coordination
-
  !record {model: res.partner, id: coord1}:
    name: Coordo
-
  !record {model: product.category, id: product_cat1}:
    name: Categ1
-
  To do this, we need a product
-
  !record {model: product.product, id: product1}:
    categ_id: product_cat1
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    reviewed_consumption: 45
    international_status: product_attributes.int_1
-
  We create also a new Unifield instance which is not a local instance
-
  !record {model: account.analytic.account, id: analytic_account_kenya2}:
    name: "Kenya2"
    currency_id: 1
    code: KEN2
    type: normal
    category: OC
    parent_id: analytic_distribution.analytic_account_project
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
-
  We create also a new comp. Cost Center
-
  !record {model: account.analytic.account, id: analytic_account_mal}:
    name: "MAL"
    currency_id: 1
    code: MAL
    type: normal
    category: OC
    parent_id: analytic_distribution.analytic_account_project
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
-
  !record {model: msf.instance, id: proj1}:
    level: project
    code: PROJ1
    mission: Mission Test
    instance: Proj. instance
    #parent_id: msf_instance.instance_section
    name: Project 1
    target_cost_center_ids:
      - cost_center_id: analytic_account_kenya2
        is_target: True
        is_top_cost_center: True
        is_po_fo_cost_center: True
    state: active
    move_prefix: TEST
    reconcile_prefix: T1
-
  Activate the local instance
-
  !python {model: msf.instance}: |
    user = self.pool.get('res.users').browse(cr, uid, uid)
    if user.company_id.instance_id:
        comp_instance = user.company_id.instance_id.id
    else:
        comp_instance = self.create(cr, uid, {'code': 'Comp Instance', 'name': 'Comp', 'level': 'section', 'move_prefix': 'COMP', 'reconcile_prefix': 'C1'})
        self.pool.get('account.target.costcenter').create(cr, uid, {'cost_center_id': ref('analytic_account_mal'), 'instance_id': comp_instance, 'is_target': True, 'is_top_cost_center': True, 'is_po_fo_cost_center': True})
        self.pool.get('res.company').write(cr, uid, [user.company_id.id], {'instance_id': comp_instance})
    self.write(cr, uid, ref('proj1'), {'parent_id': comp_instance})
    self.write(cr, uid, comp_instance, {'state': 'active'})
-
  Create a mission report for the project instance
-
  !record {model: stock.mission.report, id: report_proj}:
    name: Project report
    instance_id: proj1
    full_view: False
    report_line:
      - product_id: product1
        internal_qty: 100.00
        internal_val: 9000.00
        stock_qty: 55.00
        stock_val: 4950.00
        central_qty: 45.00
        central_val: 4050.00
        cross_qty: 0.00
        cross_val: 0.00
        secondary_qty: 0.00
        secondary_val: 0.00
        cu_qty: 0.00
        cu_val: 0.00
-
  Create some configurable locations
-
  !python {model: stock.location.configuration.wizard}: |
    eprep_id = self.create(cr, uid, {'location_name': 'EPREP',
                                     'location_usage': 'eprep',}, context={})
    is1_id = self.create(cr, uid, {'location_name': 'IS1',
                                   'location_usage': 'stock',}, context={})
    is2_id = self.create(cr, uid, {'location_name': 'IS2',
                                   'location_usage': 'stock',}, context={})
    cu1_id = self.create(cr, uid, {'location_name': 'CU1',
                                   'location_usage': 'consumption_unit',
                                   'location_type': 'internal'}, context={})
    cu2_id = self.create(cr, uid, {'location_name': 'CU2',
                                   'location_usage': 'consumption_unit',
                                   'location_type': 'internal'}, context={})
    cu3_id = self.create(cr, uid, {'location_name': 'CU3',
                                   'location_usage': 'consumption_unit',
                                   'location_type': 'customer'}, context={})
    for to_create in [eprep_id, is1_id, is2_id, cu1_id, cu2_id, cu3_id]:
        self.confirm_creation(cr, uid, to_create)
-
  Create an inventory for the local instance
-
  !record {model: stock.inventory, id: local_inv}:
    name: Local inventory
    date: !eval time.strftime('%Y-%m-%d')
    inventory_line_id:
      - location_id: msf_cross_docking.stock_location_input
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 23
      - location_id: msf_cross_docking.stock_location_cross_docking
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 12
      - location_id: stock.stock_location_output
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 54
      - location_id: msf_outgoing.stock_location_packing
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 23
      - location_id: msf_outgoing.stock_location_dispatch
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 12
      - location_id: msf_outgoing.stock_location_distribution
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 7
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 28
      - location_id: msf_config_locations.stock_location_medical
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 56
      - location_id: msf_config_locations.stock_location_unalloc_medical
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 64
      - location_id: stock_override.stock_location_logistic
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 11
      - location_id: msf_config_locations.stock_location_unalloc_logistic
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 8
      - location_id: stock_override.stock_location_quarantine_scrap
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 2
      - location_id: stock_override.stock_location_quarantine_analyze
        product_uom: product.product_uom_unit
        product_id: product1
        product_qty: 5
-
  Add some lines in the inventory for configurable locations
-
  !python {model: stock.location}: |
    eprep_id = self.search(cr, uid, [('name', '=', 'EPREP')])
    assert eprep_id, 'No EPREP location found'
    is1_id = self.search(cr, uid, [('name', '=', 'IS1')])
    assert is1_id, 'No IS1 location found'
    is2_id = self.search(cr, uid, [('name', '=', 'IS2')])
    assert is2_id, 'No IS2 location found'
    cu1_id = self.search(cr, uid, [('name', '=', 'CU1')])
    assert cu1_id, 'No CU1 location found'
    cu2_id = self.search(cr, uid, [('name', '=', 'CU2')])
    assert cu2_id, 'No CU2 location found'
    cu3_id = self.search(cr, uid, [('name', '=', 'CU3')])
    assert cu3_id, 'No CU3 location found'
    
    line_obj = self.pool.get('stock.inventory.line')
    line_obj.create(cr, uid, {'location_id': eprep_id[0],
                              'inventory_id': ref('local_inv'),
                              'product_uom': ref('product.product_uom_unit'),
                              'product_id': ref('product1'),
                              'reason_type_id': ref('reason_types_moves.reason_type_loss'),
                              'product_qty': 30})
    line_obj.create(cr, uid, {'location_id': is1_id[0],
                              'inventory_id': ref('local_inv'),
                              'product_uom': ref('product.product_uom_unit'),
                              'product_id': ref('product1'),
                              'reason_type_id': ref('reason_types_moves.reason_type_loss'),
                              'product_qty': 24})
    line_obj.create(cr, uid, {'location_id': is2_id[0],
                              'inventory_id': ref('local_inv'),
                              'product_uom': ref('product.product_uom_unit'),
                              'product_id': ref('product1'),
                              'reason_type_id': ref('reason_types_moves.reason_type_loss'),
                              'product_qty': 23})
    line_obj.create(cr, uid, {'location_id': cu1_id[0],
                              'inventory_id': ref('local_inv'),
                              'product_uom': ref('product.product_uom_unit'),
                              'product_id': ref('product1'),
                              'reason_type_id': ref('reason_types_moves.reason_type_loss'),
                              'product_qty': 52})
    line_obj.create(cr, uid, {'location_id': cu2_id[0],
                              'inventory_id': ref('local_inv'),
                              'product_uom': ref('product.product_uom_unit'),
                              'product_id': ref('product1'),
                              'reason_type_id': ref('reason_types_moves.reason_type_loss'),
                              'product_qty': 64})
-
  We confirm the inventory
-
  !python {model: stock.inventory}: |
    self.action_confirm(cr, uid, [ref('local_inv')], context=context)
    self.action_done(cr, uid, [ref('local_inv')], context=context)
