-
  In order to test the purchase order followup in a
  normal flow, we will create a purchase order with
  one line, confirm it and see the result in the followup
  tool. Confirm the move and see the changes in the followup
  tool.
-
    I create supplier
-
  !record {model: res.partner, id: supplier_normal_flow}:
    name: S1
    supplier: True
-
    I create the address for the supplier
-
  !record {model: res.partner.address, id: address_normal_flow}:
    name: S1
    partner_id: supplier_normal_flow
-
  I create a product category
-
  !record {model: product.category, id: prod_cat_normal_flow}:
    name: Categ1
-
    I create the product
-
  !record {model: product.product, id: product_normal_flow}:
    categ_id: prod_cat_normal_flow
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 75.00
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
  I create a new Purchase order
-
  !record {model: purchase.order, id: po_normal_flow}:
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    partner_address_id: address_normal_flow
    partner_id: supplier_normal_flow
    pricelist_id: purchase.list0
-
  I create a line for the Purchase order
-
  !record {model: purchase.order.line, id: pol_normal_flow}:
    product_uom: product.product_uom_unit
    product_id: product_normal_flow
    order_id: po_normal_flow
    price_unit: 1.30
    product_qty: 10
    name: P1
    date_planned: !eval time.strftime('%Y-%m-%d')
- 
  I confirm the purchase order
-
  !python {model: purchase.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', ref('po_normal_flow'), 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', ref('po_normal_flow'), 'purchase_approve', cr)
-
  I launch the purchase followup wizard
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('po_normal_flow'),
               'active_ids': [ref('po_normal_flow')]}
    res = self.run(cr, uid, [ref('action_purchase_order_follow_up')], context)
    assert res != False, "Error on ir.actions.server launching"
-
  I check if the wizard is related to the purchase order and if the information are ok
-
  !python {model: purchase.order.followup}: |
    wiz_ids = self.search(cr, uid, [])
    for wiz in self.browse(cr, uid, wiz_ids):
        assert wiz.order_id.id == ref('po_normal_flow'), "The created wizard is not linked to the Purchase Order"
        assert len(wiz.line_ids) == 1, "Number of lines in the follow-up not corresponding to the number of lines in the purchase order"
        for line in wiz.line_ids:
          assert line.line_name == 1, "Line name is not equal to the name of the PO line"
          assert line.line_product_id.id == ref('product_normal_flow'), "Product on the line isn't the product in the PO line"
          assert line.line_product_qty == 10.0, "The product qty of the line is different than the qty in the PO line"
          assert line.line_uom_id.id == ref('product.product_uom_unit'), "The UoM of the line is different than the UoM of the PO line"
          #Â TODO: 
          #assert line.line_confirmed_date == 1, ""
          assert line.line_shipped_rate == 0.00, "Shipped rate on the followup is different than the shipped rate of the PO"
          assert not line.move_product_id, "Product of the move is displayed"
          assert not line.move_product_qty, "Product of the move is displayed"
          assert not line.move_uom_id, "Product of the move is displayed"
          assert line.move_state == 'Available', 'State of the move is incorrect in the followup line'
