    
- 
  Creating a res.partner record
- 
  !record {model: res.partner, id: rfq_res_partner_a0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: A
    supplier: true
    customer_lt: 1
    procurement_lt: 2
    transport_0_lt: 3
    transport_0: 'air'
    
- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: rfq_res_partner_address_0}:
    partner_id: rfq_res_partner_a0
    street: A
    
- 
  Creating a res.partner record
- 
  !record {model: res.partner, id: rfq_res_partner_b0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: B
    supplier: true
    
    
- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: rfq_res_partner_address_1}:
    partner_id: rfq_res_partner_b0
    street: B
    
-
  I create product template .
-
  !record {model: product.template, id: rfq_product_template_p0}:
    categ_id: product.cat0
    cost_method: standard
    mes_type: fixed
    name: P
    procure_method: make_to_stock
    standard_price: 160.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    
- 
  Creating a product.product record
- 
  !record {model: product.product, id: rfq_product_product_p0}:
    
    standard_price: 1.0
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    product_tmpl_id: rfq_product_template_p0
    international_status: product_attributes.int_1
    
    
- 
  Creating a product.supplierinfo record
- 
  !record {model: product.supplierinfo, id: rfq_product_supplierinfo_0}:
    delay: 1
    min_qty: 0.0
    name: rfq_res_partner_a0
    product_id: rfq_product_template_p0
    
    
- 
  Creating a product.supplierinfo record
- 
  !record {model: product.supplierinfo, id: rfq_product_supplierinfo_1}:
    delay: 1
    min_qty: 0.0
    name: rfq_res_partner_b0
    product_id: rfq_product_template_p0
    sequence: 10
    
    
- 
  Creating a sale.order record
- 
  !record {model: sale.order, id: rfq_sale_order_so0}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_quantity: order
    order_policy: manual
    partner_id: rfq_res_partner_a0
    partner_invoice_id: rfq_res_partner_address_0
    partner_order_id: rfq_res_partner_address_0
    partner_shipping_id: rfq_res_partner_address_0
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
    
    
- 
  Creating a sale.order.line record
- 
  !record {model: sale.order.line, id: rfq_sale_order_line_p0}:
    company_id: base.main_company
    delay: 7.0
    name: P
    order_id: rfq_sale_order_so0
    order_partner_id: rfq_res_partner_a0
    price_unit: 1.0
    product_id: product_product_p0
    product_uom: product.product_uom_unit
    product_uom_qty: 1.0
    salesman_id: base.user_admin
    state: draft
    th_weight: 0.0
    date_planned: !eval time.strftime('%Y-%m-%d')
    type: make_to_stock
-
  I create a Request for Quotation to the supplier
-
  !record {model: purchase.order, id: rfq_purchase_order}:
    name: RfQ1
    partner_id: rfq_res_partner_b0
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    partner_address_id: rfq_res_partner_address_1
    pricelist_id: purchase.list0
    rfq_ok: True
-
  Change the delivery requested date of the RfQ
-
  !python {model: purchase.order}: |
    from mx.DateTime import *
    new_date = now() - RelativeDate(days=2)
    self.write(cr, uid, ref('rfq_purchase_order'), {'delivery_requested_date': new_date.strftime('%Y-%m-%d')}, context=context)
-
  I check the sourcing line

-
  !python {model: sale.order.line}: |
    sol = self.browse(cr, uid, ref("rfq_sale_order_line_p0"))
    
    count = 0
    
    for sourcing in sol.sourcing_line_ids:
      count = count + 1
      assert sourcing.sale_order_id.id == ref("rfq_sale_order_so0"), 'sourcing line, sale order id is wrong (%i, %i)'%(sourcing.sale_order_id, ref("rfq_sale_order_so0"))
      assert int(sourcing.sale_order_line_id) == ref("rfq_sale_order_line_p0"), 'sourcing line, sale order line id is wrong (%i, %i)'%(sourcing.sale_order_line_id, ref("rfq_sale_order_line_p0"))
      assert sourcing.type == 'make_to_stock', 'sourcing type wrong'
      assert sourcing.state == 'draft', 'sourcing state wrong'
      assert sourcing.state == sourcing.sale_order_line_state, 'states wrong'
      assert not sourcing.supplier.id, 'make_to_stock: sourcing has a supplier !'
      
      sourcing.write({'type':'make_to_order', 'supplier':ref("rfq_res_partner_b0"), 'po_cft':'po'})
      
      assert int(sol.supplier) == ref("rfq_res_partner_b0"), 'sol supplier is wrong after update of sourcing line (%i, %i)'%(sol.supplier, ref("rfq_product_supplierinfo_1"))
      assert sol.type == 'make_to_order', 'sol type is wrong after update of sourcing line (%s, %s)'%(sol.type, 'make_to_order')
      
    assert count == 1, 'number of sourcing line wrong (%i)'%(count)
    
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("rfq_sale_order_so0"), 'order_confirm', cr)
    
    self.pool.get('procurement.order').run_scheduler(cr, uid)
    
    ids = self.pool.get('purchase.order').search(cr, uid, [('origin', '=', sol.order_id.name)])
    
    count = 0
    for po in self.pool.get('purchase.order').browse(cr, uid, ids):
      assert po.id != ref('rfq_purchase_order'), "The sourcing tool has source the need on an existing RfQ instead of a new PO"
    
    #assert sol.procurement_id.purchase_id.partner_id.id == ref("res_partner_b0"), 'partner is wrong for purchase order (%i, %i)'%(sol.procurement_id.purchase_id.partner_id.id, ref("res_partner_b0"))
     
