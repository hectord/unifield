-
  Product service
-
  !record {model: product.product, id: prod_service}:
    name: Prod service
    batch_management: False
    perishable: False
    international_status: product_attributes.int_1
    procure_method: make_to_order
    type: service
-
  Product service_recep
-
  !record {model: product.product, id: prod_service_recep}:
    name: Prod service_recep
    batch_management: False
    perishable: False
    international_status: product_attributes.int_1
    procure_method: make_to_order
    type: service_recep
-
  Product standard
-
  !record {model: product.product, id: prod_std}:
    name: Prod service_recep
    batch_management: False
    perishable: False
    international_status: product_attributes.int_1
    procure_method: make_to_order
-
  Location cross_docking
-
  !record {model: stock.location, id: location_cross_docking}:
    location_category: other
    name: Cross Docking
    usage: internal
    cross_docking_location_ok: True
    location_category: other
-
  Location service_location
-
  !record {model: stock.location, id: location_service}:
    location_category: other
    name: Service
    usage: internal
    service_location: True
    location_category: other
-
  Standard Loc
-
  !record {model: stock.location, id: location_std}:
    location_category: other
    name: Service
    usage: internal
    location_category: other
-
  In picking
-
  !record {model: stock.picking, id: in_pick}:
    type: in
-
  Create stock.move
-
  !python {model: stock.move}: |
    from osv import osv

    self.create(cr, uid, {
        'picking_id': ref('in_pick'),
        'product_id': ref('prod_service_recep'),
        'product_qty': 10,
        'product_uom': ref('product.product_uom_unit'),
        'location_dest_id': ref('location_cross_docking'),
        'location_id': ref('stock.stock_location_stock'),
        'name': 'M1',
        'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
    })
    self.create(cr, uid, {
        'picking_id': ref('in_pick'),
        'product_id': ref('prod_service_recep'),
        'product_qty': 10,
        'product_uom': ref('product.product_uom_unit'),
        'location_dest_id': ref('location_service'),
        'location_id': ref('stock.stock_location_stock'),
        'name': 'M1',
        'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
    })
    try:
        self.create(cr, uid, {
            'picking_id': ref('in_pick'),
            'product_id': ref('prod_service_recep'),
            'product_qty': 10,
            'product_uom': ref('product.product_uom_unit'),
            'location_dest_id': ref('location_std'),
            'location_id': ref('stock.stock_location_stock'),
            'name': 'M1',
            'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
        })
        assert False, 'Service with recept in standard dest loc should raised an error'
    except osv.except_osv, e:
        pass
    try:
        self.create(cr, uid, {
            'picking_id': ref('in_pick'),
            'product_id': ref('prod_std'),
            'product_qty': 10,
            'product_uom': ref('product.product_uom_unit'),
            'location_dest_id': ref('location_service'),
            'location_id': ref('stock.stock_location_stock'),
            'name': 'M1',
            'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
        })
        assert False, 'Standard product in location dest service should raised'
    except osv.except_osv, e:
        pass
    try:
        self.create(cr, uid, {
            'picking_id': ref('in_pick'),
            'product_id': ref('prod_std'),
            'product_qty': 10,
            'product_uom': ref('product.product_uom_unit'),
            'location_dest_id': ref('location_std'),
            'location_id': ref('location_service'),
            'name': 'M1',
            'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
        })
        assert False, 'Standard product in location src service should raised'
    except osv.except_osv, e:
        pass
-
  Internal picking
-
  !record {model: stock.picking, id: internal_pick}:
    type: internal
-
  Stock Move
-
  !python {model: stock.move}: |
    from osv import osv
    self.create(cr, uid, {
        'picking_id': ref('internal_pick'),
        'product_id': ref('prod_service'),
        'product_qty': 10,
        'product_uom': ref('product.product_uom_unit'),
        'location_id': ref('location_cross_docking'),
        'location_dest_id': ref('location_service'),
        'name': 'M1',
        'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
    })
    try:
        self.create(cr, uid, {
            'picking_id': ref('internal_pick'),
            'product_id': ref('prod_service'),
            'product_qty': 10,
            'product_uom': ref('product.product_uom_unit'),
            'location_id': ref('location_std'),
            'location_dest_id': ref('location_service'),
            'name': 'M1',
            'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
        })
        assert False, 'Internal pick: Service product from standard loc should raised'
    except osv.except_osv, e:
        pass
    try:
        self.create(cr, uid, {
            'picking_id': ref('internal_pick'),
            'product_id': ref('prod_service'),
            'product_qty': 10,
            'product_uom': ref('product.product_uom_unit'),
            'location_id': ref('location_cross_docking'),
            'location_dest_id': ref('location_std'),
            'name': 'M1',
            'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
        })
        assert False, 'Internal pick: Service product to standard loc should raised'
    except osv.except_osv, e:
        pass
-
  Standard out picking
-
  !record {model: stock.picking, id: out_pick}:
    type: out
    subtype: standard
-
  Stock Move
-
  !python {model: stock.move}: |
    from osv import osv
    self.create(cr, uid, {
        'picking_id': ref('out_pick'),
        'product_id': ref('prod_service'),
        'product_qty': 10,
        'product_uom': ref('product.product_uom_unit'),
        'location_id': ref('location_cross_docking'),
        'location_dest_id': ref('location_std'),
        'name': 'M1',
        'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
    })
    try:
        self.create(cr, uid, {
            'picking_id': ref('out_pick'),
            'product_id': ref('prod_service'),
            'product_qty': 10,
            'product_uom': ref('product.product_uom_unit'),
            'location_id': ref('location_service'),
            'location_dest_id': ref('location_std'),
            'name': 'M1',
            'reason_type_id': ref('reason_types_moves.reason_type_deliver_partner'),
        })
        assert False, 'Out pick: Service product from service loc should raised'
    except osv.except_osv, e:
        pass
