-
  In order to test features of the stock_schedule module,
  I will create a new planification with weekly parameter and test
  different cases
-
  First weekly test
-
  !record {model: stock.frequence, id: weekly1}:
    name: weekly
    weekly_frequency: 1
    weekly_sunday_ok: 1
    weekly_monday_ok: 0
    start_date: !eval time.strftime('%Y-%m-%d', time.strptime('2010-03-03', '%Y-%m-%d'))
    no_end_date: True
-
  Check if the last date is a Sunday 
-
  !python {model: stock.frequence}: |
    from mx.DateTime import *
    next_date = Parser.DateFromString(self.browse(cr, uid, ref('weekly1')).next_date)
    assert next_date and next_date.weekday() == 6 and next_date >= today(), "Next date not a Sunday"
-
  Add wednesday to the weekly1
-
  !record {model: stock.frequence, id: weekly1}:
    weekly_wednesday_ok: 1
-
  Check if the next date is a wednesday or a sunday
-
  !python {model: stock.frequence}: |
    from mx.DateTime import *
    next_date = Parser.DateFromString(self.browse(cr, uid, ref('weekly1')).next_date)
    assert next_date and (next_date.weekday() == 6 or next_date.weekday() == 2) and next_date >= today(), "Next date not a Sunday or a Wednesday"
-
  Change no end date to end date
-
  !record {model: stock.frequence, id: weekly1}:
    no_end_date: False
    end_date_ok: True
    end_date: !eval time.strftime('%Y-%m-%d', time.strptime('2011-03-03', '%Y-%m-%d'))
-
  Check if the last date is False
-
  !python {model: stock.frequence}: |
    next_date = self.browse(cr, uid, ref('weekly1')).next_date
    assert not next_date, "Next date found on weekly1"
-
  Change end date to recurrence for 5 years
-
  !record {model: stock.frequence, id: weekly1}:
    end_date_ok: False
    recurrence_ok: True
    recurrence_nb: 5
    recurrence_type: 'year'
-
  Check if the last date isn't False 
-
  !python {model: stock.frequence}: |
    from mx.DateTime import *
    next_date = self.browse(cr, uid, ref('weekly1')).next_date
    assert next_date and next_date >= today(), "Next date not found on weekly1"
-
  Change recurrence from 5 years to 5 months
-
  !record {model: stock.frequence, id: weekly1}:
    recurrence_type: 'month'
-
  Check if the last date isn't False 
-
  !python {model: stock.frequence}: |
    next_date = self.browse(cr, uid, ref('weekly1')).next_date
    assert not next_date, "Next date not found on weekly1"