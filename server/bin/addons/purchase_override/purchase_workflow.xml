<?xml version="1.0" encoding="utf-8" ?>
<openerp>
    <data>
    
        <record id="act_loan" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">loan</field>
            <field name="kind">subflow</field>
            <field name="subflow_id" search="[('osv','=','sale.order')]" type="int"/>
            <field name="action">action_sale_order_create()</field>
        </record>
        <record id="act_loan_done" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order" />
            <field name="name">loan_done</field>
        </record>
        
        <record id="trans_router_loan" model="workflow.transition">
            <field name="act_from" ref="purchase.act_router" />
            <field name="act_to" ref="act_loan" />
            <field name="condition">need_counterpart()</field>
        </record>
        <record id="trans_router_loan_done" model="workflow.transition">
            <field name="act_from" ref="purchase.act_router" />
            <field name="act_to" ref="act_loan_done" />
            <field name="condition">go_to_loan_done()</field>
        </record>
        <record id="trans_loan_done" model="workflow.transition">
            <field name="act_from" ref="act_loan"/>
            <field name="act_to" ref="act_loan_done"/>
            <field name="signal">subflow.done</field>
        </record>
        <record id="trans_loand_done_end" model="workflow.transition">
            <field name="act_from" ref="act_loan_done" />
            <field name="act_to" ref="purchase.act_done" />
        </record>

        <!-- Redefine the signal to go from Receipt Exception to Closed states -->
        <record id="purchase.trans_except_picking_picking_done" model="workflow.transition">
            <field name="act_from" ref="purchase.act_except_picking" />
            <field name="act_to" ref="purchase.act_picking_done" />
            <field name="signal" eval="False" />
        </record>
        
        <!-- Redefine the condition to take into account the DPO process (invoice create at confirmation, but
             the workflow isn't blocked by the invoicing process) -->
        <record id="act_dpo_invoice" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">dpo_invoice</field>
            <field name="kind">function</field>
            <field name="action">action_invoice_create()</field>
        </record>
             
        <record id="trans_router_dpo_invoice" model="workflow.transition">
            <field name="act_from" ref="purchase.act_router"/>
            <field name="act_to" ref="act_dpo_invoice"/>
            <field name="condition">invoice_method=='order' and order_type=='direct'</field>
        </record>
        <record id="trans_dpo_invoice_invoice_done" model="workflow.transition">
            <field name="act_from" ref="act_dpo_invoice"/>
            <field name="act_to" ref="purchase.act_invoice_done"/>
        </record>
        <record id="purchase.trans_router_invoice" model="workflow.transition">
            <field name="condition">invoice_method=='order' and order_type!='direct'</field>
        </record>
        
        <!-- Modify the action of the approved activity because DPO shouldn't be received
             if any user hasn't validated the reception at the customer side -->
        <record id="purchase.act_picking_done" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">picking_done</field>
            <field name="action">wkf_picking_done()</field>
            <field name="kind">function</field>
            <field name="signal_send">subflow.delivery_done</field>
        </record>
        
        <!-- Add an activity to wait the confirmation of the reception of the DPO at customer side -->
        <record id="act_dpo_wait" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">dpo_wait</field>
            <field name="kind">dummy</field>
        </record>
        
        <record id="trans_router_dpo_wait" model="workflow.transition">
            <field name="act_from" ref="purchase.act_router"/>
            <field name="act_to" ref="act_dpo_wait"/>
            <field name="condition">order_type=='direct'</field>
        </record>
        <record id="trans_dpo_wait_loan_done" model="workflow.transition">
        	<field name="act_from" ref="act_dpo_wait" />
        	<field name="act_to" ref="act_loan_done" />
        	<field name="signal">dpo_received</field>
        </record>"

    <!-- Redefine Cancel and Done activites for Accounting Commitments -->
        <record id="purchase.act_cancel" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">cancel</field>
            <field name="kind">function</field>
            <field name="flow_stop" eval="False" />
            <field name="action">wkf_action_cancel_po()</field>
            <field name="signal_send">subflow.cancel</field>
        </record>

        <record id="purchase.act_done" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">done</field>
            <field name="action">action_done()</field>
            <field name="kind">function</field>
            <field name="flow_stop">True</field>
            <field name="join_mode">AND</field>
        </record>
        
        <!-- CONFIRMED_WAIT state -->
        
        <record id="act_confirmed_wait" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">confirmed_wait</field>
            <field name="kind">function</field>
            <field name="action">wkf_confirm_wait_order()</field>
        </record>
        
        <record id="trans_confirmed_confirmed_wait" model="workflow.transition">
            <field name="act_from" ref="purchase.act_confirmed" />
            <field name="act_to" ref="act_confirmed_wait" />
            <field name="signal">purchase_confirmed_wait</field>
            <field name="condition">check_if_product()</field>
        </record>
        
        <!-- TRIGGER_SO_PO state -->
        
        <record id="act_trigger_so_po" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order"/>
            <field name="name">trigger_so_po</field>
            <field name="kind">function</field>
            <field name="action">wkf_confirm_trigger()</field>
        </record>

        <record id="act_cancel_stop" model="workflow.activity">
            <field name="wkf_id" ref="purchase.purchase_order" />
            <field name="name">cancel_stop</field>
            <field name="kind">function</field>
            <field name="flow_stop">True</field>
            <field name="action">wkf_confirm_cancel()</field>
        </record>

        <record id="trans_cancel_stop" model="workflow.transition">
            <field name="act_from" ref="purchase.act_cancel" />
            <field name="act_to" ref="act_cancel_stop" />
        </record>
        
        <record id="trans_confirmed_wait_trigger_so_po" model="workflow.transition">
            <field name="act_from" ref="act_confirmed_wait" />
            <field name="act_to" ref="act_trigger_so_po" />
            <field name="condition">all_po_confirmed()</field>
        </record>
        
        <record id="trans_trigger_so_po_router" model="workflow.transition">
            <field name="act_from" ref="act_trigger_so_po" />
            <field name="act_to" ref="purchase.act_router" />
        </record>

    </data>
</openerp>
