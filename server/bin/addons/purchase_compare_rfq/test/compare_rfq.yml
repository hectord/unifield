-
    I launch the comparison
-
  !python {model: ir.actions.server}: |
    context = {'active_id':  ref('purchase_compare_rfq.rfq1'),
               'active_ids': [ref('purchase_compare_rfq.rfq1'),ref('purchase_compare_rfq.rfq2'),ref('purchase_compare_rfq.rfq3'),]}
    res = self.run(cr, uid, [ref('purchase_compare_rfq.action_compare_rfq')], context)
    assert res != False, "Error on ir.actions.server launching"
-
    I check the creation of the wizard
-
  !python {model: wizard.compare.rfq}: |
    assert len(self.search(cr, uid, [])) == 1, "Wrong number of created wizard (expected: 1 :: result: %s)" % len(self.search(cr, uid, []))
-
    I check if the wizard has three lines (one by product)
-
  !python {model: wizard.compare.rfq.line}: |
    assert len(self.search(cr, uid, [])) == 3, "Wrong number of created wizard lines (expected: 3 :: result: %s)" % len(self.search(cr, uid, []))
    assert len(self.search(cr, uid, [('product_id', '=', ref('product1'))])) == 1, "Wrong number of lines for P1 (expected: 1 :: result: %s)" % len(self.search(cr, uid, [('product_id', '=', ref('product1'))]))
    assert len(self.search(cr, uid, [('product_id', '=', ref('product2'))])) == 1, "Wrong number of lines for P2 (expected: 1 :: result: %s)" % len(self.search(cr, uid, [('product_id', '=', ref('product2'))]))
    assert len(self.search(cr, uid, [('product_id', '=', ref('product3'))])) == 1, "Wrong number of lines for P3 (expected: 1 :: result: %s)" % len(self.search(cr, uid, [('product_id', '=', ref('product3'))]))
-
    I compare supplier's quotations for P1 
-
  !python {model: wizard.compare.rfq.line}: |
    line_ids = self.search(cr, uid, [('product_id', '=', ref('product1'))])
    assert len(line_ids) > 0, "No line found for P1 (expected: > 0 :: result: %s" % len(line_ids)
    if line_ids:
      choose_line_obj = self.pool.get('wizard.choose.supplier.line')
      choose_obj = self.pool.get('wizard.choose.supplier')
      self.choose_supplier(cr, uid, line_ids[0])
-
    I check if the wizard has well been created
-
  !python {model: wizard.choose.supplier}: |
    wiz_ids = self.search(cr, uid, [('product_id', '=', ref('product1'))])
    assert len(wiz_ids) == 1, "Wrong number of wizard choose supplier for P1 (Expected : 1 :: Result : %s)" %len(wiz_ids)
    wiz = self.browse(cr, uid, wiz_ids[0])
    assert len(wiz.line_ids) == 3, "Wrong number of choose supplier lines for P1 (Expected : 3 :: Result : %s)" %len(wiz.line_ids)
-
    I choose S1 for P1
-
  !python {model: wizard.choose.supplier.line}: |
    compare_line_obj = self.pool.get('wizard.compare.rfq.line')
    c_line_ids = compare_line_obj.search(cr, uid, [('product_id', '=', ref('product1'))])
    line_ids = self.search(cr, uid, [('compare_line_id', 'in', c_line_ids), ('supplier_id', '=', ref('supplier1'))])
    if line_ids:
      self.choose_supplier(cr, uid, line_ids[0])
      assert len(compare_line_obj.search(cr, uid, [('product_id', '=', ref('product1'))])) == 1, "Wrong number of line for S1 for P1"
      c_line_ids = compare_line_obj.search(cr, uid, [('product_id', '=', ref('product1'))])
      for l in compare_line_obj.browse(cr, uid, c_line_ids):
        assert l.supplier_id.id == ref('supplier1'), "Wrong supplier for P1"
-
    I compare supplier's quotations for P2 
-
  !python {model: wizard.compare.rfq.line}: |
    line_ids = self.search(cr, uid, [('product_id', '=', ref('product2'))])
    assert len(line_ids) > 0, "No line found for P2"
    if line_ids:
      choose_line_obj = self.pool.get('wizard.choose.supplier.line')
      choose_obj = self.pool.get('wizard.choose.supplier')
      self.choose_supplier(cr, uid, line_ids[0])
-
    I check if the wizard has well been created
-
  !python {model: wizard.choose.supplier}: |
    wiz_ids = self.search(cr, uid, [('product_id', '=', ref('product2'))])
    assert len(wiz_ids) == 1, "Wrong number of wizard choose supplier for P2 (Result : %s)" %len(wiz_ids)
    wiz = self.browse(cr, uid, wiz_ids[0])
    assert len(wiz.line_ids) == 2, "Wrong number of choose supplier lines for P2 (Result : %s)" %len(wiz.line_ids)
-
    I choose S1 for P2
-
  !python {model: wizard.choose.supplier.line}: |
    compare_line_obj = self.pool.get('wizard.compare.rfq.line')
    c_line_ids = compare_line_obj.search(cr, uid, [('product_id', '=', ref('product2'))])
    line_ids = self.search(cr, uid, [('compare_line_id', 'in', c_line_ids), ('supplier_id', '=', ref('supplier1'))])
    if line_ids:
      self.choose_supplier(cr, uid, line_ids[0])
      assert len(compare_line_obj.search(cr, uid, [('product_id', '=', ref('product2'))])) == 1, "Wrong number of line for S1 for P2"
      c_line_ids = compare_line_obj.search(cr, uid, [('product_id', '=', ref('product2'))])
      for l in compare_line_obj.browse(cr, uid, c_line_ids):
        assert l.supplier_id.id == ref('supplier1'), "Wrong supplier for P2"
-
    I compare supplier's quotations for P3
-
  !python {model: wizard.compare.rfq.line}: |
    line_ids = self.search(cr, uid, [('product_id', '=', ref('product3'))])
    assert len(line_ids) > 0, "No line found for P3"
    if line_ids:
      choose_line_obj = self.pool.get('wizard.choose.supplier.line')
      choose_obj = self.pool.get('wizard.choose.supplier')
      self.choose_supplier(cr, uid, line_ids[0])
-
    I check if the wizard has well been created
-
  !python {model: wizard.choose.supplier}: |
    wiz_ids = self.search(cr, uid, [('product_id', '=', ref('product3'))])
    assert len(wiz_ids) == 1, "Wrong number of wizard choose supplier for P3 (Result : %s)" %len(wiz_ids)
    wiz = self.browse(cr, uid, wiz_ids[0])
    assert len(wiz.line_ids) == 3, "Wrong number of choose supplier lines for P3 (Result : %s)" %len(wiz.line_ids)
-
    I choose S1 for P3
-
  !python {model: wizard.choose.supplier.line}: |
    compare_line_obj = self.pool.get('wizard.compare.rfq.line')
    c_line_ids = compare_line_obj.search(cr, uid, [('product_id', '=', ref('product3'))])
    line_ids = self.search(cr, uid, [('compare_line_id', 'in', c_line_ids), ('supplier_id', '=', ref('supplier1'))])
    if line_ids:
      self.choose_supplier(cr, uid, line_ids[0])
      assert len(compare_line_obj.search(cr, uid, [('product_id', '=', ref('product3'))])) == 1, "Wrong number of line for S1 for P1"
      c_line_ids = compare_line_obj.search(cr, uid, [('product_id', '=', ref('product3'))])
      for l in compare_line_obj.browse(cr, uid, c_line_ids):
        assert l.supplier_id.id == ref('supplier1'), "Wrong supplier for P1"
-
    I confirm the PO creation
-
  !python {model: wizard.compare.rfq}: |
    wiz_id = self.search(cr, uid, [])[0]
    self.create_po(cr, uid, wiz_id)
-
    I check if only one PO has been created for this wizard
-
  !python {model: purchase.order}: |
    po_id = self.search(cr, uid, [('partner_id', '=', ref('supplier1'))])
    assert len(po_id) == 1, "Wrong number of generated PO"
    po = self.browse(cr, uid, po_id[0])
    assert len(po.order_line) == 3, "Wrong number of lines on the PO for S1"
    for line in po.order_line:
      if line.product_id.id == ref('product1'):
        assert line.price_unit == 1.30, "Wrong price unit for line with P1 - 1.30 : %s" % line.price_unit
        assert line.product_qty == 10.00, "Wrong quantity for line with P1 - 10 : %s" % line.product_qty
      elif line.product_id.id == ref('product2'):
        assert line.price_unit == 1.75, "Wrong price unit for line with P2 - 1.75 : %s" % line.price_unit
        assert line.product_qty == 20.00, "Wrong quantity for line with P2 - 20 : %s" % line.product_qty
      elif line.product_id.id == ref('product3'):
        assert line.price_unit == 2.17, "Wrong price unit for line with P3 - 2.17 : %s" % line.price_unit
        assert line.product_qty == 30.00, "Wrong quantity for line with P3 - 30 : %s" % line.product_qty
      else:
        assert True == False, "Found line with product different of P1, P2 or P3"
-
  I check if two other RfQ has been deleted
-
  !python {model: purchase.order}: |
    assert len(self.search(cr, uid, [('id', '=', ref('rfq2'))])) == 0, "RfQ 2 wasn't deleted"
    assert len(self.search(cr, uid, [('id', '=', ref('rfq3'))])) == 0, "RfQ 3 wasn't deleted"
