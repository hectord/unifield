- 
  Creating a res.partner record
- 
  !record {model: res.partner, id: res_partner_partnertest0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: partner test
    supplier: true


- 
  Creating a res.partner.address record
- 
  !record {model: res.partner.address, id: res_partner_address_0}:
    partner_id: res_partner_partnertest0
    street: street test  


- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest0}:
    name: nomenclature test 1


- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest1}:
    level: 1
    name: nomenclature test 2
    parent_id: product_nomenclature_nomenclaturetest0


- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest2}:
    level: 2
    name: nomenclature test 3
    parent_id: product_nomenclature_nomenclaturetest1


- 
  Creating a product.nomenclature record
- 
  !record {model: product.nomenclature, id: product_nomenclature_nomenclaturetest3}:
    level: 3
    name: nomenclature test 4
    parent_id: product_nomenclature_nomenclaturetest2


- 
  Creating a product.category record
- 
  !record {model: product.category, id: product_category_allproducts0}:
    name: All products
    sequence: 0.0
    family_id: product_nomenclature_nomenclaturetest2


- 
  Creating a product.product record
- 
  !record {model: product.product, id: product_product_producttest0}:
    categ_id: product_category_allproducts0
    cost_method: standard
    mes_type: fixed
    name: product test
    name_template: product test
    nomen_manda_0: product_nomenclature_nomenclaturetest0
    nomen_manda_1: product_nomenclature_nomenclaturetest1
    nomen_manda_2: product_nomenclature_nomenclaturetest2
    nomen_manda_3: product_nomenclature_nomenclaturetest3
    procure_method: make_to_order
    seller_delay: '1'
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
    
    
-

  I check the onchange function, product_nomenclature.onChangeParentId

-
  !python {model: product.nomenclature}: |
    nom = self.browse(cr, uid, ref("product_nomenclature_nomenclaturetest3"))

    result = nom.onChangeParentId('mandatory', ref("product_nomenclature_nomenclaturetest2"))
    
    assert nom.level == result['value']['level'], 'level wrong'

