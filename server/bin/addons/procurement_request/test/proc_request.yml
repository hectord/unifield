-
  Theses tests aim to check if the behaviour of the procurement request is good
-
  We create a new sale order
-
  !record {model: sale.order, id: so1}:
    name: SO1
    company_id: base.main_company
    picking_policy: direct
    order_policy: manual
    invoice_quantity: order
    partner_order_id: address1
    partner_invoice_id: address1
    partner_shipping_id: address1
    partner_id: supplier1
    pricelist_id: purchase.list0
-
  We check if the sale order is a normal SO
-
  !assert {model: sale.order, id: so1}:
    - procurement_request == False, "Normal sale order is a procurement request !"
-
  We create a new procurement request
-
  !record {model: sale.order, id: pr1, context: {'procurement_request': True}}:
    name: PR1
    delivery_requested_date: !eval time.strftime('%Y-%m-%d')
-
  We check if the new procurement request is a good procurement request
-
  !assert {model: sale.order, id: pr1}:
    - procurement_request == True, "The procurement requests is not considered than a procurement request"
-
  We create a new procurement request to check the workflow
-
  !record {model: sale.order, id: pr2, context: {'procurement_request': True}}:
    name: PR2
-
  We create lines for this procurement request
-
  !record {model: sale.order.line, id: pr2l1, context: {'procurement_request': True}}:
    name: P1
    product_id: product1
    product_uom: product.product_uom_unit
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line
-
  !record {model: sale.order.line, id: pr2l2, context: {'procurement_request': True}}:
    name: P2
    product_id: product2
    product_uom: product.product_uom_unit
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr2
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate this procurement request
-
  !workflow {model: sale.order, action: procurement_validate, ref: pr2}
-
  We confirm this procurement request
-
  !workflow {model: sale.order, action: procurement_confirm, ref: pr2}
-
  We check the state of the procurement request
-
  !assert {model: sale.order, id: pr2}:
    - state == 'progress', "Bad state for the procurement request"
-
  We close this procurement request
-
  !workflow {model: sale.order, action: order_confirm, ref: pr2}
-
  We check the state of the procurement request
-
  !assert {model: sale.order, id: pr2}:
    - state == 'done', "Bad state for the procurement request"
-
  We create a new procurement request to check the workflow
-
  !record {model: sale.order, id: pr3, context: {'procurement_request': True}}:
    name: PR3
-
  We create lines for this procurement request
-
  !record {model: sale.order.line, id: pr3l1, context: {'procurement_request': True}}:
    name: P1
    product_id: product1
    product_uom: product.product_uom_unit
    date_planned: !eval time.strftime('%Y-%m-%d')
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr3
-
  We create a second line
-
  !record {model: sale.order.line, id: pr3l2, context: {'procurement_request': True}}:
    name: P2
    product_id: product2
    product_uom: product.product_uom_unit
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr3
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate this procurement request
-
  !workflow {model: sale.order, action: procurement_confirm, ref: pr3}
-
  We check the state of the procurement request
-
  !assert {model: sale.order, id: pr3}:
    - state == 'progress', "Bad state for the procurement request"
-
  We check if procurement orders have been created for 'on order' lines
-
  !assert {model: sale.order.line, id: pr3l2}:
    - procurement_id != False, "No procurement order generated from procurement request"
-
  We close this procurement request
-
  !workflow {model: sale.order, action: procurement_cancel, ref: pr3}
-
  We check the state of the procurement request
-
  !assert {model: sale.order, id: pr3}:
    - state == 'cancel', "Bad state for the procurement request"
-
  !record {model: sale.order, id: pr4, context: {'procurement_request': True}}:
    name: PR4
-
  We create lines for this procurement request
-
  !record {model: sale.order.line, id: pr4l1, context: {'procurement_request': True}}:
    name: P1
    product_id: product1
    product_uom: product.product_uom_unit
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr4
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We create a second line
-
  !record {model: sale.order.line, id: pr4l2, context: {'procurement_request': True}}:
    name: P2
    product_id: product2
    product_uom: product.product_uom_unit
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr4
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We validate this procurement request
-
  !workflow {model: sale.order, action: procurement_confirm, ref: pr4}
-
  We check the state of the procurement request
-
  !assert {model: sale.order, id: pr4}:
    - state == 'progress', "Bad state for the procurement request"
-
  We close this procurement request
-
  !workflow {model: sale.order, action: procurement_cancel, ref: pr4}
-
  We copy the procurement request
-
  !python {model: sale.order}: |
    pr_id = self.copy(cr, uid, ref('pr4'), context=context)
    new_pr = self.browse(cr, uid, pr_id)
    assert len(new_pr.order_line) == 2, "Bad number of lines on copy"
    assert new_pr.state == 'draft', "Bad state on copy"
-
  We check if it's no possible to unlink a confirmed purchase_order
-
  !python {model: sale.order}: |
    from osv import osv
    try:
      self.unlink(cr, uid, [ref('pr2')])
      assert False, "Error on deletion of a confirmed procurement request"
    except osv.except_osv, e:
      assert True
-
  We check if it's possible to unlink a draft procurement request
-
  !python {model: sale.order}: |
    from osv import osv
    try:
      self.unlink(cr, uid, [ref('pr1')])
    except osv.except_osv, e:
      assert False, "Error on deletion of a draft procurement request"
-
  We create a new procurement request to check the workflow
-
  !record {model: sale.order, id: pr_cancel, context: {'procurement_request': True}}:
    name: PRCANCEL
-
  We create lines for this procurement request
-
  !record {model: sale.order.line, id: pr_cancel_l1, context: {'procurement_request': True}}:
    name: P1
    product_id: product1
    product_uom: product.product_uom_unit
    date_planned: !eval time.strftime('%Y-%m-%d')
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr_cancel
-
  We create a second line
-
  !record {model: sale.order.line, id: pr_cancel_l2, context: {'procurement_request': True}}:
    name: P2
    product_id: product2
    product_uom: product.product_uom_unit
    product_uom_qty: 150.00
    type: make_to_order
    order_id: pr_cancel
    date_planned: !eval time.strftime('%Y-%m-%d')
-
  We cancel this procurement request
-
  !workflow {model: sale.order, action: procurement_cancel, ref: pr_cancel}
-
  We check the state of the procurement request
-
  !assert {model: sale.order, id: pr_cancel}:
    - state == 'cancel', "Bad state for the procurement request"
-
  We check the state of the procurement request line
-
  !assert {model: sale.order.line, id: pr_cancel_l1}:
    - state == 'cancel', "Bad state for the procurement request line"
-
  We check the state of the procurement request
-
  !assert {model: sale.order.line, id: pr_cancel_l2}:
    - state == 'cancel', "Bad state for the procurement request line"
