- 
  I create empty theoretical composition list 01 - this test file is not used, was an attempt to test
  exceptions integrity, but does not work because of rollback of data OEB-107
- 
  !record {model: composition.kit, id: kit_compo_01}:
    composition_type: 'theoretical'
    composition_product_id: kit_product_A
    composition_version_txt: 'ITC'
    composition_creation_date: '2010-01-20'
- 
  I create empty theoretical composition list 02
- 
  !record {model: composition.kit, id: kit_compo_02}:
    composition_type: 'theoretical'
    composition_product_id: kit_product_B
    composition_version_txt: 'OCG'
    composition_creation_date: '2010-02-20'
-
  I first check the integrity constraint on the product. Kit cannot be perishable.
-
  !python {model: product.product}: |
    try:
      self.write(cr, uid, ref("kit_product_A"), {'batch_management': False}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for kit product set to perishable')
-
  I try to set a product which is not a kit
-
  !python {model: composition.kit}: |
    try:
      self.write(cr, uid, ref("kit_compo_01"), {'composition_product_id': ref("kit_product_C")}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for kit with a not kit product')
-
  I try to set a reference in the theoretical kit
-
  !python {model: composition.kit}: |
    try:
      self.write(cr, uid, ref("kit_compo_01"), {'composition_reference': 'reference test'}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for theoretical kit with reference')
-
  I try to set a batch number in the theoretical kit
-
  !python {model: composition.kit}: |
    try:
      self.write(cr, uid, ref("kit_compo_01"), {'composition_lot_id': ref("kit_lot_As")}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for theoretical kit with lot id')
-
  I try to set an expiry date in the theoretical kit
-
  !python {model: composition.kit}: |
    try:
      self.write(cr, uid, ref("kit_compo_01"), {'composition_exp': '2010-06-10'}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for theoretical kit with expiry date')
-
  I try to set a version object in the theoretical kit
-
  !python {model: composition.kit}: |
    try:
      self.write(cr, uid, ref("kit_compo_01"), {'composition_version_id': ref("kit_compo_02")}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for theoretical kit with version id')
-
  I try now the unique constraints on theoretical kit. Set the same product. Set the same Version. Set the same date, fails.
-
  !python {model: composition.kit}: |
    self.write(cr, uid, ref("kit_compo_01"), {'composition_product_id': ref("kit_product_B")}, context=context)
    self.write(cr, uid, ref("kit_compo_01"), {'composition_version_txt': 'OCG'}, context=context)
    try:
      self.write(cr, uid, ref("kit_compo_01"), {'composition_creation_date': ref("kit_lot_As")}, context=context)
    except:
      #print 'exception ok'
      pass
    else:
      #print 'exception missing'
      raise Exception('Exception is Missing for theoretical kit with same (product - version - date) values')
-
  END OF FILE
-
  !python {model: stock.picking}: |
    print 'EOF'
