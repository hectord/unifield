-
  I create empty theoretical composition list 06, kit_product_A, OOO, 2010-01-20
-
  !record {model: composition.kit, id: kit_compo_06}:
    composition_type: 'theoretical'
    composition_product_id: kit_product_A
    composition_version_txt: 'OOO'
    composition_creation_date: '2010-01-20'
-
  I then create Items for the compo 06 - prodC B
-
  !record {model: composition.item, id: item_06_01}:
    item_kit_id: kit_compo_06
    item_product_id: kit_product_C
    item_qty: 10
    item_uom_id: product.product_uom_unit
-
  !record {model: composition.item, id: item_06_02}:
    item_kit_id: kit_compo_06
    item_product_id: kit_product_B
    item_qty: 20
    item_uom_id: product.product_uom_unit
-
  I set the theoretical kit 06 as complete and check corresponding states
-
  !python {model: composition.kit}: |
    self.mark_as_completed(cr, uid, [ref("kit_compo_06")], context=context)
    kit = self.browse(cr, uid, ref("kit_compo_06"), context=context)
    assert kit.state == 'completed', 'kit_compo_06: the field state is wrong, should be completed - %s'%kit.state
    
    for item in kit.composition_item_ids:
      assert item.state == 'completed', 'kit_compo_06: the field state of corresponding item is wrong, should be completed - %s'%item.state
-
  I create a new kitting order for kit_product_A with kit_compo_06 as version
-
  !record {model: kit.creation, id: kit_creation_01}:
    product_id_kit_creation: kit_product_A
    qty_kit_creation: 3
    uom_id_kit_creation: product.product_uom_unit
    version_id_kit_creation: kit_compo_06
    location_dest_id_kit_creation: stock.stock_location_stock
    default_location_src_id_kit_creation: stock.stock_location_stock
-
  I check the display items from version function
-
  !python {model: kit.creation}: |
    self.do_reset_to_version(cr, uid, [ref("kit_creation_01")], context=context)
-
  I check the good number of lines to consume are created
-
  !python {model: kit.creation.to.consume}: |
    ids_to_consume = self.search(cr, uid, [('kit_creation_id_to_consume', '=', ref("kit_creation_01"))], context=context)
    assert len(ids_to_consume) == 2, 'kitting: the number of created lines to consume is wrong - 2 - %s'%len(ids_to_consume)
-
  I start production
-
  !python {model: kit.creation}: |
    self.start_production(cr, uid, [ref("kit_creation_01")], context=context)
-
  I check the internal picking is created
-
  !python {model: kit.creation}: |
    creation = self.browse(cr, uid, ref("kit_creation_01"), context=context)
    assert creation.internal_picking_id_kit_creation.id, 'the internal picking for production is missing - %s'%creation.internal_picking_id_kit_creation.id
    context.update({'internal_ids': [creation.internal_picking_id_kit_creation.id]}) 
-
  I check 3 kits and corresponding batch number have been created
-
  !python {model: composition.kit}: |
    kit_ids = self.search(cr, uid, [('composition_kit_creation_id', '=', ref("kit_creation_01"))], context=context)
    assert len(kit_ids) == 3, 'the number of produced kit is wrong - 3 - %s'%len(kit_ids)
    for kit in self.browse(cr, uid, kit_ids, context=context):
      assert kit.composition_lot_id.id, 'lot is missing for created kit - %s'%kit.composition_lot_id.id
    context.update({'kit_ids': kit_ids})
-
  I process with line button to consume kit_product_C (which needs LOT)
-
  !python {model: kit.creation.to.consume}: |
    to_consume_ids = self.search(cr, uid, [('kit_creation_id_to_consume', '=', ref("kit_creation_01")),('product_id_to_consume', '=', ref("kit_product_C"))], context=context)
    assert len(to_consume_ids) == 1, 'the number of correponding to_consume lines is wrong - 1 - %s'%len(to_consume_ids)
    context.update({'to_consume_idsC': to_consume_ids})
    self.do_process_to_consume(cr, uid, to_consume_ids, context=dict(context))
-
  I check a stock move has been created
-
  !python {model: stock.move}: |
    sm_ids = self.search(cr, uid, [('to_consume_id_stock_move', 'in', context['to_consume_idsC'])], context=context)
    assert len(sm_ids) == 1, 'the number of created stock move is wrong - 1 - %s'%len(sm_ids)
    context.update({'sm_idsC': sm_ids})
-
  I get the to_consume id for productB
-
  !python {model: kit.creation.to.consume}: |
    to_consume_ids = self.search(cr, uid, [('kit_creation_id_to_consume', '=', ref("kit_creation_01")),('product_id_to_consume', '=', ref("kit_product_B"))], context=context)
    assert len(to_consume_ids) == 1, 'the number of correponding to_consume lines is wrong - 1 - %s'%len(to_consume_ids)
    context.update({'to_consume_idsB': to_consume_ids})
-
  I process with all lines button
-
  !python {model: kit.creation}: |
    self.do_process_to_consume2(cr, uid, [ref("kit_creation_01")], context=dict(context))
-
  I check a stock move has been created
-
  !python {model: stock.move}: |
    sm_ids = self.search(cr, uid, [('to_consume_id_stock_move', 'in', context['to_consume_idsB'])], context=context)
    assert len(sm_ids) == 1, 'the number of created stock move is wrong - 1 - %s'%len(sm_ids)
    context.update({'sm_idsB': sm_ids})
#-
#  I check the check Availability function - will be fully check with msf_outgoing implementation
#-
#  !python {model: kit.creation}: |
#    self.check_availability(cr, uid, [ref("kit_creation_01")], context=dict(context))
-
  I check the stock move
-
  !python {model: stock.move}: |
    sm_idsB = self.search(cr, uid, [('kit_creation_id_stock_move', '=', ref("kit_creation_01")),('product_id', '=', ref("kit_product_B"))], context=context)
    sm_idsC = self.search(cr, uid, [('kit_creation_id_stock_move', '=', ref("kit_creation_01")),('product_id', '=', ref("kit_product_C"))], context=context)
    assert len(sm_idsB) == 1, 'B the number of correponding stock move lines is wrong - 1 - %s'%len(sm_idsB)
    assert len(sm_idsC) == 1, 'C the number of correponding stock move lines is wrong - 1 - %s'%len(sm_idsC)
    context.update({'sm_idsB': sm_idsB, 'sm_idsC': sm_idsC})
-
  I process the stock moves I set a prodlot
-
  !python {model: stock.move}: |
    self.write(cr, uid, context['sm_idsC'], {'prodlot_id': ref("kit_lot_Cs")}, context=context)
-
  I force assign stock move
-
  !python {model: stock.move}: |
    self.force_assign(cr, uid, context['sm_idsB'] + context['sm_idsC'], context=context)
-
  I force validate stock move
-
  !python {model: stock.move}: |
    self.validate_assign(cr, uid, context['sm_idsB'] + context['sm_idsC'], context=context)
-
  I open the assign wizard
-
  !python {model: stock.move}: |
    res = self.assign_to_kit(cr, uid, context['sm_idsC'], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I distribute the quantity to the kits in the wizard
-
  !python {model: assign.to.kit}: |
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context['wizard']['c']):
      for mem in obj.kit_ids_assign_to_kit:
        mem.write({'assigned_qty_assign_to_kit_line': 10}, context=context['wizard']['c'])
    self.do_assign_to_kit(cr, uid, context['wizard']['ids'], context=context['wizard']['c'])
-
  I confirm the kitting
-
  !python {model: kit.creation}: |
    self.confirm_kitting(cr, uid, [ref("kit_creation_01")], context=context)
    creation = self.browse(cr, uid, ref("kit_creation_01"), context=context)
    assert creation.state == 'done', 'the kit creation object is not done - done %s'%creation.state
-
  I check all kits are completed and with the correct items
-
  !python {model: composition.kit}: |
    kit_ids = context['kit_ids']
    for kit in self.browse(cr, uid, kit_ids, context=context):
      data = {'ProdB': 20, 'ProdC': 10}
      assert kit.state == 'completed', 'state of the kit is wrong - completed - %s'%kit.state
      for item in kit.composition_item_ids:
        assert data[item.item_product_id.name] == item.item_qty, 'quantity for the selected product is wrong - %s - %s'%(data[item.item_product_id.name],item.item_qty)
        data.pop(item.item_product_id.name)
      assert not data.values(), 'all data have not been treated - [] - %s'%data.values()
-
  I check the internal has 3 moves
-
  !python {model: stock.picking}: |
    for obj in self.browse(cr, uid, context['internal_ids'], context=context):
      assert len(obj.move_lines) != 3, 'the number of stock moves is wrong - 3 - %s'%len(obj.move_lines)
-
  END OF FILE
-
  !python {model: stock.picking}: |
    pass
#    print 'EOF'
#    import sys
#    sys.exit()
