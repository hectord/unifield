-
  For Stock Picking, rule for the CREATE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'Stock Picking CREATE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'stock.picking')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['name']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'stock.picking'), ('name', 'in', fields)], context=context)
        vals = {'name': name,
                'object_id': object_ids[0],
                'domain_filter': "[('type', '=', 'in')]",
                'log_write': False,
                'log_unlink': False,
                'log_create': True,
                'field_ids': [(6, 0, fields_ids)],
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Stock Picking, rule for the DELETE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'Stock Picking DELETE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'stock.picking')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['name']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'stock.picking'), ('name', 'in', fields)], context=context)
        vals = {'name': name,
                'object_id': object_ids[0],
                'domain_filter': "[('type', '=', 'in')]",
                'log_write': False,
                'log_unlink': True,
                'log_create': False,
                'field_ids': [(6, 0, fields_ids)],
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Stock Picking, rule for the WRITE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'Stock Picking WRITE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'stock.picking')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['partner_id2', 'backorder_id', 'reason_type_id', 'date', 'min_date', 'order_category', 'warehouse_id', 'attach_cert', 'currency_id']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'stock.picking'), ('name', 'in', fields)], context=context)
        vals = {'name': name,
                'object_id': object_ids[0],
                'domain_filter': "[('type', '=', 'in')]",
                'log_write': True,
                'log_unlink': False,
                'log_create': False,
                'field_ids': [(6, 0, fields_ids)],
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Stock Picking, rule for the CREATE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'Stock Moves CREATE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'stock.move')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['name']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'stock.move'), ('name', 'in', fields)], context=context)
        field_name = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'stock.move'), ('name', '=', 'line_number')], context=context)
        field_parent = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'stock.move'), ('name', '=', 'picking_id')], context=context)
        name_id = False
        parent_id = False
        if field_parent:
            parent_id = field_parent[0]
        if field_name:
            name_id = field_name[0]
        vals = {'name': name,
                'object_id': object_ids[0],
                'domain_filter': "[('picking_id', '!=', False), ('picking_id.type', '=', 'in')]",
                'log_write': False,
                'log_unlink': False,
                'log_create': True,
                'field_ids': [(6, 0, fields_ids)],
                'parent_field_id': parent_id,
                'name_get_field_id': name_id,
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Stock Moves, rule for the DELETE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'Stock Moves DELETE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'stock.move')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['name']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'stock.move'), ('name', 'in', fields)], context=context)
        field_name = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'stock.move'), ('name', '=', 'line_number')], context=context)
        field_parent = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'stock.move'), ('name', '=', 'picking_id')], context=context)
        name_id = False
        parent_id = False
        if field_parent:
            parent_id = field_parent[0]
        if field_name:
            name_id = field_name[0]
        vals = {'name': name,
                'object_id': object_ids[0],
                'domain_filter': "[('picking_id', '!=', False), ('picking_id.type', '=', 'in')]",
                'log_write': False,
                'log_unlink': True,
                'log_create': False,
                'field_ids': [(6, 0, fields_ids)],
                'parent_field_id': parent_id,
                'name_get_field_id': name_id,
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
-
  For Stock Moves, rule for the WRITE of objects with the list of fields to track
-
  !python {model: audittrail.rule}: |
    name = 'Stock Moves WRITE'
    object_ids = self.pool.get('ir.model').search(cr, uid, [('model', '=', 'stock.move')], context=context)
    rule_id = self.search(cr, uid, [('name', '=', name)], context=context)
    if object_ids:
        fields = ['product_id', 'product_qty', 'product_uom', 'asset_id', 'prodlot_id', 'expired_date', 'location_dest_id', 'date', 'state', 'currency_id', 'price_unit']
        fields_ids = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=' ,'stock.move'), ('name', 'in', fields)], context=context)
        field_name = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'stock.move'), ('name', '=', 'line_number')], context=context)
        field_parent = self.pool.get('ir.model.fields').search(cr, uid, [('model', '=', 'stock.move'), ('name', '=', 'picking_id')], context=context)
        name_id = False
        parent_id = False
        if field_parent:
            parent_id = field_parent[0]
        if field_name:
            name_id = field_name[0]
        vals = {'name': name,
                'object_id': object_ids[0],
                'domain_filter': "[('picking_id', '!=', False), ('picking_id.type', '=', 'in')]",
                'log_write': True,
                'log_unlink': False,
                'log_create': False,
                'field_ids': [(6, 0, fields_ids)],
                'parent_field_id': parent_id,
                'name_get_field_id': name_id,
                }
        if not rule_id:
            rule_id = self.create(cr, uid, vals, context=context)
        elif rule_id:
            self.write(cr, uid, rule_id, vals, context=context)
        # Subscribe to the rule
        self.subscribe(cr, uid, rule_id)
