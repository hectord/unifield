-
  I create an account type tax
-
  !record {model: account.account.type, id: type_tax}:
    name: TAX
    code: CTAXE
    close_method: unreconciled
-
 I create an vat account
-
  !record {model: account.account, id: account_1}:
    code: 5645345
    type_for_register: none
    type: other
    name: TAX
    reconcile: True
    user_type: type_tax
-
  I create a VAT
-
  !record {model: account.tax, id: normal_vat}:
    name: TVA
    description: TVA
    amount: 0.042
    type: percent
    account_collected_id: account_1
    account_paid_id: account_1
-
  I create a partner
-
  !record {model: res.partner, id: res_partner_africom0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: AFRICOM
    supplier: true
-
  Then I create its partner address
-
  !record {model: res.partner.address, id: res_partner_address_0}:
    country_id: base.au
    partner_id: res_partner_africom0
    street: street
    type: default
    zip: '1234'
-
  I create a product category
- 
  !record {model: product.category, id: product_category_testproducts0}:
    name: Test products
    sequence: 0.0
-
  I create a product with the normal VAT named 
-
  !record {model: product.product, id: product_product_camembert0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: CAM-INT-1234
    mes_type: fixed
    name: Camembert
    name_template: Camembert
    procure_method: make_to_order
    seller_delay: '1'
    seller_id: res_partner_africom0
    seller_ids:
      - delay: 1
        min_qty: 0.0
        name: res_partner_africom0
        product_code: PUE-AFRI-1234
        product_name: Fromage qui pue Africom
    seller_qty: 0.0
    standard_price: 1.0
    supplier_taxes_id: [normal_vat]
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
  In order to test VAT management I create a purchase order with the product that have a VAT
-
  !record {model: purchase.order, id: purchase_order_po0}:
    amount_tax: 0.0
    amount_total: 1.0
    amount_untaxed: 1.0
    company_id: base.main_company
    date_order: !eval time.strftime('%Y-%m-%d')
    invoice_method: order
    location_id: stock.stock_location_stock
    minimum_planned_date: !eval time.strftime('%Y-%m-%d')
    partner_address_id: res_partner_address_0
    partner_id: res_partner_africom0
    pricelist_id: purchase.list0
-
  Then I add an order line to this purchase
-
  !record {model: purchase.order.line, id: purchase_order_line_camembert0}:
    company_id: base.main_company
    date_planned: !eval time.strftime('%Y-%m-%d')
    order_id: purchase_order_po0
    partner_id: res_partner_africom0
    price_unit: 100
    product_id: product_product_camembert0
    product_qty: 1.0
    product_uom: product.product_uom_unit
    state: draft
-
  When a product is choosen, an update permits to  affect VAT
-
  !python {model: purchase.order.line}: |
    import time
    self.product_id_change(cr, uid, [ref('purchase_order_line_camembert0')], ref('purchase.list0'), ref('product_product_camembert0'), 
        1.0, ref('product.product_uom_unit'), ref('res_partner_africom0'), time.strftime('%Y-%m-%d'), False, False, "Camembert", 
        100.0, False)
-
  We confirm the purchase
-
  !workflow {model: purchase.order, action: purchase_confirm, ref: purchase_order_po0}
-
  We validate the purchase
-
  !workflow {model: purchase.order, action: purchase_approve, ref: purchase_order_po0}
