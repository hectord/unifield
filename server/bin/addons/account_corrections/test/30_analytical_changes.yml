-
  I create an invoice with a total amount to 500
-
  !record {model: account.invoice, id: invoice_1}:
    account_id: account_4000
    address_contact_id: base.res_partner_address_3000
    address_invoice_id: base.res_partner_address_3000
    check_total: 500.0
    company_id: base.main_company
    currency_id: base.EUR
    journal_id: account.expenses_journal
    partner_id: base.res_partner_desertic_hispafuentes
    reference_type: none
    type: in_invoice
    analytic_distribution_id: distrib_1
    date_invoice: !eval time.strftime('%Y-02-04')
-
  Then I add an invoice line in order it takes analytic distribution from invoice
-
  !python {model: account.invoice.line}: |
    vals = {
        'account_id': ref('account_6101'),
        'name': 'Product PC1',
        'price_unit': 50.0,
        'product_id': ref('product11'),
        'quantity': 10.0,
        'uos_id': ref('product.product_uom_unit'),
        'invoice_id': ref('account_corrections.invoice_1'),
    }
    self.create(cr, uid, vals)
-
  I validate the invoice
-
  !workflow {model: account.invoice, ref: invoice_1, action: invoice_open}
-
  I attempt to change the analytic line from the invoice to change it CC on an open period (in February)
-
  !python {model: wizard.journal.items.corrections}: |
    import time, logging
    # Prepare some values
    from_ctx = {'from': 'wizard.journal.items.corrections'} # WARNING VERY IMPORTANT FOR ANALYTIC WIZARD CONFIRMATION
    ana_obj = self.pool.get('account.analytic.line')
    aml_obj = self.pool.get('account.move.line')
    period_obj = self.pool.get('account.period')
    correction_lines_obj = self.pool.get('wizard.journal.items.corrections.lines')
    distro_wiz_obj = self.pool.get('analytic.distribution.wizard')
    distro_wiz_fpline_obj = self.pool.get('analytic.distribution.wizard.fp.lines')
    first_date = time.strftime('%Y-02-14')
    # Search analytic line
    ana_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', '=', -375.0), ('cost_center_id', '=', ref('analytic_cc1'))])
    assert len(ana_ids) == 1, "Should find only 1 line corresponding to analytic line to change. Current: %s" % len(ana_ids)
    # Fetch line info
    line = ana_obj.browse(cr, uid, ana_ids)[0]
    # Launch Correction wizard
    logging.getLogger('tests').log(logging.TEST, 'I launch the correction wizard from JI (%s)' % line.name)
    correction_wizard_data = aml_obj.button_do_accounting_corrections(cr, uid, line.move_id.id)
    assert correction_wizard_data != False, "An error occured at Correction wizard launch."
    assert correction_wizard_data.get('res_model', False) == 'wizard.journal.items.corrections', "Wrong Correction Wizard return from account move line: %s. Expected: wizard.journal.items.corrections" % correction_wizard_data.get('res_model', False)
    wiz_id = correction_wizard_data.get('res_id', False)
    # Check that February is open
    logging.getLogger('tests').log(logging.TEST, 'I check that the period corresponding to %s is open.' % first_date)
    period_ids = period_obj.get_period_from_date(cr, uid, first_date)
    assert len(period_ids) > 0, "No period found for given date: %s" % first_date
    period = period_obj.browse(cr, uid, period_ids)[0]
    # Open period if this one in draft state
    if period.state == 'created':
      period_obj.action_set_state(cr, uid, [period.id], {'state': 'draft'})
    assert period.state != ['created', 'field-closed', 'mission-closed', 'hq-closed'], "Period is not open! Current state: %s. Expected: draft." % period.state
    # I set a date on the wizard and launch analytic correction wizard
    logging.getLogger('tests').log(logging.TEST, 'Add %s date to the wizard and launch analytic distribution wizard.' % first_date)
    self.write(cr, uid, wiz_id, {'date': first_date})
    wiz_line_ids = correction_lines_obj.search(cr, uid, [('wizard_id', 'in', wiz_id)])
    assert len(wiz_line_ids) == 1, "Wrong correction wizard lines number: %s. Expected: 1." % len(wiz_line_ids)
    analytic_wizard_data = correction_lines_obj.button_analytic_distribution(cr, uid, wiz_line_ids)
    assert analytic_wizard_data.get('res_model', False) == 'analytic.distribution.wizard', "Wrong analytic distribution wizard: %s. Expected: analytic.distribution.wizard" % analytic_wizard_data.get('res_model')
    ana_wiz_ids = analytic_wizard_data.get('res_id', False)
    # Change CC1 to CC2 on the given line on a date from february and validate the wizard.
    logging.getLogger('tests').log(logging.TEST, 'Change CC1 to CC2 on the given line and validate the wizard.')
    fp_line_ids = distro_wiz_fpline_obj.search(cr, uid, [('wizard_id', '=', ana_wiz_ids[0]), ('cost_center_id', '=', ref('analytic_cc1'))])
    assert len(fp_line_ids) == 1, "Should only be one line that correspond to the research. Find: %s. Expected: 1." % len(fp_line_ids)
    # WARNING: distro_wiz_fpline_obj.write NEED absolutely a percentage to work (don't know if write() is broken or if we should let it as this)
    distro_wiz_fpline_obj.write(cr, uid, fp_line_ids, {'cost_center_id': ref('analytic_cc2'), 'percentage': 75.0}, context=from_ctx)
    # validate wizard
    from_ctx.update({'wiz_id': ana_wiz_ids[0]})
    distro_wiz_obj.write(cr, uid, ana_wiz_ids, {'date': first_date}, from_ctx)
    distro_wiz_obj.button_confirm(cr, uid, ana_wiz_ids, from_ctx)
    # Check that resulted analytic line have same date as initially (and not those from wizard given date) + period is the same as initial (January)
    logging.getLogger('tests').log(logging.TEST, 'I check that analytic line have right date.')
    cc_corrected_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', '=', -375.0)])
    assert len(cc_corrected_ids) == 1, "You should only have ONE analytic line even if this one was corrected before! Current: %s" % len(cc_corrected_ids)
    cc_corrected = ana_obj.browse(cr, uid, cc_corrected_ids)[0]
    assert cc_corrected.date == time.strftime('%Y-02-04'), "Wrong date on analytic line. Should be %s. Current: %s" % (time.strftime('%Y-02-04'), cc_corrected.date)
    assert cc_corrected.cost_center_id.id == ref('analytic_cc2'), "An error occured during CC change from CC1 to CC2. Current: %s" % cc_corrected.cost_center_id.name
    all_p_ids = period_obj.search(cr, uid, [])
    assert cc_corrected.period_id.number == 2, "Wrong period. Should be 2. Current: %s" % cc_corrected.period_id.number
-
  I close february period (mission-closed) and change CC2 to on a date in february
-
  !python {model: wizard.journal.items.corrections}: |
    import time, logging
    # Prepare some values
    from_ctx = {'from': 'wizard.journal.items.corrections'} # WARNING VERY IMPORTANT FOR ANALYTIC WIZARD CONFIRMATION
    ana_obj = self.pool.get('account.analytic.line')
    aml_obj = self.pool.get('account.move.line')
    period_obj = self.pool.get('account.period')
    correction_lines_obj = self.pool.get('wizard.journal.items.corrections.lines')
    distro_wiz_obj = self.pool.get('analytic.distribution.wizard')
    distro_wiz_fpline_obj = self.pool.get('analytic.distribution.wizard.fp.lines')
    second_date = time.strftime('%Y-03-09')
    # Close period (mission closed)
    # first I need to close Jan
    jan_ids = period_obj.search(cr, uid, [('number', '=', 1), ('state', '=', 'draft')])
    if jan_ids:
        period_obj.write(cr, uid, jan_ids, {'state': 'mission-closed'})
    logging.getLogger('tests').log(logging.TEST, 'I close the period from February.')
    to_be_closed_ids = period_obj.search(cr, uid, [('number', '=', 2), ('state', '=', 'draft')])
    assert len(to_be_closed_ids) == 1, "We should only have ONE period to be closed in February. Current: %s" % len(to_be_closed_ids)
    period_obj.write(cr, uid, to_be_closed_ids, {'state': 'field-closed'})
    period_obj.action_set_state(cr, uid, to_be_closed_ids, {'state': 'mission-closed'})
    closed_period = period_obj.browse(cr, uid, to_be_closed_ids)[0]
    assert closed_period.state == 'mission-closed', "Period %s should be mission closed! Current state: %s" % (closed_period.name, closed_period.state)
    # I launch all necessary wizard to change CC2 to CC1 and confirm them. (on second_date)
    # search analytic line
    ana_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', '=', -375.0), ('cost_center_id', '=', ref('analytic_cc2'))])
    assert len(ana_ids) == 1, "Should find only 1 line corresponding to analytic line to change. Current: %s" % len(ana_ids)
    # Fetch line info
    line = ana_obj.browse(cr, uid, ana_ids)[0]
    # Launch Correction wizard
    logging.getLogger('tests').log(logging.TEST, 'I launch the correction wizard from JI (%s)' % line.name)
    correction_wizard_data = aml_obj.button_do_accounting_corrections(cr, uid, line.move_id.id)
    assert correction_wizard_data != False, "An error occured at Correction wizard launch."
    assert correction_wizard_data.get('res_model', False) == 'wizard.journal.items.corrections', "Wrong Correction Wizard return from account move line: %s. Expected: wizard.journal.items.corrections" % correction_wizard_data.get('res_model', False)
    wiz_id = correction_wizard_data.get('res_id', False)
    # I set a date on the wizard and launch analytic correction wizard
    logging.getLogger('tests').log(logging.TEST, 'Add %s date to the wizard and launch analytic distribution wizard.' % second_date)
    self.write(cr, uid, wiz_id, {'date': second_date})
    wiz_line_ids = correction_lines_obj.search(cr, uid, [('wizard_id', 'in', wiz_id)])
    assert len(wiz_line_ids) == 1, "Wrong correction wizard lines number: %s. Expected: 1." % len(wiz_line_ids)
    analytic_wizard_data = correction_lines_obj.button_analytic_distribution(cr, uid, wiz_line_ids)
    assert analytic_wizard_data.get('res_model', False) == 'analytic.distribution.wizard', "Wrong analytic distribution wizard: %s. Expected: analytic.distribution.wizard" % analytic_wizard_data.get('res_model')
    ana_wiz_ids = analytic_wizard_data.get('res_id', False)
    # Change CC2 to CC1 on the given line on a date from february and validate the wizard.
    logging.getLogger('tests').log(logging.TEST, 'Change CC2 to CC1 on the given line and validate the wizard.')
    fp_line_ids = distro_wiz_fpline_obj.search(cr, uid, [('wizard_id', '=', ana_wiz_ids[0]), ('cost_center_id', '=', ref('analytic_cc2')), ('percentage', '=', 75.0)])
    assert len(fp_line_ids) == 1, "Should only be one line that correspond to the research. Find: %s. Expected: 1." % len(fp_line_ids)
    # WARNING: distro_wiz_fpline_obj.write NEED absolutely a percentage to work (don't know if write() is broken or if we should let it as this)
    distro_wiz_fpline_obj.write(cr, uid, fp_line_ids, {'cost_center_id': ref('analytic_cc1'), 'percentage': 75.0}, context=from_ctx)
    # validate wizard
    from_ctx.update({'wiz_id': ana_wiz_ids[0]})
    distro_wiz_obj.write(cr, uid, ana_wiz_ids, {'date': second_date}, from_ctx)
    res = distro_wiz_obj.button_confirm(cr, uid, ana_wiz_ids, from_ctx)
    # Check that resulted analytic line have same date as initially (and not those from wizard given date) + period is the same as initial (January)
    logging.getLogger('tests').log(logging.TEST, 'I check that we have 3 lines, original, reversal and corrected one.')
    cc_corrected_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', 'in', [375.0, -375.0])])
    assert len(cc_corrected_ids) == 3, "Should have 3 lines. Current: %s" % len(cc_corrected_ids)
    # check the original one
    logging.getLogger('tests').log(logging.TEST, 'I check the original one.')
    original_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', '=', -375.0), ('cost_center_id', '=', ref('analytic_cc2'))])
    assert len(original_ids) == 1, "Should have only 1 original line. Current: %s" % len(original_ids)
    original = ana_obj.browse(cr, uid, original_ids)[0]
    assert original.date == time.strftime('%Y-02-04'), "Wrong date on original line (%s): %s. Expected: %s" % (original.name, original.date, time.strftime('%Y-02-04'))
    assert original.journal_id.type != 'correction', "Journal should NOT be correction type. Current: %s" % original.journal_id.type
    assert original.period_id.number == 2, "Wrong period number: %s. Expected: 2" % original.period_id.number
    # check the reverse one
    logging.getLogger('tests').log(logging.TEST, 'I check the reverse one.')
    reverse_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', '=', 375.0), ('cost_center_id', '=', ref('analytic_cc2')), ('is_reversal', '=', True)])
    assert len(reverse_ids) == 1, "Should have only 1 reverse line. Current: %s" % len(reverse_ids)
    reverse = ana_obj.browse(cr, uid, reverse_ids)[0]
    assert reverse.date == second_date, "Wrong date on REV line (%s): %s. Expected: %s" % (reverse.name, reverse.date, second_date)
    assert reverse.period_id.number == 3, "Wrong period number: %s. Expected: 3" % reverse.period_id.number
    assert reverse.journal_id.type == 'correction', "Wrong journal type: %s. Expected: correction." % reverse.journal_id.type
    # check the correction one
    logging.getLogger('tests').log(logging.TEST, 'I check the correction one.')
    correction_ids = ana_obj.search(cr, uid, [('general_account_id', '=', ref('account_6101')), ('amount_currency', '=', -375.0), ('cost_center_id', '=', ref('analytic_cc1'))])
    assert len(correction_ids) == 1, "Should have only 1 correction line. Current: %s" % len(correction_ids)
    correction = ana_obj.browse(cr, uid, correction_ids)[0]
    assert correction.date == second_date, "Wrong date on COR line (%s): %s. Expected: %s" % (correction.name, correction.date, second_date)
    assert correction.period_id.number == 3, "Wrong period number: %s. Expected: 3" % correction.period_id.number
    assert correction.journal_id.type == 'correction', "Wrong journal type: %s. Expected: correction." % correction.journal_id.type
