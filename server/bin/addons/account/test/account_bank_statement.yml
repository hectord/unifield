-
  In order to test Bank Statement feature of account I create a bank statement line and confirm it and check it's move created
-
  I create a bank statement with Opening and Closing balance 0.
-
  !record {model: account.bank.statement, id: account_bank_statement_0}:
    balance_end_real: 0.0
    balance_start: 0.0
    date: !eval time.strftime('%Y-%m-%d')
    journal_id: account.bank_journal
    name: /
    period_id: current_period
    line_ids:
      - account_id: account.a_recv
        amount: 1000.0
        date: !eval time.strftime('%Y-%m-%d')
        document_date: !eval time.strftime('%Y-%m-%d')
        name: a
        partner_id: base.res_partner_4
        sequence: 0.0
        type: general
-
  I check that Initially bank statement is in the "Draft" state
-
  !assert {model: account.bank.statement, id: account_bank_statement_0}:
    - state == 'draft'
-
  I compute bank statement using Compute button
-
  !python {model: account.bank.statement}: |
    self.button_dummy(cr, uid, [ref("account_bank_statement_0")], {"lang": "en_US",
      "tz": False, "active_model": "ir.ui.menu", "journal_type": "bank", "section_id":
      False, "period_id": ref('current_period'), "active_ids": [ref("account.menu_bank_statement_tree")],
      "active_id": ref("account.menu_bank_statement_tree"), })

-
  I modify the bank statement and set the Closing Balance.
-
  !record {model: account.bank.statement, id: account_bank_statement_0}:
    balance_end_real: 1000.0

-
  I test that register_accounting module is loaded, if yes, hard post account_bank_statement lines before closing CashBox
-
  !python {model: ir.module.module}: |
      # fetch module id
      module_id = self.search(cr, uid, [('name', '=', 'register_accounting')])[0]
      # Do something only if module exists
      if module_id:
        module = self.browse(cr, uid, module_id)
        # do modification if module is installed or to be upgraded
        if module.state in ('installed', 'to upgrade', 'to install'):
          # Hard post lines
          obj_st = self.pool.get('account.bank.statement')
          obj_st.write(cr, uid, [ref("account_bank_statement_0")], {'balance_start': 10})
          obj_st.button_open(cr, uid, [ref("account_bank_statement_0")])
          st_line_ids = self.pool.get('account.bank.statement.line').search(cr, uid, [('statement_id', '=', ref("account_bank_statement_0"))])
          self.pool.get('account.bank.statement.line').button_hard_posting(cr, uid, st_line_ids)
          bal = obj_st.read(cr, uid, ref("account_bank_statement_0"), ['balance_end'])
          #obj_st.button_confirm_bank(cr, uid, [ref("account_bank_statement_0")])
          # Confirm CashBox by opening a wizard an confirm it in order to close cashbox
          wiz_id = self.pool.get('wizard.closing.cashbox').create(cr, uid, {'be_sure': True}, context={})
          self.pool.get('wizard.closing.cashbox').button_close_cashbox(cr, uid, [wiz_id], { "active_ids": [ref("account_bank_statement_0")], \
        "active_id": ref("account_bank_statement_0"), })

-
  I confirm the bank statement using Confirm button
-
  !python {model: account.bank.statement}: |
    self.button_confirm_bank(cr, uid, [ref("account_bank_statement_0")], {"lang":
      "en_US", "tz": False, "active_model": "ir.ui.menu", "journal_type": "bank",
      "section_id": False, "period_id": ref('current_period'), "active_ids": [ref("account.menu_bank_statement_tree")],
      "active_id": ref("account.menu_bank_statement_tree"), })
#-
#  I check that bank statement state is now "Closed"
#  Bank register: we have to reconcile lines !
#-
#  !assert {model: account.bank.statement, id: account_bank_statement_0}:
#    - state == 'confirm'
#
-
  I check that move lines created for bank statement and move state is Posted
-
  !python {model: account.bank.statement}: |
    move_line_obj = self.pool.get('account.move.line')
    bank_data = self.browse(cr, uid, ref("account_bank_statement_0"))
    assert bank_data.move_line_ids, "Move lines not created for bank statement"
    for line in bank_data.move_line_ids:
      assert line.move_id.state == 'posted', "Move state is not posted"
