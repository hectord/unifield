-
  I create an Expense Account Type.
-
  !record {model: account.account.type, id: account_account_type_expense0}:
    close_method: unreconciled
    code: expense
    name: Expense
    sign: 1
-
  I create a 6101 Expense Account.
-
  !record {model: account.account, id: account_account_expense0}:
    code: '6101-expense-test'
    company_id: base.main_company
    currency_mode: current
    name: Expense Account
    type: other
    user_type: account_account_type_expense0
    activation_date: !eval datetime.today().strftime('%Y-01-01')
    default_destination_id: analytic_distribution.analytic_account_destination_operation
    destination_ids: [analytic_distribution.analytic_account_destination_operation, analytic_distribution.analytic_account_destination_support]
-
  I create a partner with a partner type = 'external' in order to generate commitment for PO that come from this partner
-
  !record {model: res.partner, id: res_partner_africom0}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: AFRICOM
    supplier: true
    partner_type: external
-
  Then I create its partner address
-
  !record {model: res.partner.address, id: res_partner_address_0}:
    country_id: base.au
    partner_id: res_partner_africom0
    street: street
    type: default
    zip: '1234'
-
  I create a partner with a partner type = 'intermission' in order NOT TO generate commitment for PO that come from this partner
-
  !record {model: res.partner, id: res_partner_mission_42}:
    credit_limit: 0.0
    debit_limit: 0.0
    name: Mission 42
    supplier: true
    partner_type: intermission
-
  Then I create its partner address
-
  !record {model: res.partner.address, id: res_partner_address_42}:
    country_id: base.au
    partner_id: res_partner_mission_42
    street: street
    type: default
    zip: '4242'
-
  I create a product category
- 
  !record {model: product.category, id: product_category_testproducts0}:
    name: Test products
    sequence: 0.0
-
  I create a product
-
  !record {model: product.product, id: product_product_camembert0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: CAM-INT-1234
    mes_type: fixed
    name: Camembert
    name_template: Camembert
    procure_method: make_to_order
    seller_delay: '1'
    seller_id: res_partner_africom0
    seller_ids:
      - delay: 1
        min_qty: 0.0
        name: res_partner_africom0
        product_code: PUE-AFRI-1234
        product_name: Fromage qui pue Africom
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    property_account_expense: account_account_expense0
    international_status: product_attributes.int_1
-
  I create a second product
-
  !record {model: product.product, id: product_product_book0}:
    categ_id: product_category_testproducts0
    cost_method: standard
    default_code: BOOK-INT-4242
    mes_type: fixed
    name: Book
    name_template: Book
    procure_method: make_to_order
    seller_delay: '1'
    seller_id: res_partner_mission_42
    seller_ids:
      - delay: 1
        min_qty: 0.0
        name: res_partner_mission_42
        product_code: PROD-BOOK-4242
        product_name: How to product 42 figures Book
    seller_qty: 0.0
    standard_price: 1.0
    supply_method: buy
    type: consu
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    valuation: manual_periodic
    volume: 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    property_account_expense: account_account_expense0
-
  I create a link between 6101 expense account and Operation destination
-
  !record {model: account.destination.link, id: tuple_operation_6101}:
    account_id: account_account_expense0
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a link between 6101 expense account and Support destination
-
  !record {model: account.destination.link, id: tuple_support_6101}:
    account_id: account_account_expense0
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create an analytic account attached to OC (Operation Center) named Gabon
-
  !record {model: account.analytic.account, id: analytic_account_gabon}:
    name: "Gabon"
    currency_id: 1
    code: GAB
    type: normal
    category: OC
    parent_id: analytic_distribution.analytic_account_project
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
-
  I create an analytic account attached to OC (Operation Center) named Kenya
-
  !record {model: account.analytic.account, id: analytic_account_kenya3}:
    name: "Kenya3"
    currency_id: 1
    code: KEN3
    type: normal
    category: OC
    parent_id: analytic_distribution.analytic_account_project
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
-
  I create an FP analytic account named Gabon Hospital attached to Gabon CC
-
  !record {model: account.analytic.account, id: analytic_account_fp_gabon_hospital}:
    name: "Gabon Hospital"
    currency_id: 1
    code: GABH
    type: normal
    category: FUNDING
    parent_id: analytic_distribution.analytic_account_funding_pool
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
    cost_center_ids: [analytic_account_gabon]
    tuple_destination_account_ids: [tuple_operation_6101]
-
  I create an FP analytic account named Kenya AIDS attached to Kenya CC
-
  !record {model: account.analytic.account, id: analytic_account_fp_kenya_aids2}:
    name: "Kenya AIDS"
    currency_id: 1
    code: KENA2
    type: normal
    category: FUNDING
    parent_id: analytic_distribution.analytic_account_funding_pool
    date: !eval "'%s-01-01' %(datetime.now().year + 2)"
    cost_center_ids: [analytic_account_kenya3]
    tuple_destination_account_ids: [tuple_support_6101]
-
  I create a global analytical distribution
-
  !record {model: analytic.distribution, id: global_distrib_1}:
    name: GLOB DISTR 1
-
  I create a cost center distribution line for gabon
-
  !record {model: cost.center.distribution.line, id: cost_center_gabon}:
    name: CC Line 1
    amount: 0.0
    percentage: 75.0
    currency_id: 1
    analytic_id: analytic_account_gabon
    distribution_id: global_distrib_1
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a cost center distribution line for kenya
-
  !record {model: cost.center.distribution.line, id: cost_center_kenya}:
    name: CC Line 2
    amount: 0.0
    percentage: 25.0
    currency_id: 1
    analytic_id: analytic_account_kenya3
    distribution_id: global_distrib_1
    destination_id: analytic_distribution.analytic_account_destination_support
-
  I create a funding pool distribution line for gabon
-
  !record {model: funding.pool.distribution.line, id: funding_pool_gabon}:
    name: FP Line 1
    amount: 0.0
    percentage: 75.0
    currency_id: 1
    analytic_id: analytic_account_fp_gabon_hospital
    distribution_id: global_distrib_1
    cost_center_id: analytic_account_gabon
    destination_id: analytic_distribution.analytic_account_destination_operation
-
  I create a funding pool distribution line for kenya
-
  !record {model: funding.pool.distribution.line, id: funding_pool_kenya}:
    name: FP Line 2
    amount: 0.0
    percentage: 25.0
    currency_id: 1
    analytic_id: analytic_account_fp_kenya_aids2
    cost_center_id: analytic_account_kenya3
    destination_id: analytic_distribution.analytic_account_destination_support
    distribution_id: global_distrib_1
-
  We create a new instance
-
  !record {model: msf.instance, id: proj1}:
    level: project
    code: PROJ12 # take another name than other test
    mission: Mission Test
    instance: Project instance
    name: Project 12 # idem that code field
    target_cost_center_ids:
      - cost_center_id: analytic_account_kenya3
        is_target: True
        is_top_cost_center: True
        is_po_fo_cost_center: True
    state: active
    move_prefix: MPT # should be different from other tests!
    reconcile_prefix: T2 # idem that move_prefix field
-
  Activate the local instance
-
  !python {model: msf.instance}: |
    user = self.pool.get('res.users').browse(cr, uid, uid)
    if user.company_id.instance_id:
        comp_instance = user.company_id.instance_id.id
    else:
        comp_instance = self.create(cr, uid, {'code': 'Comp Instance', 'name': 'Comp', 'level': 'section', 'move_prefix': 'COMP', 'reconcile_prefix': 'C1'})
        self.pool.get('account.target.costcenter').create(cr, uid, {'cost_center_id': ref('analytic_account_gabon'), 'instance_id': comp_instance, 'is_target': True, 'is_top_cost_center': True, 'is_po_fo_cost_center': True})
        self.pool.get('res.company').write(cr, uid, [user.company_id.id], {'instance_id': comp_instance})
    self.write(cr, uid, ref('proj1'), {'parent_id': comp_instance})
    self.write(cr, uid, comp_instance, {'state': 'active'})
-
  We attach this instance to all journals
-
  !python {model: account.analytic.journal}: |
    user = self.pool.get('res.users').browse(cr, uid, uid)
    all_journal_ids = self.search(cr, uid, [])
    self.write(cr, uid, all_journal_ids, {'instance_id': user.company_id.instance_id.id})
-
  I overwrite periods to have the right number and open them
-
  !python {model: account.period}: |
    import datetime
    period_ids = self.search(cr, uid, [], order='date_start, name')
    for p in self.browse(cr, uid, period_ids):
      self.write(cr, uid, [p.id], {'number': int(datetime.datetime.strptime(p.date_start, '%Y-%m-%d').strftime('%m'))})
    self.action_set_state(cr, uid, period_ids, {'state': 'draft'})
