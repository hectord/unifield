-
  Create a Sale Order
-
  !record {model: sale.order, id: so_002_claim}:
    company_id: base.main_company
    date_order: '2011-04-13'
    invoice_quantity: order
    order_policy: manual
    partner_id: claim_partner_A
    partner_invoice_id: claim_address_A
    partner_order_id: claim_address_A
    partner_shipping_id: claim_address_A
    picking_policy: direct
    pricelist_id: product.list0
    shop_id: sale.shop
    priority: normal
    categ: medical
-
  Create a Sale Order Line
-
  !record {model: sale.order.line, id: sol_002-1_claim}:
    product_uom: product.product_uom_unit
    product_id: claim_product_A
    order_id: so_002_claim
    price_unit: 1
    product_uom_qty: 10
    date_planned: '2011-04-13'
    type: make_to_order
-
  !record {model: sale.order.line, id: sol_002-2_claim}:
    product_uom: product.product_uom_unit
    product_id: claim_product_B
    order_id: so_002_claim
    price_unit: 1
    product_uom_qty: 5
    date_planned: '2011-04-13'
    type: make_to_order
-
  I load common data into the context
-
  !python {model: data.tools}: |
    self.load_common_data(cr, uid, [], context=context)
-
  I validate the sale order
-
  !python {model: sale.order}: |
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'sale.order', ref("so_002_claim"), 'order_confirm', cr)
    # save sale order name
    data = self.read(cr, uid, ref("so_002_claim"), ['name'], context=context)
    context.update({'so_name_claim': data['name']}) 
-
  Run the scheduler
-
  !python {model: procurement.order}: |
    self.run_scheduler(cr, uid)
-
  Validate the purchase order
-
  !python {model: purchase.order}: |
    proc_obj = self.pool.get('procurement.order')
    sol_obj = self.pool.get('sale.order.line')
    po_obj = self.pool.get('purchase.order')
    # get the corresponding procurement order
    data = sol_obj.read(cr, uid, [ref("sol_002-1_claim")], ['procurement_id'], context=context)[0]
    proc_id = data['procurement_id'][0]
    # save proc id into context
    context.update({'proc_id_claim': proc_id})
    data = proc_obj.read(cr, uid, [proc_id], ['purchase_id', 'state', 'note'], context=context)[0]
    po_id = data['purchase_id'][0]
    # change cross docking to False
    self.write(cr, uid, [po_id], {'cross_docking_ok': False}, context=context)
    po_data = po_obj.read(cr, uid, po_id, ['name'], context=context)
    po_name = po_data['name']
    # save po id into context
    context.update({'po_id_claim': po_id, 'po_name_claim': po_name})
    # change Invoicing control to From Picking
    self.write(cr, uid, [po_id], {'invoice_method':'picking'}, context=context)
    import netsvc
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_confirm', cr)
    wf_service.trg_validate(uid, 'purchase.order', po_id, 'purchase_approve', cr)
-
  Check the input location is chained
-
  !python {model: stock.location}: |
    input_id = context['common']['input_id']
    input = self.browse(cr, uid, input_id, context=context)
    assert input.chained_location_type == 'fixed', 'location input is not fixed chained, cannot continue the yaml test'
    assert input.chained_location_id.id == context['common']['stock_id'], 'chained location is not stock, cannot continue the yaml test'
    assert input.chained_auto_packing == 'manual', 'chained type is not manual, cannot continue the yaml test'
-
  Process the incoming shipment
-
  !python {model: stock.picking}: |
    context.update({'yml_test': True})
    po_id = context['po_id_claim']
    # find the IN
    in_ids = self.search(cr, uid, [('purchase_id', '=', po_id)], context=context)
    # save in id in context
    context.update({'in_id_claim': in_ids[0]})
    pick = self.browse(cr, uid, in_ids[0], context=context)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    # process wizard
    dic = self.action_process(cr, uid, in_ids, context=context)
    wiz_model = dic['res_model']
    wiz_id = dic['res_id']
    wiz_c = dic['context']
    wiz_obj = self.pool.get(wiz_model)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, pick, context=context)
    # complete production lots
    for obj in wiz_obj.browse(cr, uid, [wiz_id], context=wiz_c):
      for mem_move in getattr(obj, 'product_moves_%s'%picking_type): # -> because is now IN with average product cost method !!!
        if mem_move.product_id.id == ref('claim_product_A'):
          mem_move.write({'prodlot_id': ref('claim_lot_As')}, context=context)
    wiz_obj.copy_all(cr, uid, [dic['res_id']], context=dic['context'])
    wiz_obj.write(cr, uid, [dic['res_id']], {'direct_incoming': False}, context=dic['context'])
    wiz_obj.do_incoming_shipment(cr, uid, [dic['res_id']], context=dic['context'])
    data = self.read(cr, uid, in_ids, ['state'], context=context)[0]
    assert data['state'] == 'done', 'the incoming shipment is not Done - done - %s'%data['state']
    # assert no backorder has been created
    back_ids = self.search(cr, uid, [('backorder_id', 'in', in_ids)], context=context)
    assert not back_ids, 'backorder exists, and should not because split was performed with an equal overall quantity'
    # check the moves in IN
    a_qty = [10.0]
    b_qty = [5.0]
    for obj in self.browse(cr, uid, in_ids, context=context):
      for move in obj.move_lines:
        # save move id
        context['in_move_id_claim'] = move.id
        if move.product_id.id == ref("claim_product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("claim_product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
    # check the moves in OUT
    a_qty = [10.0]
    b_qty = [5.0]
    out_ids = self.search(cr, uid, [('sale_id', '=', ref("so_002_claim"))], context=context)
    # save out into the context
    context.update({'out_id_claim': out_ids[0]})
    # only one OUT for the sale order
    assert len(out_ids) == 1, 'number of out objects is wrong - 1 - %s'%len(out_ids)
    for obj in self.browse(cr, uid, out_ids, context=context):
      for move in obj.move_lines:
        if move.product_id.id == ref("claim_product_A"):
          a_qty.remove(move.product_qty)
        if move.product_id.id == ref("claim_product_B"):
          b_qty.remove(move.product_qty)
    # all qty must be empty
    assert not a_qty, 'Quantity for product A is not empty - %s'%a_qty
    assert not b_qty, 'Quantity for product B is not empty - %s'%b_qty
-
  I find the chained picking id
-
  !python {model: stock.move}: |
    move_id = self.read(cr, uid, context['in_move_id_claim'], ['move_dest_id'], context=context)['move_dest_id'][0]
    chained_id = self.read(cr, uid, move_id, ['picking_id'], context=context)['picking_id'][0]
    # save the chained id
    context.update({'chained_id_claim': chained_id})
-
  I open the process chained picking wizard
-
  !python {model: stock.picking}: |
    chained_id = context['chained_id_claim']
    chained = self.browse(cr, uid, chained_id, context=context)
    # get the weird openERP picking type
    picking_type = self.pool.get('stock.partial.picking').get_picking_type(cr, uid, chained, context=context)
    # save the picking type
    context['picking_type_claim'] = picking_type
    # the register_ok must be True
    register_ok = chained.chained_from_in_stock_picking
    # assert register is True
    assert register_ok, 'register_ok is %s, the picking is not chained from incoming shipment to input'%register_ok
    res = self.action_process(cr, uid, [chained_id], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I complete the claim dynamic need with quarantine analyze and process the picking
-
  !python {model: stock.partial.picking}: |
    context.update({'yml_test': True})
    wizard = self.browse(cr, uid, context['wizard']['id'], context=context)
    self.write(cr, uid, context['wizard']['ids'], {'register_a_claim_partial_picking': True,
                                                   'claim_type_partial_picking': 'quarantine'}, context=context['wizard']['c'])
    # We must complete the production lots, because the creation of chained picking does not copy them
    picking_type = context['picking_type_claim']
    # complete production lots
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context['wizard']['c']):
      for mem_move in getattr(obj, 'product_moves_%s'%picking_type): # -> because is now IN with average product cost method !!!
        if mem_move.product_id.id == ref('claim_product_A'):
          mem_move.write({'prodlot_id': ref('claim_lot_As')}, context=context)
    # in_has_partner_id_partial_picking must be True
    assert wizard.in_has_partner_id_partial_picking, 'the partner check is False in the chained processing wizard'
    assert wizard.partner_id_partial_picking, 'the partner is missing in the chained processing wizard'
    # process the picking
    self.copy_all(cr, uid, context['wizard']['ids'], context=dict(context['wizard']['c']))
    self.do_partial(cr, uid, context['wizard']['ids'], context=dict(context['wizard']['c'],active_ids=[context['chained_id_claim']]))
-
  I find the claim 002 from wizard
- 
  !python {model: return.claim}: |
    # get data from on change function
    claim_id = self.search(cr, uid, [('picking_id_return_claim', '=', context['in_id_claim'])], context=context)[0]
    # save claim id into context
    context.update({'claim_id_claim': claim_id})
-
  I check that an internal picking has been created to quarantine
-
  !python {model: stock.picking}: |
    internal_claim_picking_ids = [context['chained_id_claim']]
    for obj in self.browse(cr, uid, internal_claim_picking_ids, context=context):
      # state must be done
      assert obj.state == 'done', 'state of internal picking to analyze quarantine is not done - %s'%obj.state
      for move in obj.move_lines:
        assert move.location_dest_id.id == context['common']['quarantine_anal'], 'destination of stock move is wrong - %s (%s) - %s'%(move.location_dest_id.id,move.location_dest_id.name,context['common']['quarantine_anal'])
-
  I create a return event in the same claim, open the add event wizard
-
  !python {model: return.claim}: |
    res = self.add_event(cr, uid, context['claim_id_claim'], context=context)
    model = res['res_model']
    id = res['res_id']
    c = res['context']
    context['wizard'] = {'id': id, 'ids': [id], 'model': model, 'c': c}
-
  I select the new event type - return
-
  !python {model: add.event}: |
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context):
      obj.write({'event_type': 'return'}, context=context)
-
  I test on change function of add event wizard
-
  !python {model: add.event}: |
    for obj in self.browse(cr, uid, context['wizard']['ids'], context=context):
      self.on_change_event_type(cr, uid, obj.id, obj.event_type, obj.claim_partner_id.id, obj.claim_type, obj.claim_picking_id.id, context=context)
-
  I create the new event
-
  !python {model: add.event}: |
    self.do_add_event(cr, uid, context['wizard']['ids'], context=context)
-
  I get the last event in the claim
-
  !python {model: return.claim}: |
    last_id = self.get_last_event(cr, uid, context['claim_id_claim'], context=context)[context['claim_id_claim']]
    # save last event id in context
    context.update({'event_id_claim': last_id})
-
  I process the last event
-
  !python {model: claim.event}: |
    context.update({'yml_test': True})
    self.do_process_event(cr, uid, context['event_id_claim'], context=dict(context,active_ids=[context['claim_id_claim']]))
    # event must be done
    data_event = self.read(cr, uid, context['event_id_claim'], ['state'], context=context)
    event_state = data_event['state']
    assert event_state == 'done', 'the state of the event is not done - %s'%event_state
-
  I check that an internal picking has been created to supplier - type is out
-
  !python {model: stock.picking}: |
    internal_claim_picking_ids = self.search(cr, uid, [('type', '=', 'out'), ('origin', '=', context['po_name_claim'] + ':' + context['so_name_claim'])], context=context)
    for obj in self.browse(cr, uid, internal_claim_picking_ids, context=context):
      # state must be assigned
      assert obj.state == 'assigned', 'state of internal picking to supplier is not assigned - %s'%obj.state
