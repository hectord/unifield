-
  In order to test Consumption Calculation module, I create initial data
-
  I create a new UoM
-
  !record {model: product.uom, id: product_10_unit}:
    category_id: product.product_uom_categ_unit
    name: 10 PCE
    factor: 0.1
    uom_type: bigger
-
  I create a supplier
-
  !record {model: res.partner, id: supplier1}:
    name: Supplier 1
    supplier: True
    partner_type: external
-
  I create an address for Supplier 1
-
  !record {model: res.partner.address, id: supplier1_addr}:
    name: SupplierÂ 1
    partner_id: supplier1
-
  I create a customer
-
  !record {model: res.partner, id: customer1}:
    name: Customer 1
    customer: True
    partner_type: internal
-
  I create an address for Customer 1
-
  !record {model: res.partner.address, id: customer1_addr}:
    name: Customer 1
    partner_id: customer1
-
  I create a product category
-
  !record {model: product.category, id: prod_cat1}:
    name: Categ1
-
    I create the product P1
-
  !record {model: product.product, id: product1}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P1
    price_margin: 2.0
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
    international_status: product_attributes.int_1
-
    I create a second product, P2
-
  !record {model: product.product, id: product2}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P2
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
    I create the product P3
-
  !record {model: product.product, id: product3}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P3
    price_margin: 2.0
    procure_method: make_to_stock
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 100.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit    
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    international_status: product_attributes.int_1
-
    I create the product P4
-
  !record {model: product.product, id: product4}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P4
    price_margin: 2.0
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 120.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
    international_status: product_attributes.int_1
-
    I create the product P5
-
  !record {model: product.product, id: product5}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P5
    price_margin: 2.0
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 120.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    batch_management: True
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
    international_status: product_attributes.int_1
-
    I create the product P6
-
  !record {model: product.product, id: product6}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P6
    price_margin: 2.0
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 120.0
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    batch_management: True
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
    international_status: product_attributes.int_1
-
    I create the product P7
-
  !record {model: product.product, id: product7}:
    categ_id: prod_cat1
    cost_method: standard
    mes_type: fixed
    name: P7
    price_margin: 2.0
    procure_method: make_to_order
    property_stock_inventory: stock.location_inventory
    property_stock_procurement: stock.location_procurement
    property_stock_production: stock.location_production
    seller_delay: '1'
    standard_price: 120.0
    batch_management: True
    supply_method: buy
    type: product
    uom_id: product.product_uom_unit
    uom_po_id: product.product_uom_unit
    volume : 0.0
    warranty: 0.0
    weight: 0.0
    weight_net: 0.0
    seller_ids:
      - sequence: 10
        min_qty: 0.00
        name: supplier1
    international_status: product_attributes.int_1
-
  I create an activity on customer location
-
  !record {model: stock.location, id: activity1}:
    name: Activity 1
    location_id: stock.stock_location_internal_customers
    usage: customer
-
  I create all batch for products
-
  I create a batch for product 5 
-
  !record {model: stock.production.lot, id: lot1_1}:
    name: '0001_1'
    ref: '0001_1'
    product_id: product5
    life_date: '2011-11-20'
-
    I create a batch for product 5 
-
  !record {model: stock.production.lot, id: lot1_2}:
    name: '0001_2'
    ref: '0001_2'
    product_id: product5
    life_date: '2011-12-10'
-
    I create a batch for product 5 
-
  !record {model: stock.production.lot, id: lot1_3}:
    name: '0001_3'
    ref: '0001_3'
    product_id: product5
    life_date: '2011-12-25'
-
    I create a batch for product 5 
-
  !record {model: stock.production.lot, id: lot1_4}:
    name: '0001_4'
    ref: '0001_4'
    product_id: product5
    life_date: '2012-01-05'
-
    I create a batch for product 5 
-
  !record {model: stock.production.lot, id: lot1_5}:
    name: '0001_5'
    ref: '0001_5'
    product_id: product5
    life_date: '2012-01-10'
-
    I create a batch for product 5 
-
  !record {model: stock.production.lot, id: lot1_6}:
    name: '0001_6'
    ref: '0001_6'
    product_id: product5
    life_date: '2012-01-25'
-
    I create a batch for product 6 with today + 50 days as expiry date
-
  !record {model: stock.production.lot, id: lot2_1}:
    name: '0002_1'
    ref: '0002_1'
    product_id: product6
- 
  I add the life date on the lot
-
  !python {model: stock.production.lot }: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=50)).strftime('%Y-%m-%d')
    self.write(cr, uid, ref('lot2_1'), {'life_date': req_date}, context=context)
-   
  I create a batch for product 6 with today + 15 days as expiry date
-
  !record {model: stock.production.lot, id: lot2_2}:
    name: '0002_2'
    ref: '0002_2'
    product_id: product6
- 
  I add the life date on the lot
-
  !python {model: stock.production.lot }: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=15)).strftime('%Y-%m-%d')
    self.write(cr, uid, ref('lot2_2'), {'life_date': req_date}, context=context)
-   
  I create a batch for product 6 with today + 25 days as expiry date
-
  !record {model: stock.production.lot, id: lot2_3}:
    name: '0002_3'
    ref: '0002_3'
    product_id: product6
- 
  I add the life date on the lot
-
  !python {model: stock.production.lot }: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=25)).strftime('%Y-%m-%d')
    self.write(cr, uid, ref('lot2_3'), {'life_date': req_date}, context=context)
-   
  I create a batch for product 7 with today + 25 days as expiry date
-
  !record {model: stock.production.lot, id: lot3_1}:
    name: '0003_1'
    ref: '0003_1'
    product_id: product7
- 
  I add the life date on the lot
-
  !python {model: stock.production.lot }: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=25)).strftime('%Y-%m-%d')
    self.write(cr, uid, ref('lot3_1'), {'life_date': req_date}, context=context)
-   
  I create a batch for product 7 with today + 17 days as expiry date
-
  !record {model: stock.production.lot, id: lot3_2}:
    name: '0003_2'
    ref: '0003_2'
    product_id: product7
- 
  I add the life date on the lot
-
  !python {model: stock.production.lot }: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=17)).strftime('%Y-%m-%d')
    self.write(cr, uid, ref('lot3_2'), {'life_date': req_date}, context=context)
-   
  I create a batch for product 7 with today - 20 days as expiry date
-
  !record {model: stock.production.lot, id: lot3_3}:
    name: '0003_3'
    ref: '0003_3'
    product_id: product7
- 
  I add the life date on the lot
-
  !python {model: stock.production.lot }: |
    import time
    from datetime import datetime
    from dateutil.relativedelta import relativedelta
    req_date = (datetime.strptime(time.strftime('%Y-%m-%d'), '%Y-%m-%d') + relativedelta(days=-20)).strftime('%Y-%m-%d')
    self.write(cr, uid, ref('lot3_3'), {'life_date': req_date}, context=context)
-   
  I create a batch for product 7 with today + 10 years as expiry date
-
  !record {model: stock.production.lot, id: lot3_4}:
    name: '0004_4'
    ref: '0004_4'
    product_id: product7
    life_date: !eval "(DateTime.now()+DateTime.RelativeDateTime(years=10)).strftime('%Y-%m-%d')"
-
  I create an inventory to enter these products into the stock
-
  !record {model: stock.inventory, id: lot_inv1}:
    name: Batch inventory
    date: !eval time.strftime('%Y-%m-%d')
    inventory_line_id:
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product5
        product_qty: 100
        prod_lot_id: lot1_1
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product5
        product_qty: 100
        prod_lot_id: lot1_2
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product5
        product_qty: 100
        prod_lot_id: lot1_3
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product5
        product_qty: 100
        prod_lot_id: lot1_4
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product5
        product_qty: 100
        prod_lot_id: lot1_5
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product5
        product_qty: 100
        prod_lot_id: lot1_6
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product6
        product_qty: 10
        prod_lot_id: lot2_1
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product6
        product_qty: 25
        prod_lot_id: lot2_2
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product6
        product_qty: 3
        prod_lot_id: lot2_3
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product7
        product_qty: 85
        prod_lot_id: lot3_1
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product7
        product_qty: 1
        prod_lot_id: lot3_2
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product7
        product_qty: 12
        prod_lot_id: lot3_3
      - location_id: stock.stock_location_stock
        product_uom: product.product_uom_unit
        product_id: product7
        product_qty: 10
        prod_lot_id: lot3_4
-
  I confirm the inventory
-
  !python {model: stock.inventory}: |
    self.action_confirm(cr, uid, [ref('lot_inv1')], context=context)
    self.action_done(cr, uid, [ref('lot_inv1')], context=context)
