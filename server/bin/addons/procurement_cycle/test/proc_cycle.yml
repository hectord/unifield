-
  In order to test the behaviour of the Procurement Cycle Module
  we will create new rules for products and run the scheduler to
  see that results are good.
-
  We create a new frequency for all days
-
  !record {model: stock.frequence, id: daily1}:
    name: daily
    daily_frequency_ok: True
    daily_frequency: 1
    start_date: !eval time.strftime('%Y-%m-%d', time.strptime('2010-03-03', '%Y-%m-%d'))
    no_end_date: True
-
  We create a new rule for P1/P2 and cycle_sloc2
-
  !record {model: stock.warehouse.order.cycle, id: r1, context: {'button': 'test'}}:
    warehouse_id: warehouse_proc_cycle
    location_id: cycle_sloc2
    frequence_id: daily1
    name: R4
    active: 1
    leadtime: 0
    order_coverage: 3
    safety_stock_time: 1
    past_consumption: 0
    reviewed_consumption: 1
    manual_consumption: 0.00
    product_ids: 
      - product_id: product1
        uom_id: product.product_uom_unit
        safety_stock: 0.00
      - product_id: product2
        uom_id: product.product_uom_unit
        safety_stock: 0.00
-
  We create a new rule for P3 in Sloc2
-
  !record {model: stock.warehouse.order.cycle, id: r2, context: {'button': 'test'}}:
    warehouse_id: warehouse_proc_cycle
    location_id: cycle_sloc2
    frequence_id: daily1
    active: 1
    leadtime: 1.5
    order_coverage: 5
    safety_stock_time: 0
    past_consumption: 0
    reviewed_consumption: 1
    manual_consumption: 70.00
    product_ids: 
      - product_id: product3
        uom_id: product.product_uom_unit
        safety_stock: 0.00
-
  We create a new rule for P4 on Sloc2
-
  !record {model: stock.warehouse.order.cycle, id: r3, context: {'button': 'test'}}:
    warehouse_id: warehouse_proc_cycle
    location_id: cycle_sloc2
    frequence_id: daily1
    active: 1
    leadtime: 0
    order_coverage: 2
    safety_stock_time: 0
    past_consumption: 1
    reviewed_consumption: 0
    product_ids:
      - product_id: product4
        uom_id: product.product_uom_unit
        safety_stock: 0.00
-
  We create a new rule for P1/P2/P3 on Sloc1
-
  !record {model: stock.warehouse.order.cycle, id: r4, context: {'button': 'test'}}:
    warehouse_id: warehouse_proc_cycle
    location_id: cycle_sloc1
    frequence_id: daily1
    active: 1
    leadtime: 3
    order_coverage: 6
    safety_stock_time: 0
    past_consumption: 0
    reviewed_consumption: 1
    manual_consumption: 0.00
    product_ids:
      - product_id: product1
        uom_id: product.product_uom_unit
        safety_stock: 50.00
      - product_id: product2
        uom_id: product.product_uom_unit
        safety_stock: 50.00
      - product_id: product3
        uom_id: product.product_uom_unit
        safety_stock: 50.00
-
  We run the scheduler
-
  !python {model: procurement.order, context: {'button': 'test'}}: |
    self.run_automatic_cycle(cr, uid, False, context=context)
-
  Check if the procurement for P1 in Sloc1 has good values
-
  !python {model: procurement.order}: |
    p1_s1_id = self.search(cr, uid, [('product_id', '=', ref('product1')), ('location_id', '=', ref('cycle_sloc1'))])
    assert p1_s1_id, "The scheduler hasn't created the procurement order for P1 in Sloc1"
    for proc in self.browse(cr, uid, p1_s1_id):
      assert proc.product_qty == 1160.00, "Bad quantity on procurement order for P1 in Sloc1 %s != 1160"%(proc.product_qty, )
-
  Check if the procurement for P1 in Sloc2 has good values
-
  !python {model: procurement.order}: |
    p1_s2_id = self.search(cr, uid, [('product_id', '=', ref('product1')), ('location_id', '=', ref('cycle_sloc2')), ('origin', '=', 'R4')])
    assert p1_s2_id, "The scheduler hasn't created the procurement order for P1 in Sloc2"
    for proc in self.browse(cr, uid, p1_s2_id):
      assert proc.product_qty == 523.00, "Bad quantity on procurement order for P1 in Sloc2 %s != 523"%(proc.product_qty, )
-
  Check if the procurement for P2 in Sloc1 has good values
-
  !python {model: procurement.order}: |
    p2_s1_id = self.search(cr, uid, [('product_id', '=', ref('product2')), ('location_id', '=', ref('cycle_sloc1'))])
    assert p2_s1_id, "The scheduler hasn't created the procurement order for P2 in Sloc1"
    for proc in self.browse(cr, uid, p2_s1_id):
      assert proc.product_qty == 2169.00, "Bad quantity on procurement order for P2 in Sloc1 %s != 2169"%(proc.product_qty, )
-
  Check if the procurement for P2 in Sloc2 has good values
-
  !python {model: procurement.order}: |
    p2_s2_id = self.search(cr, uid, [('product_id', '=', ref('product2')), ('location_id', '=', ref('cycle_sloc2'))])
    assert p2_s2_id, "The scheduler hasn't created the procurement order for P2 in Sloc2"
    for proc in self.browse(cr, uid, p2_s2_id):
      assert proc.product_qty == 1264.00, "Bad quantity on procurement order for P2 in Sloc2 %s != 1264"%(proc.product_qty, )
-
  Check if the procurement for P3 in Sloc1 has good values
-
  !python {model: procurement.order}: |
    p3_s1_id = self.search(cr, uid, [('product_id', '=', ref('product3')), ('location_id', '=', ref('cycle_sloc1'))])
    assert p3_s1_id, "The scheduler hasn't created the procurement order for P3 in Sloc1"
    #for proc in self.browse(cr, uid, p3_s1_id):
    #  # 02/03/2012: 3*150 + 6*150 - ( 488 - 50 - 338) 
    #  assert proc.product_qty == 1250.00, "Bad quantity on procurement order for P3 in Sloc1 %s != 1250"%(proc.product_qty, )
-
  Check if the procurement for P3 in Sloc2 has good values
-
  !python {model: procurement.order}: |
    import calendar
    import datetime
    p3_s2_id = self.search(cr, uid, [('product_id', '=', ref('product3')), ('location_id', '=', ref('cycle_sloc2'))])
    assert p3_s2_id, "The scheduler hasn't created the procurement order for P3 in Sloc2"
-
  Check if the procurement for P4 in Sloc2 has good values
-
  !python {model: procurement.order}: |
    p4_s2_id = self.search(cr, uid, [('product_id', '=', ref('product4')), ('location_id', '=', ref('cycle_sloc2'))])
    assert not p4_s2_id, "The scheduler has created a procurement order for P4 in Sloc2"
