-
  In order to test test the CRUD feature of a catalogue,
  we tries to create a new catalogue with 3 lines, then update
  one of these 3 lines and update the period_to of the catalogue.
  Update also the currency of the catalogue.
  
  If you need information about data used in this test file, please
  see the supplier_catalogue/test/data.yml file
-
  First, we will create a new catalogue
- 
  !record {model: supplier.catalogue, id: catalogue1}:
    currency_id: base.EUR
    period_from: 2012-01-01
    period_to: 2012-12-31
    partner_id: supplier1
    name: Catalogue1
- 
  We create a first line for this catalogue
-
  !record {model: supplier.catalogue.line, id: catalogue1_line1}:
    catalogue_id: catalogue1
    product_id: product1
    min_qty: 1.00
    min_order_qty: 1.00
    rounding: 1.00
    line_uom_id: product.product_uom_unit
    unit_price: 70.00
-
  We create a second line for this catalogue
-
  !record {model: supplier.catalogue.line, id: catalogue1_line2}:
    catalogue_id: catalogue1
    product_id: product2
    min_qty: 1.00
    min_order_qty: 1.00
    rounding: 1.00
    line_uom_id: product.product_uom_unit
    unit_price: 140.00
-
  We create a third line for this catalogue
-
  !record {model: supplier.catalogue.line, id: catalogue1_line3}:
    catalogue_id: catalogue1
    product_id: product3
    min_qty: 1.00
    min_order_qty: 1.00
    line_uom_id: product.product_uom_unit
    unit_price: 240.00
-
  We create a fourth line for this catalogue
-
  !record {model: supplier.catalogue.line, id: catalogue1_line4}:
    catalogue_id: catalogue1
    product_id: product3
    min_qty: 10.00
    min_order_qty: 10.00
    line_uom_id: product.product_uom_unit
    unit_price: 230.00
-
  We create a fifth line for this catalogue
-
  !record {model: supplier.catalogue.line, id: catalogue1_line5}:
    catalogue_id: catalogue1
    product_id: product3
    min_qty: 20.00
    min_order_qty: 20.00
    rounding: 5.00
    line_uom_id: product.product_uom_unit
    unit_price: 200.00
-
  We confirm the supplier catalogue
-
  !python {model: supplier.catalogue}: |
    self.button_confirm(cr, uid, ref('catalogue1'), context=context)
-
  We check if the product3 has good values in supplierinfo
- 
  !python {model: product.supplierinfo}: |
    ref_product = self.pool.get('product.product').browse(cr, uid, ref('product3')).product_tmpl_id.id
    info_ids = self.search(cr, uid, [('product_id', '=', ref_product), ('name', '=', ref('supplier1'))])
    assert len(info_ids) == 1, "Number of supplier info not correct :: result %s (expected 1)" % len(info_ids)
    for info in self.browse(cr, uid, info_ids):
      assert int(info.delay) == 10, "Delay is not correct :: result: %s (expected 10)" % info.delay
      assert len(info.pricelist_ids) == 3, "Number of lines in supplier info not correct :: result %s (expected 3)" % len(info.pricelist_ids)
      for line in info.pricelist_ids:
        assert line.currency_id.id == ref('base.EUR'), "Currency of the line is not correct :: result %s (expected EUR)" % line.currency_id.name
        assert line.uom_id.id == ref('product.product_uom_unit'), "UoM of the line is not correct :: result %s (expected PCE)" % line.uom_id.name
        assert line.valid_till == '2012-12-31', "Bad valid till date on the line :: result %s (expected 31/Dec/12)" % line.valid_till
        if line.min_quantity == 1.00:
          assert line.price == 240.00, "Unit price of the line is not correct :: result %s (expected 240.00) - #1" % line.price
          assert line.rounding == 1.00, "Rounding of the line is not correct :: result %s (expected 1.00) - #1" % line.rounding
        elif line.min_quantity == 10.00:
          assert line.price == 230.00, "Unit price of the line is not correct :: result %s (expected 230.00) - #2" % line.price
          assert line.rounding == 1.00, "Rounding of the line is not correct :: result %s (expected 1.00) - #2" % line.rounding
        elif line.min_quantity == 20.00:
          assert line.price == 200.00, "Unit price of the line is not correct :: result %s (expected 200.00) - #3" % line.price
          assert line.rounding == 5.00, "Rounding of the line is not correct :: result %s (expected 5.00) - #3" % line.rounding
        else:
          assert False, "Line with bad min qty is present :: Min qty of the line %s" % line.min_qty
-
  We will simulate the computation of price in a purchase order line
-
  !python {model: product.product}: |
    price = self.pool.get('product.pricelist').price_get(cr,uid,[ref('purchase.list0')],
                    ref('product3'), 1.0, ref('supplier1'), {
                        'uom': ref('product.product_uom_unit'),
                        'date': '2012-04-01',
                        })[ref('purchase.list0')]
    assert price == 240.00, "Bad price computation :: result -> %s (expected -> 240.00)" % price
    price = self.pool.get('product.pricelist').price_get(cr,uid,[ref('purchase.list0')],
                    ref('product3'), 12.0, ref('supplier1'), {
                        'uom': ref('product.product_uom_unit'),
                        'date': '2012-04-01',
                        })[ref('purchase.list0')]
    assert price == 230.00, "Bad price computation :: result -> %s (expected -> 230.00)" % price
    price = self.pool.get('product.pricelist').price_get(cr,uid,[ref('purchase.list0')],
                    ref('product3'), 200.0, ref('supplier1'), {
                        'uom': ref('product.product_uom_unit'),
                        'date': '2012-04-01',
                        })[ref('purchase.list0')]
    assert price == 200.00, "Bad price computation :: result -> %s (expected -> 200.00)" % price
-
  We remove a supplier catalogue line
-
  !python {model: supplier.catalogue.line}: |
    self.unlink(cr, uid, [ref('catalogue1_line5')], context=context)
-
  We check the line in supplier information has been removed
-
  !python {model: product.supplierinfo}: |
    ref_product = self.pool.get('product.product').browse(cr, uid, ref('product3')).product_tmpl_id.id
    info_ids = self.search(cr, uid, [('product_id', '=', ref_product), ('name', '=', ref('supplier1'))])
    assert len(info_ids) == 1, "Number of supplier info not correct :: result %s (expected 1)" % len(info_ids)
    for info in self.browse(cr, uid, info_ids):
      assert int(info.delay) == 10, "Delay is not correct :: result: %s (expected 10)" % info.delay
      assert len(info.pricelist_ids) == 2, "Number of lines in supplier info not correct :: result %s (expected 2)" % len(info.pricelist_ids)
-
  Try to duplicate a partner with a catalogue
-
  !python {model: res.partner}: |
     self.copy(cr, uid, ref('supplier1'), context=context)

